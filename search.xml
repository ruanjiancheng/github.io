<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>字节跳动面经</title>
    <url>/2022/04/09/ByteDance-1/</url>
    <content><![CDATA[<p><img src="/images/image-20220409140426049.jpg" alt="image-20220409140426049"></p>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>3月15日，50 min</p>
<ul>
<li>自我介绍</li>
</ul>
<hr>
<p>项目相关：</p>
<ul>
<li><code>redis</code> 为什么快</li>
<li><code>redis</code> IO 多路复用</li>
<li><code>redis</code> 的数据一致性</li>
<li><code>mysql</code> 中密码如何存储</li>
<li><code>mysql</code> 表的结构</li>
<li><code>HTTP</code> 的 GET 和 POST 的区别</li>
<li><code>HTTP</code> 的流程， <code>HTTP</code> 缓存</li>
<li><code>HTTP</code> 状态码</li>
<li><code>HTTP</code> 请求、响应报文格式</li>
<li><code>RESTful</code> 风格开发的好处</li>
</ul>
<hr>
<p>基础知识：</p>
<ul>
<li>设计模式</li>
<li>C++ 代码编译过程</li>
<li>深拷贝浅拷贝</li>
<li>栈和堆是什么</li>
</ul>
<hr>
<p>算法题：</p>
<ol>
<li>链表倒置，时间复杂度$O(n)$，空间复杂度 $O(1)$</li>
<li>最长公共子串，时间复杂度$O(n^2)$，空间复杂度 $O(n^2)$</li>
</ol>
<hr>
<p>反问：</p>
<ol>
<li>部门业务</li>
<li>使用的语言</li>
</ol>
<p>第三天约二面</p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>本来是 20 号的二面，结果面试官鸽了。</p>
<p>3月23日，70 min</p>
<ul>
<li>自我介绍</li>
<li>能实习多久</li>
<li>会什么语言</li>
</ul>
<hr>
<p>项目相关：</p>
<ul>
<li><code>redis</code> 的数据一致性，面试官一直不懂我的操作（雾）</li>
<li><code>redis</code> 的基础数据结构</li>
<li>对 <code>redis</code> 的理解，面试官嫌我数据库太菜了，就没有问我 <code>mysql</code> 了</li>
</ul>
<hr>
<p>基础知识：</p>
<ul>
<li>堆排序（给他把十大排序讲了一遍）</li>
</ul>
<hr>
<p>算法题：</p>
<ul>
<li>编辑距离，时间复杂度$O(n^2)$，空间复杂度 $O(n^2)$</li>
</ul>
<hr>
<p>反问：</p>
<ul>
<li>一般优化性能是重构代码降低复杂度，还是多加几台服务器</li>
</ul>
<p>10 min 后约三面</p>
<h1 id="hr-面"><a href="#hr-面" class="headerlink" title="hr 面"></a>hr 面</h1><p>3月28日，10 min</p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake</title>
    <url>/2022/04/07/cmake/</url>
    <content><![CDATA[<h1 id="linux-简介"><a href="#linux-简介" class="headerlink" title="linux 简介"></a>linux 简介</h1><h2 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h2><ul>
<li>bin：存储二进制指令</li>
<li>sbin：只能 sudo 的指令</li>
<li>etc：配置文件</li>
<li>dev：IO 设备，需要被挂载</li>
<li>mnt：IO 设备被 mount 的文件夹</li>
<li>home：除了 root 之外，其他用户的目录</li>
<li>proc：存储 linux 运行时的进程</li>
<li>tmp：临时文件</li>
<li>usr：存放文虎自己安装的文件，<code>program files</code></li>
<li>var：存放程序和日志文件</li>
</ul>
<h2 id="1-2-文件指令"><a href="#1-2-文件指令" class="headerlink" title="1.2 文件指令"></a>1.2 文件指令</h2><ul>
<li><p>命令 [option] [object]</p>
</li>
<li><p>pwd：print current working directory</p>
</li>
<li><p>ls：list</p>
</li>
<li><p>cd：change directory</p>
</li>
<li><p>mkdir：make directory，创建文件夹</p>
<ul>
<li>-p：创建多层不存在的文件夹</li>
</ul>
</li>
<li><p>touch：创建文件</p>
</li>
<li><p>rm：删除文件或文件夹</p>
</li>
<li><p>cp：复制文件或文件夹 <code>cp [src] [dest]</code></p>
<ul>
<li>-r 递归复制，文件夹</li>
</ul>
</li>
<li><p>mv：移动文件</p>
</li>
<li><p>time：time [指令] 用于计时</p>
</li>
</ul>
<h1 id="g"><a href="#g" class="headerlink" title="g++"></a>g++</h1><p>switch user do: sudo （root do）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line"><span class="comment"># 安装 gcc g++ gdb</span></span><br><span class="line">sudo yum install build-essential gdb</span><br><span class="line"><span class="comment"># 安装 cmake</span></span><br><span class="line">sudo yum install cmake</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-rh-2-3.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-2-3.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install devtoolset-9-gcc-c++</span><br><span class="line"></span><br><span class="line">source /opt/rh/devtoolset-9/enable</span><br></pre></td></tr></table></figure>



<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line"><span class="comment"># -E 仅对文件进行预处理</span></span><br><span class="line"><span class="comment"># 将 include 展开为代码</span></span><br><span class="line">g++ -E t.cpp -o t.i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># -S 产生汇编语言文件</span></span><br><span class="line"><span class="comment"># 中间代码生成，汇编文件</span></span><br><span class="line">g++ -S t.i -o t.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 汇编</span></span><br><span class="line"><span class="comment"># -c 源代码 -&gt; 机器语言的目标代码</span></span><br><span class="line"><span class="comment"># 二进制文件</span></span><br><span class="line">g++ -c t.s -o t.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接</span></span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">g++ t.o -o t</span><br></pre></td></tr></table></figure>

<h3 id="g-重要的编译参数"><a href="#g-重要的编译参数" class="headerlink" title="g++ 重要的编译参数"></a>g++ 重要的编译参数</h3><ul>
<li>-g：产生带调试信息的可执行文件</li>
<li>-O[n] 优化源代码</li>
<li>-l 指定<strong>库</strong>文件，用于链接</li>
<li>-L 指定<strong>库</strong>文件路径 （默认：<code>/lib</code> <code>/usr/lib</code> <code>/usr/local/lib</code>）</li>
<li>-I 指定<strong>头文件</strong>的搜索目录</li>
<li>-Wall 打印警告信息</li>
<li>-w 关闭警报信息</li>
<li>-std&#x3D;c++[x]</li>
<li>-o 指定输出名</li>
<li>-D 定义宏</li>
</ul>
<h3 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ main.cpp /src/swap.cpp -Iinclude</span><br></pre></td></tr></table></figure>

<p>mian.cpp 中使用了 swap.cpp 中的函数</p>
<h3 id="生成静态库文件并编译"><a href="#生成静态库文件并编译" class="headerlink" title="生成静态库文件并编译"></a>生成静态库文件并编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 .o 文件</span></span><br><span class="line">g++ Swap.cpp -c -I../include</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态库文件 LibSwap.a</span></span><br><span class="line">ar rs libSwap.a Swap.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line">g++ mian.cpp -lswap -L./src -Iinclude -o static_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">./static_main</span><br></pre></td></tr></table></figure>

<h3 id="生成动态库文件"><a href="#生成动态库文件" class="headerlink" title="生成动态库文件"></a>生成动态库文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成动态库文件 libSwap.so</span></span><br><span class="line"><span class="comment"># -shared 生成动态库文件</span></span><br><span class="line">g++ swap.cpp -I../include -fPIC -shared -o libSwap.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 .o 文件</span></span><br><span class="line"><span class="comment"># g++ Swap.cpp -I../include -c -fPIC</span></span><br><span class="line"><span class="comment"># g++ -shared -o libSwap.so Swap.o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用动态库编译</span></span><br><span class="line">g++ main.cpp -Iinclude -lswap -Lsrc -o dyna_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行可执行文件</span></span><br><span class="line"><span class="comment"># 需要先指定动态库文件的搜索路径</span></span><br><span class="line"><span class="comment"># LD_LIBRARY_PATH=[dir] ./[bin]</span></span><br><span class="line">LD_LIBRARY_PATH=src ./dyna_mian</span><br></pre></td></tr></table></figure>



<h1 id="GDB-调试器"><a href="#GDB-调试器" class="headerlink" title="GDB 调试器"></a>GDB 调试器</h1><p>GDB(GNU Debugger) 是一个调试 C&#x2F;C++ 程序的调试器</p>
<ul>
<li>设置<strong>断点</strong></li>
<li><strong>单步</strong>执行程序，便于调试</li>
<li>查看程序中的<strong>变量值</strong>的变化</li>
</ul>
<h2 id="常用的调试命令参数"><a href="#常用的调试命令参数" class="headerlink" title="常用的调试命令参数"></a>常用的调试命令参数</h2><p>gdb [exefilename]，exefilename 为可执行文件名</p>
<ul>
<li><p>run(r)：重新开始运行程序</p>
</li>
<li><p>start：单步执行，运行程序</p>
</li>
<li><p>list：查看源代码，list-x 从第 x 行开始查看代码，list+func 查看 func 函数</p>
</li>
<li><p>set：设置变量的值</p>
</li>
<li><p>next：单步调试，逐过程，函数直接执行</p>
</li>
<li><p>step：单步调试，逐语句，跳入函数体内部</p>
</li>
<li><p>finish：结束当前函数的执行</p>
</li>
<li><p>continue(c)：继续执行</p>
</li>
</ul>
<p>查看：</p>
<ul>
<li>print(p): print [var] 输出 var 的值</li>
<li>display：display [var] 一直监视 var 的值</li>
<li>list(l)：显示当前附近的代码</li>
</ul>
<p>添加断点：</p>
<ul>
<li><p>break：break [n]（b [n]） 在第 n 行添加断点</p>
</li>
<li><p>info breakpoints (i b) 查看全部的断点信息</p>
</li>
<li><p>quit 结束 gdb</p>
</li>
</ul>
<blockquote>
<p>在 g++ 编译的时候，需要加入 -g 指令才能使用 gdb 调试</p>
<p>enter 键，重复执行上一次的命令</p>
<p>ctrl + l 清屏</p>
</blockquote>
<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><blockquote>
<p>使用命令行打开 vscode：code [filedir]</p>
</blockquote>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li>切换文件：<code>strl + p</code></li>
<li>打开命令面板：<code>ctrl + shift + p</code></li>
<li>打开终端：ctrl + &#96;</li>
<li>关闭侧边栏：<code>ctrl + b</code></li>
<li>变量同一重命名：<code>F2</code></li>
<li>转到定义出：<code>F12</code></li>
<li>格式化代码：<code>ctrl + shift + F</code></li>
</ul>
<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><ul>
<li>是什么是 cmake</li>
<li>语法特性介绍</li>
<li>重要指令和 cmake 常用变量</li>
<li>cmake 编译工程</li>
</ul>
<h2 id="CMake-是什么"><a href="#CMake-是什么" class="headerlink" title="CMake 是什么"></a>CMake 是什么</h2><ul>
<li>CMake 是一个跨平台的安装编译工具，可以使用简单的语句来描述所有平台的安装(编译过程)</li>
</ul>
<img src="/.com//image-20220315140635766.jpg" alt="image-20220315140635766" style="zoom:50%;">

<center>为什么 CMake 跨平台</center>

<p>通过 <code>CMakeList</code> 构建不同平台的 <code>build tool</code></p>
<h2 id="基本语法介绍"><a href="#基本语法介绍" class="headerlink" title="基本语法介绍"></a>基本语法介绍</h2><ul>
<li>基本语法格式：指令(参数1 参数2)<ul>
<li>参数使用()</li>
<li>参数之间使用空格或分号</li>
</ul>
</li>
<li>类似于 redis ，指令是不区分大小写的，参数和变量是区分的</li>
<li>变量使用 ${} 方式取值，到那时在 IF 语句中是直接使用变量名取值的</li>
</ul>
<h2 id="重要的指令"><a href="#重要的指令" class="headerlink" title="重要的指令"></a>重要的指令</h2><ul>
<li>cmake_minimum_required 指定 CMake 的最小版本要求<ul>
<li><code>cmake_minimum_required(VERSION 2.8.3)</code></li>
</ul>
</li>
<li>project 定义工程名称，并可指定工程指定的语言<ul>
<li><code>project(HELLOWORLD)</code></li>
</ul>
</li>
<li>set 显示定义变量<ul>
<li><code>set(SRC swap.cpp hello.cpp)</code></li>
</ul>
</li>
<li>include_directories 向工程添加特定的<strong>头文件</strong>的搜索路径<ul>
<li><code>include_directories(/usr/include ./include)</code></li>
</ul>
</li>
<li>link_directories 向工程添加多个特定的<strong>库文件</strong>搜索路径<ul>
<li><code>linkdirectories(/usr/lib/ ./lib)</code></li>
</ul>
</li>
<li>add_library 生成库文件<ul>
<li><code>add_library(libname [SHARED|STATIC] src1 src2)</code></li>
<li><code>add_library(hello SHARED $&#123;SRC&#125;)</code></li>
</ul>
</li>
<li>add_compile_options 添加编译参数<ul>
<li><code>add_compile_options(-Wall -std=c++14 -o2)</code></li>
</ul>
</li>
<li>add_executable 生成可执行文件，编译 mian.cpp 生成可执行文件 main<ul>
<li><code>add_executable(mian mian.cpp)</code></li>
</ul>
</li>
<li>target_link_libraries 为 target 添加需要连接的共享库 相当于 -l 参数<ul>
<li><code>target_link_libraries(mian hello)</code> 将 hello 动态库链接到 mian 中</li>
</ul>
</li>
<li>add_subdirectory 向当前工程添加源文件的子目录<ul>
<li><code>add_subdirectory(src)</code> src 文件夹中必须存在一个 CMakeList.txt</li>
</ul>
</li>
<li>aux_source_directory 发下一个目录下所有的源文件并将列表存储在一个变量中，这个指令临时用来自动构建源文件列表 <strong>？？？？不懂</strong></li>
</ul>
<h2 id="CMake-常用变量"><a href="#CMake-常用变量" class="headerlink" title="CMake 常用变量"></a>CMake 常用变量</h2><ul>
<li>CMAKE_C_FLAGS gcc 编译选项</li>
<li>CMAKE_CXX_FLAGS g++ 编译选项</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 CMAKE_CXX_FLAGS 编译选项后追加 -std=c++11</span></span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li>CMAKE_BUILD_TYPE 编译类型(debug, release)</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure>



<h2 id="CMake-编译工程"><a href="#CMake-编译工程" class="headerlink" title="CMake 编译工程"></a>CMake 编译工程</h2><p>CMake 目录结构：项目主目录存在 CMakeLists.txt</p>
<p>两种方式设置编译规则：</p>
<ol>
<li>包含源文件的子文件夹包含 CMakeLists.txt 文件，主目录的 CMakelists.txt 通过 <code>add_subdirectory</code> 添加子目录即可</li>
<li>包含源文件的子文件夹未包含 CMakeLists.txt 文件，子目录的编译规则体现在主目录的 CMakeLists.txt 中</li>
</ol>
<h3 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h3><ul>
<li>手动编写 CMakeLists.txt </li>
<li>执行命令 <code>cmake PATH</code> 生成 Makefile (PATH 是顶层 CMakeLists.txt 所在的目录)</li>
<li>执行命令 <code>make</code> 进行</li>
</ul>
<h3 id="构建的两种方式"><a href="#构建的两种方式" class="headerlink" title="构建的两种方式"></a>构建的两种方式</h3><ul>
<li>内部构件，在当前文件夹下，执行 make 命令。<strong>杂乱无章</strong></li>
<li>外部构建 <strong>推荐</strong>，创建 build 文件夹，编译上级目录的 CMakeLists.txt 文件</li>
</ul>
<h3 id="CMake-实战"><a href="#CMake-实战" class="headerlink" title="CMake 实战"></a>CMake 实战</h3><p><img src="/.com//image-20220315155252463.jpg" alt="image-20220315155252463"></p>
<center>两个工程的结构</center>

<h4 id="构建-proj1"><a href="#构建-proj1" class="headerlink" title="构建 proj1"></a>构建 proj1</h4><p><code>g++ helloworld.cpp -o helloworld</code></p>
<ol>
<li>编写 CMakeLists.txt</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工程文件名</span></span><br><span class="line"><span class="keyword">project</span>(HELLOWORLD)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 g++ helloworld.cpp -o helloworld_cmake</span></span><br><span class="line"><span class="keyword">add_executable</span>(helloWorld_cmake helloworld.cpp)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>内部构建</strong>在 bash 中</p>
<ol>
<li><code>cmake .</code> 构建 <code>Makefile</code></li>
<li><code>make</code> make Makefile</li>
</ol>
</li>
<li><p><strong>外部构建</strong>在 bash 中</p>
<ol>
<li><code>mkdir build</code></li>
<li><code>cd build</code></li>
<li><code>cmake ..</code> 在 build 文件夹构建上一级目录的 <code>CMakeLists.txt</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 build 文件夹中构建</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 生成 Makefile</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># make Makefile make 是编译的过程</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/.com//image-20220315161112258.jpg" alt="image-20220315161112258"></p>
<center>外部构建</center>

<h4 id="构建-proj2"><a href="#构建-proj2" class="headerlink" title="构建 proj2"></a>构建 proj2</h4><p><code>g++ main.cpp ./src/swap.cpp -I ./include -o main</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(SWAP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件搜索路径 -I 选项</span></span><br><span class="line"><span class="keyword">include_directories</span>(./<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于 g++ main.cpp ./src/swap.cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp ./src/swap.cpp)</span><br></pre></td></tr></table></figure>



<h1 id="实战-proj3"><a href="#实战-proj3" class="headerlink" title="实战 proj3"></a>实战 proj3</h1><p><img src="/.com//image-20220315164644371.jpg" alt="image-20220315164644371"></p>
<p><code>g++ main.cpp src/Gun.cpp src/Solider.cpp -I ./include/ -o main</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(GO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -O2 -Wall -std=c++11&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp src/Gun.cpp src/Solider.cpp)</span><br></pre></td></tr></table></figure>



<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// ***** 可执行文件路径</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main_cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// ***** 指向 Task.json 中的 Build</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Tasks-json"><a href="#Tasks-json" class="headerlink" title="Tasks.json"></a>Tasks.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// cd ./build</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// cmake ..</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;..&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">                </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// make</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="comment">// 调用 cmake 和 make 命令</span></span><br><span class="line">                <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;make&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>常用 cmake 指令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定最小版本号</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(GO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件</span></span><br><span class="line"><span class="keyword">include</span>(./lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译参数</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O2 -g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译模式 Debug | Release</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp [其他文件])</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>cmake</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库原理一</title>
    <url>/2022/04/25/database1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>理解数据库系统结构</li>
<li>掌握数据库基本概念和理论知识</li>
<li>了解数据库技术发展的趋势</li>
<li>掌握关系代数、关系演算、SQL 语言</li>
</ul>
<h1 id="数据库发展史"><a href="#数据库发展史" class="headerlink" title="数据库发展史"></a>数据库发展史</h1><ul>
<li>数据管理技术史</li>
<li>数据库技术史</li>
<li>数据库应用系统体系结构的发展</li>
</ul>
<h2 id="数据管理技术发展史"><a href="#数据管理技术发展史" class="headerlink" title="数据管理技术发展史"></a>数据管理技术发展史</h2><h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><ul>
<li>数据的<strong>逻辑结构和物理结构相同</strong>，数据的组织方式必须由程序员自行设计和安排</li>
<li>数据不保存在机器中</li>
<li>没有专门的软件对数据进行管理</li>
<li>只有程序的概念，<strong>没有文件的概念</strong>。<strong>数据面向应用</strong></li>
</ul>
<h4 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h4><ul>
<li><strong>逻辑结构和物理结构有一定的区别</strong>，通过文件系统来实现两者的转化</li>
<li>数据可以长期保存在外存上</li>
<li>文件的逻辑结构多样化</li>
<li><strong>数据面向应用</strong>，对数据的访问以记录为单位。</li>
<li>数据可以被不用的程序重复利用</li>
</ul>
<p>缺点：</p>
<ul>
<li>数据冗余</li>
<li>数据不一致</li>
<li>数据联系弱</li>
</ul>
<h4 id="倒排文件系统"><a href="#倒排文件系统" class="headerlink" title="倒排文件系统"></a>倒排文件系统</h4><p>提高系统性能，对索引文件进行推广。</p>
<p><strong>优点</strong>：使用户不仅能用关键码，而且也能按字段的任何组合。容易地检索记录。很适合于信息检索系统。</p>
<p><strong>缺点</strong>：1. 索引占用更多存储空间 2. 数据更新比较困难</p>
<h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><p><strong>特点</strong></p>
<ul>
<li>面向全组织的复杂的数据结构，实现数据的结构化</li>
<li>有较高的数据独立性</li>
<li>系统提供了四个方面的控制功能<ul>
<li>数据库恢复</li>
<li>数据库并发控制</li>
<li>数据完整性</li>
<li>数据安全性</li>
</ul>
</li>
<li>数据的操作可以以<strong>数据项</strong>为单位，增加了系统的灵活性</li>
<li>用户可以采用程序方式或者交互方式操作数据库</li>
</ul>
<p><strong>数据库的三级模式结构</strong></p>
<p><img src="/.com//image-20220424214741945.png" alt="image-20220424214741945"></p>
<ul>
<li><p>模式 – 概念模式 – 全局模式</p>
<p>数据库中全部数据的整体逻辑结构的描述。<strong>描述了全局数据视图</strong></p>
<ul>
<li>与数据的物理存储结构无关</li>
<li>与具体用户应用程序、开发工具以及高级程序设计语言无关</li>
</ul>
</li>
<li><p>外模式</p>
<p>用户的数据视图，通常是模式的子集。</p>
<ul>
<li>保证了数据库的安全性提供了有力的措施</li>
</ul>
</li>
<li><p>内模式 – 存储模式</p>
<p>数据库的物理结构。定义了所有内部记录类型。实现了数据控制方面的细节。</p>
</li>
<li><p>模式 &#x2F; 内模式映像</p>
<p>用于定义模式和内模式之间的对应性。</p>
<ul>
<li>需要说明记录和内部记录之间的对应性</li>
<li>一般放在内模式中描述</li>
</ul>
</li>
<li><p>外模式 &#x2F; 模式映像</p>
<p>一般放在外模式中实现</p>
</li>
</ul>
<p><strong>物理独立性</strong></p>
<p>内模式修改，只需要对模式 &#x2F; 内模式映像，概念模式可以尽可能保持不变。</p>
<p><strong>逻辑独立性</strong></p>
<p>逻辑模式修改，只需要对外模式 &#x2F; 模式映像修改，就可以使外模式和应用程序尽可能保持不变。</p>
<h2 id="数据库发展史-1"><a href="#数据库发展史-1" class="headerlink" title="数据库发展史"></a>数据库发展史</h2><ol>
<li>IMS 系统 – <strong>层次模型</strong></li>
<li>DBTG 报告 – <strong>网状模型</strong>（Charls Batchman 网状数据库之父）</li>
<li>E.F.Codd 文章 – <strong>关系模型</strong></li>
</ol>
<h1 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h1><ul>
<li>数据描述</li>
<li>数据模型</li>
<li>逻辑模型</li>
<li>数据库体系结构</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>数据模型用于表示实体类型及实体之间联系的模型。通常使用概念数据模型和逻辑数据模型。</p>
<p>概念设计描述数据库的概念结构 – ER 模型</p>
<p>逻辑设计描述计算机的数据形式 – 逻辑模型（关系模型）</p>
<p><strong>概念数据模型</strong> – ER 模型</p>
<p><strong>逻辑数据模型</strong> – 结构数据模型</p>
<h3 id="ER-模型"><a href="#ER-模型" class="headerlink" title="ER 模型"></a>ER 模型</h3><p>独立于计算机系统的模型，用于建立信息世界的数据模型。</p>
<h3 id="逻辑数据模型"><a href="#逻辑数据模型" class="headerlink" title="逻辑数据模型"></a>逻辑数据模型</h3><p>面向数据库逻辑结构的模型</p>
<ul>
<li>数据结构：实体类型和实体联系的表达和实现</li>
<li>数据操作：数据库的 CRUD</li>
<li>数据完整性约束：<ul>
<li>实体完整型</li>
<li>参照完整型</li>
</ul>
</li>
</ul>
<h5 id="层次结构（指针导航）"><a href="#层次结构（指针导航）" class="headerlink" title="层次结构（指针导航）"></a>层次结构（指针导航）</h5><p>用<strong>有向树</strong>型结构表示实体类型及实体之间联系的模型称为层次模型。父子表示 1： N 的联系。</p>
<p>优点：易于实现、查询效率高</p>
<p>缺点：M：N 联系比较难实现、编写应用程序复杂</p>
<h5 id="网状结构（指针导航）"><a href="#网状结构（指针导航）" class="headerlink" title="网状结构（指针导航）"></a>网状结构（指针导航）</h5><p>有向图</p>
<p>优点：容易实现 M: N 联系、查询效率高</p>
<p>缺点：需要掌握数据库的逻辑结构才能编写对应的代码</p>
<h5 id="关系模型（关键码导航）"><a href="#关系模型（关键码导航）" class="headerlink" title="关系模型（关键码导航）"></a>关系模型（关键码导航）</h5><p>二维表格</p>
<p>使用外键表示实体之间的联系</p>
<p>优点：表格简单、用户易懂、编写程序不涉及存储结构和访问技术的问题</p>
<h5 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h5><p>能表达递归和嵌套的数据结构</p>
<h1 id="ER-模型-1"><a href="#ER-模型-1" class="headerlink" title="ER 模型"></a>ER 模型</h1><ul>
<li>实体、属性的基本概念</li>
<li>属性的分类</li>
<li>实体和属性的设计</li>
</ul>
<h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>客观存在可以互相分开的事物</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>实体的某一个特征。<strong>关键属性加下划线</strong></p>
<ul>
<li>基本属性：不可再分割的属性</li>
<li>复合属性：可以分割的属性</li>
</ul>
<p><img src="/.com//image-20220424223002648.png" alt="image-20220424223002648"></p>
<ul>
<li>单值属性：只能取一个值，例如：年龄</li>
<li>多值属性：可以取很多值，例如：学位（可以既是学士，又是硕士）。使用<strong>双椭圆</strong>表示</li>
</ul>
<p><img src="/.com//image-20220424223226688.png" alt="image-20220424223226688"></p>
<p><strong>表示多值属性的两种方法</strong></p>
<p>问题：简单的表示多值属性，将会产生大量的数据冗余，造成数据库的潜在数据异常、数据不一致性和完整性的缺陷。</p>
<ol>
<li><p>增加新的属性</p>
<p><img src="/.com//image-20220424223601653.png" alt="image-20220424223601653"></p>
</li>
<li><p>增加一个新的实体 1: M 的联系，<strong>弱实体</strong></p>
<p><img src="/.com//image-20220424223621280.png" alt="image-20220424223621280"></p>
</li>
</ol>
<ul>
<li><p>导出属性：可以通过其他的属性或者实体导出</p>
<p><img src="/.com//image-20220424223745292.png" alt="image-20220424223745292"></p>
</li>
</ul>
<h2 id="联系的设计和实现"><a href="#联系的设计和实现" class="headerlink" title="联系的设计和实现"></a>联系的设计和实现</h2><h3 id="一元联系"><a href="#一元联系" class="headerlink" title="一元联系"></a>一元联系</h3><ol>
<li>1: N 只需要一个关系模型</li>
<li>1: 1 只需要一个关系模型</li>
<li>M: N 需要两个，增加一个表示关系的表（表示零件和零件之间的关系）</li>
</ol>
<h3 id="二元联系"><a href="#二元联系" class="headerlink" title="二元联系"></a>二元联系</h3><ol>
<li>1: 1 需要两个</li>
<li>1: N 需要两个</li>
<li>M: N 需要三个，一个用于表示联系</li>
</ol>
<h3 id="三元联系"><a href="#三元联系" class="headerlink" title="三元联系"></a>三元联系</h3><ol>
<li>1:1:1 三张表 每张表加入两个外键</li>
<li>1:1:N 三张表，在 N 端加入两个外键</li>
<li>1:M:N 三张表，在 N 端和 M 端加入一个外键</li>
<li>M:N:P 四张表</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>弱实体</strong>：实体的主键部分或者全部从父实体中获得</p>
<p><strong>子类和超类</strong>：转换成关系模式的主键相同</p>
<h1 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h1><ul>
<li>概念：关系模型、关键码、关系的定义和性质、三类完整型规则</li>
<li>关系代数：基本操作、组合操作、扩充操作</li>
<li>关系演算：元组演算、域演算、关系演算的安全性和等价性</li>
<li>查询优化</li>
</ul>
<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="关系模型-E-F-Codd"><a href="#关系模型-E-F-Codd" class="headerlink" title="关系模型 E.F.Codd"></a>关系模型 E.F.Codd</h3><p>二维表格表示实体集、外键表示实体之间的联系。</p>
<p>关系：对应的二维表格，元组的集合、属性值域笛卡尔积的子集</p>
<p>元组：表中的<strong>行</strong></p>
<p>属性：表中的<strong>列</strong></p>
<p>域：属性的取值范围</p>
<h3 id="关键码"><a href="#关键码" class="headerlink" title="关键码"></a>关键码</h3><p>超键：可以推导出完成的属性集合</p>
<p>候选键：唯一标识元组的最小属性集合，极小的概念</p>
<p>主键：候选键的一个</p>
<p>外键：包含另一个关系的主键</p>
<h3 id="三类完整性"><a href="#三类完整性" class="headerlink" title="三类完整性"></a>三类完整性</h3><ul>
<li><p>实体完整性规则</p>
<p>元组的主键值不能为空</p>
</li>
<li><p>参照完整性规则</p>
<p>元组的外键值只能是空值或者对应参照关系中的某一个主键的值</p>
</li>
<li><p>用户定义的完整性规则</p>
<p>由应用环境决定</p>
</li>
</ul>
<h2 id="关系数据库语言"><a href="#关系数据库语言" class="headerlink" title="关系数据库语言"></a>关系数据库语言</h2><ul>
<li>关系代数语言：集合操作为基础</li>
<li>关系演算语言：谓词演算为基础<ul>
<li>元组关系演算</li>
<li>域关系演算</li>
</ul>
</li>
<li>SQL：基于关系代数和关系演算语言双重特点的语言</li>
</ul>
<h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><ul>
<li><p>并</p>
</li>
<li><p>差</p>
</li>
<li><p>笛卡尔积：两个关系全部元组的连接</p>
<p>R 是 n 行 r 列的关系，S 是 m 行 s 列的关系。</p>
<p>$R \times S$ 是 nm 行 r + s 列的关系</p>
</li>
<li><p>选择</p>
</li>
<li><p>投影</p>
</li>
</ul>
<h4 id="组合运算"><a href="#组合运算" class="headerlink" title="组合运算"></a>组合运算</h4><ul>
<li><p>交：差</p>
<p><img src="/.com//image-20220425134214591.png" alt="image-20220425134214591"></p>
</li>
<li><p>联接：笛卡尔积、选择、投影</p>
<ul>
<li>θ 联接：一个逻辑运算表达式，当为 &#x3D;&#x3D; 的时候，称为等值连接</li>
<li>F 联接：多个 θ 的逻辑运算表达式的联接</li>
<li>自然联接：公共属性相等的联接</li>
</ul>
</li>
<li><p>除：笛卡尔积、投影、差</p>
<p><img src="/.com//image-20220425135015806.png" alt="image-20220425135015806"></p>
</li>
</ul>
<p><strong>常见题目</strong></p>
<ol>
<li><p>或：直接使用 或</p>
<p><img src="/.com//image-20220425140325751.png" alt="image-20220425140325751"></p>
</li>
<li><p>同时使用：笛卡尔积</p>
<p><img src="/.com//image-20220425140307218.png" alt="image-20220425140307218"></p>
</li>
<li><p>不使用：差</p>
</li>
<li><p>全部：除</p>
<p><img src="/.com//image-20220425140438969.png" alt="image-20220425140438969"></p>
</li>
</ol>
<h4 id="扩充关系代数"><a href="#扩充关系代数" class="headerlink" title="扩充关系代数"></a>扩充关系代数</h4><ul>
<li><p>外联接：缺少部分直接使用 null 表示</p>
<p><img src="/.com//image-20220425141340310.png" alt="image-20220425141340310"></p>
</li>
<li><p>外部并：两个关系直接并在一起，然后缺少的属性直接为空</p>
</li>
<li><p>半联接：<img src="/.com//image-20220425141442074.png" alt="image-20220425141442074"></p>
</li>
</ul>
<h3 id="关系演算"><a href="#关系演算" class="headerlink" title="关系演算"></a>关系演算</h3><p>以数理逻辑中的<strong>谓词演算</strong>为<strong>基础</strong>，用<strong>公式</strong>表示关系演算的条件</p>
<p>按照变量分为：</p>
<ul>
<li>元组关系演算</li>
<li>域关系演算</li>
</ul>
<h4 id="元组关系演算"><a href="#元组关系演算" class="headerlink" title="元组关系演算"></a>元组关系演算</h4><p><strong>原子公式</strong></p>
<p><img src="/.com//image-20220425141927129.png" alt="image-20220425141927129"></p>
<p><strong>约束变量和只有变量</strong></p>
<p><img src="/.com//image-20220425142010261.png" alt="image-20220425142010261"></p>
<p><strong>常见题目</strong></p>
<ol>
<li><p>使用两种：类似与笛卡尔积做法</p>
<p><img src="/.com//image-20220425145124165.png" alt="image-20220425145124165"></p>
</li>
<li><p>都使用：任意(蕴含(存在))</p>
<p><img src="/.com//image-20220425145144214.png" alt="image-20220425145144214"></p>
</li>
<li><p>不使用：任意(蕴含)</p>
<p><img src="/.com//image-20220425145208501.png" alt="image-20220425145208501"></p>
</li>
</ol>
<h3 id="域关系演算"><a href="#域关系演算" class="headerlink" title="域关系演算"></a>域关系演算</h3><p>将元组拆成元素</p>
<h3 id="安全性和等价性"><a href="#安全性和等价性" class="headerlink" title="安全性和等价性"></a>安全性和等价性</h3><p><img src="/.com//image-20220425152428192.png" alt="image-20220425152428192"></p>
<p>安全运算：不产生<strong>无限关系</strong>和<strong>无穷验证</strong>的运算称为安全运算。通常采用安全约束集 DOM</p>
<h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><ul>
<li>尽早执行选择操作</li>
<li>把笛卡尔积和其后的选择操作合并成 F 联接</li>
<li>同时运算选择和投影，避免多次扫描文件</li>
<li>适当预处理</li>
</ul>
<p><strong>步骤</strong></p>
<ol>
<li>把<strong>选择</strong>全部<strong>拆开</strong></li>
<li>把<strong>选择</strong>尽可能<strong>移动</strong>到<strong>树叶</strong>端</li>
<li>把<strong>投影</strong>尽可能<strong>移动</strong>到<strong>树叶</strong>端</li>
<li>把选择和投影<strong>合并</strong>为单个选择和投影</li>
<li>分组<ol>
<li>将二元运算和一元祖先节点和下面的一元运算节点组合。</li>
<li>如果二元运算是笛卡尔积。如果选择不能组成<strong>等值连接</strong>的时候，不能并未同一组</li>
</ol>
</li>
</ol>
<h1 id="结构化查询语言-SQL"><a href="#结构化查询语言-SQL" class="headerlink" title="结构化查询语言 SQL"></a>结构化查询语言 SQL</h1><ul>
<li>SQL 数据库的体系结构，SQL 的组成</li>
<li>SQL 的数据定义：数据库、基本表、索引的创建和撤销</li>
<li>SQL 的数据 CRUD</li>
<li>视图的创建和撤销，对视图更新操作的限制</li>
<li>嵌入式 SQL：预处理方法、使用规定、使用技术、动态 SQL 语句</li>
</ul>
<h2 id="SQL-数据库体系结构"><a href="#SQL-数据库体系结构" class="headerlink" title="SQL 数据库体系结构"></a>SQL 数据库体系结构</h2><p>外模式对应视图、模式对应基本表、内模式对应存储文件</p>
<p><strong>特点</strong></p>
<ul>
<li>一体化</li>
<li>两种使用方式，统一的语法结构</li>
<li>高度非过程化</li>
<li>语言简洁</li>
</ul>
<p><strong>组成</strong></p>
<ul>
<li>数据定义</li>
<li>数据操控</li>
<li>数据控制</li>
<li>嵌入式 SQL</li>
</ul>
<h2 id="SQL-数据定义"><a href="#SQL-数据定义" class="headerlink" title="SQL 数据定义"></a>SQL 数据定义</h2><p><strong>模式（命名空间）和数据库的创建和撤销</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span><span class="keyword">USER</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT]</span><br><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure>

<p><strong>基本表的创建、修改和撤销</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> schema.name (</span><br><span class="line">	列名 类型,</span><br><span class="line">    完整性约束,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(SNO,PNO,JNO),</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY(SNO) <span class="keyword">REFERENCES</span> S(SNO),</span><br><span class="line">	<span class="keyword">CHECK</span>(QTY <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">10000</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 增加属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> name <span class="keyword">ADD</span> attribute type</span><br><span class="line"></span><br><span class="line"># 删除属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 基本表名 <span class="keyword">DROP</span> 属性名 [CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure>

<ul>
<li>主键子句 PRIMARY KEY()</li>
<li>外键子句 FOREIGN KEY()</li>
<li>检查子句 CHECK</li>
</ul>
<h2 id="SQL-的-CRUD"><a href="#SQL-的-CRUD" class="headerlink" title="SQL 的 CRUD"></a>SQL 的 CRUD</h2><p><img src="/.com//image-20220425155637159.png" alt="image-20220425155637159"></p>
<p>SELECT A FROM R WHERE F</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] A</span><br><span class="line"><span class="keyword">FROM</span> R</span><br><span class="line">[<span class="keyword">WHERE</span> F]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> a [<span class="keyword">HAVING</span> exp]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">array</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]；</span><br></pre></td></tr></table></figure>

<p><strong>执行过程</strong></p>
<ol>
<li>FROM 读取基本表，执行笛卡尔积运算</li>
<li>WHERE</li>
<li>GROUP HAVING</li>
<li>SELECT</li>
<li>ORDER</li>
</ol>
<p><strong>使用 EXIST 和 NOT EXIST 谓词表示全称量词和逻辑蕴含⭐</strong></p>
<ul>
<li><p>全称量词</p>
<p><img src="/.com//image-20220425170939340.png" alt="image-20220425170939340"></p>
<p>转化为不存在课程没有选修的学生</p>
<p><img src="/.com//image-20220425171004835.png" alt="image-20220425171004835"></p>
</li>
<li><p>逻辑蕴含</p>
<p><img src="/.com//image-20220425171104747.png" alt="image-20220425171104747"></p>
<p>与上面相类似</p>
</li>
</ul>
<p><strong>数据更新操作</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t (列名)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">SELECT</span> 查询语句;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">update</span></span><br><span class="line"><span class="keyword">UPDATE</span> t</span><br><span class="line"><span class="keyword">SET</span> t1 <span class="operator">=</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>

<h2 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h2><p>对于视图的更新 INSERT, DELETE, UPDATE</p>
<ol>
<li>多个表<strong>联接</strong>导出的话，不允许更新</li>
<li>使用了<strong>分组和聚合</strong>导出，不允许更新</li>
<li>从单个基本表导出，使用选择、投影导出，并且包含主键或某一个候选键，那么称为<strong>行列子集视图</strong>，并且可以被执行更新操作。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> name (列表名)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> 查询语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"></span><br><span class="line"># 视图的更新操作</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> name </span><br><span class="line"><span class="keyword">VALUES</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> name</span><br><span class="line"><span class="keyword">SET</span> t1<span class="operator">=</span>t2</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>

<h2 id="嵌入式-SQL"><a href="#嵌入式-SQL" class="headerlink" title="嵌入式 SQL"></a>嵌入式 SQL</h2><ul>
<li>在终端交互方式，称为交互式 SQL</li>
<li>嵌入高级语言的程序中使用，称为嵌入式。高级语言称为宿主语言</li>
</ul>
<p><strong>高级语言和 SQL 的区别</strong></p>
<p>SQL 是基于关系数据模型的语言；高级语言是关于基本数据类型的语言。</p>
<p><strong>如何实现嵌入式 SQL</strong></p>
<ol>
<li>扩充宿主语言的编译程序，能够直接处理 SQL 语句</li>
<li>采用预处理的方式（多数系统采用）</li>
</ol>
<p><strong>预处理的实现</strong></p>
<ol>
<li>源程序扫描之后，识别出 SQL 语句。并处理成宿主语言的函数调用形式。</li>
<li>然后编译</li>
</ol>
<p>通常是 DBMS 的制造商提供一个 SQL 函数定义库，供编译的时候使用。</p>
<p><img src="/.com//image-20220425165325731.png" alt="image-20220425165325731"></p>
<p><strong>嵌入式 SQL 需要解决的问题</strong></p>
<ol>
<li><p>需要区分 SQL 语言和宿主语言</p>
</li>
<li><p>数据库工作单元和主程序工作单元之间的通信</p>
<ol>
<li><h5 id="允许嵌入式-SQL-语句引用宿主语言的程序变量"><a href="#允许嵌入式-SQL-语句引用宿主语言的程序变量" class="headerlink" title="允许嵌入式 SQL 语句引用宿主语言的程序变量"></a>允许嵌入式 SQL 语句引用宿主语言的程序变量</h5></li>
<li><p><strong>主语言不能引用数据库中的字段变量</strong></p>
</li>
</ol>
</li>
<li><p>SQLSTATUS 是一个特殊的共享变量，用于解释 SQL 语句的执行情况。0 表示成功。</p>
</li>
<li><p>引入游标机制，将集合操作转换为单元组处理。用于协调不同数据处理方式</p>
<ol>
<li>SQL 面向集合，一条 SQL 可以产生或处理多条记录</li>
<li>宿主语言面向记录</li>
</ol>
<p>与游标相关的语句</p>
<ol>
<li>定义游标 <code>EXEC SQL DECLEAR &lt;NAME&gt; CURSOR FOR &lt;SELECT&gt; END_EXEC</code></li>
<li>使用 OPEM 打开游标 <code>EXEC SQL OPEN &lt;NAME&gt; END_EXEC</code></li>
<li>推进游标 <code>EXEC SQL FETCH FROM &lt;游标名&gt; INTO &lt;变量表&gt; END_EXEC</code></li>
<li>关闭游标 <code>EXEC SQL CLOSE &lt;NAME&gt; END_EXEC</code></li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>python 编码规范</title>
    <url>/2022/04/11/encode-python/</url>
    <content><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>无特殊情况，文件一律使用 UTF-8 编码</li>
<li>无特殊情况，文件头部必须加入 <code># -*- coding: utf-8 -*-</code></li>
</ul>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul>
<li>统一使用 4 个空格进行缩进</li>
</ul>
<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><ul>
<li>自然语言，使用双引号。例如 <code>&quot;hello world&quot;</code></li>
<li>机器标识，使用单引号。</li>
<li>正则表达式，使用双引号。</li>
<li>文档字符串，使用三引号。</li>
</ul>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li><strong>模块级函数</strong>和<strong>类定义</strong>之间空两行</li>
<li><strong>类成员函数</strong>之间空一行</li>
<li><strong>函数中</strong>可以使用空行分隔出逻辑相关的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h3><ul>
<li>import 应该分行书写</li>
<li>import 应该使用 absolute import</li>
<li>import 放在文件头部，置于模块说明及 <code>docstring</code> 之后，与全局变量之前<ul>
<li><code>docstring</code></li>
<li>import</li>
<li>全局变量</li>
</ul>
</li>
</ul>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul>
<li>二元运算符两边</li>
<li>函数的参数列表 <code>, </code> 之后要有空格</li>
<li>函数的参数列表中，默认值等号两边不要加空格</li>
<li>括号不需要加空格，字典类似</li>
<li>不要添加多余空格，用于对齐 <code>=</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a, b=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">foo(&#123;a: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><blockquote>
<p>python 支持括号内的换行，第二行缩进到括号的起始处，<strong>参数对齐</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar = foo(a1, a2, </span><br><span class="line">a3, a4)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用反斜杠\换行，二元运算符+ .等应出现在行末；长字符串也可以用此法换行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.query(MyTable).\</span><br><span class="line">        filter_by(<span class="built_in">id</span>=<span class="number">1</span>).\</span><br><span class="line">        one()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>if &#x2F; for &#x2F; while 独占一行</p>
</blockquote>
<h3 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h3><p>作为文档的 Docstring 一般出现在模块的头部、函数和类的头部，这样在 python 中可以通过对象的 <code>__doc__</code> 对象获取文档。编辑器和 IDE 也可以根据 Docstring 给出自动提示。</p>
<ul>
<li>所有的公共模块、函数、类、方法，都应该写 <code>docstring</code>。私有方法不一定需要，def 后提供一个块注释来说明</li>
<li>docstirng 的结束，应该独占一行，除非只有一行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Return a foobar</span></span><br><span class="line"><span class="string">hello python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Oneline docstring&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Google 风格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Example docstrings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module demonstrates documentation as specified by the `Google Python</span></span><br><span class="line"><span class="string">Style Guide`_. Docstrings may extend over multiple lines. Sections are created</span></span><br><span class="line"><span class="string">with a section header and a colon followed by a block of indented text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    Examples can be given using either the ``Example`` or ``Examples``</span></span><br><span class="line"><span class="string">    sections. Sections support any reStructuredText formatting, including</span></span><br><span class="line"><span class="string">    literal blocks::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $ python example_google.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Section breaks are created by resuming unindented text. Section breaks</span></span><br><span class="line"><span class="string">are also implicitly created anytime a new section starts.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块尽量使用小写命名，首字母保持小写，尽量不要使用下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的模块名</span></span><br><span class="line"><span class="keyword">import</span> decoder</span><br><span class="line"><span class="keyword">import</span> html_parser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的模块名</span></span><br><span class="line"><span class="keyword">import</span> Decoder</span><br></pre></td></tr></table></figure>

<h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>类名使用<strong>驼峰命名</strong>风格，首字母大写，私有类可用下划线开头。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Farm</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_PrivateFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>将相关的类和顶级函数放在同一个 module 里. 不像 Java , 没必要限制一个类一个 module.</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数名一律小写，有多个单词，使用下划线隔开。私有函数在函数前加一个下划线。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_with_env</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_private_func</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><p>尽量使用小写，如有多个单词，使用下划线隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    school_name = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>使用全部大写 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_CLIENT = <span class="number">100</span></span><br><span class="line">MAX_CONNECTION = <span class="number">1000</span></span><br><span class="line">CONNECTION_TIMEOUT = <span class="number">600</span></span><br><span class="line"></span><br><span class="line">MAX_OVERFLOW = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Class FooBar:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo_bar</span>(<span class="params">self, print_</span>):</span><br><span class="line">        <span class="built_in">print</span>(print_)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="add-picture-use-relative-path"><a href="#add-picture-use-relative-path" class="headerlink" title="add picture use relative path"></a>add picture use relative path</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./<span class="variable">$&#123;filename&#125;</span>/name</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>前端基础学习笔记</title>
    <url>/2022/05/14/html-css-vue/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="什么是-Vue"><a href="#什么是-Vue" class="headerlink" title="什么是 Vue"></a>什么是 Vue</h2><ul>
<li><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 view） 是一套构建用户界面的渐进式框架。</p>
</li>
<li><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p>
</li>
<li><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><a class="link" href="https://unpkg.com/vue/dist/vue.js">https://unpkg.com/vue/dist/vue.js<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link" href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<h2 id="第一个-vue-程序"><a href="#第一个-vue-程序" class="headerlink" title="第一个 vue 程序"></a>第一个 vue 程序</h2><h3 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el 挂载点"></a>el 挂载点</h3><ul>
<li><p>Vue 实例的作用范围是什么？</p>
<p>在 el 命中的内部都可以使用</p>
</li>
<li><p>是否可以使用其他的选择器？</p>
<p>可以使用</p>
<ul>
<li>id 选择器 id&#x3D;””，建议挂载在 div 下面 <code>#app</code></li>
<li>class 选择器 <code>.app</code></li>
<li>标签选择器</li>
</ul>
</li>
<li><p>作用域</p>
<ul>
<li>所有的双标签，除去 body，html</li>
<li>不持支单标签</li>
</ul>
</li>
</ul>
<h3 id="data-数据对象"><a href="#data-数据对象" class="headerlink" title="data 数据对象"></a>data 数据对象</h3><ul>
<li><p>基础类型 string</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">message:&quot;hello!&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组 array</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">campus:[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure>

<p>可以使用数组索引访问</p>
</li>
<li><p>对象 object</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">school : &#123;</span><br><span class="line">	name:&quot;name&quot;,</span><br><span class="line">	mobile:&quot;xxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>支持全部渲染，也可以使用 <code>.</code> 访问</p>
</li>
</ul>
<h3 id="methods-属性"><a href="#methods-属性" class="headerlink" title="methods 属性"></a>methods 属性</h3><p>用于添加方法</p>
<h2 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h2><p>通过 vue 实现常见的网页效果</p>
<ol>
<li>内容绑定、事件绑定</li>
<li>显示切换、属性绑定</li>
<li>列表循环，表单元素绑定</li>
</ol>
<h3 id="内容绑定、事件绑定"><a href="#内容绑定、事件绑定" class="headerlink" title="内容绑定、事件绑定"></a>内容绑定、事件绑定</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>内容绑定</p>
<p>用于设置标签的内容</p>
<ol>
<li>标签内部使用 v-text 语法，<strong>只能全部替换</strong></li>
<li>使用插值表达式，<strong>支持部分替换</strong><ol>
<li>支持内部字符串拼接</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; message + &quot; world&quot; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20220110165251780.png" alt="image-20220110165251780"></p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>内容绑定</p>
<p>与 v-text 语法类似，但是设置的字符串是 html 标签的时候，<strong>v-html 会被解析出来</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20220110165708426.png" alt="image-20220110165708426"></p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>事件绑定</p>
<p><img src="/.com//image-20220110170223158.png" alt="image-20220110170223158"></p>
<ul>
<li>传递兹定理参数</li>
<li>事件修饰符</li>
</ul>
<p>容器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    单击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    双击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> @<span class="attr">dblclick</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    鼠标移入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> @<span class="attr">mouseenter</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue 实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var app = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            doit:function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                alert(&quot;go&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="comment">&lt;!--弹窗--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>更改页面显示：</strong></p>
<p>在事件中修改数据。</p>
<p>计数器案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span><br><span class="line">        -</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        +</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">msg</span> &lt; <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> ++;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;too large&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sub</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">msg</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> --;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;too small&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="显示切换、属性绑定"><a href="#显示切换、属性绑定" class="headerlink" title="显示切换、属性绑定"></a>显示切换、属性绑定</h3><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p><strong>用于操作显示状态</strong></p>
<p>根据表达式的真假，切换元素的显示和隐藏。</p>
<p>可以直接在 v-show&#x3D;”” 中写表达式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/1.jpeg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/2.jpeg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>与 v-show 类似。</p>
<p>频繁切换的时候，使用 v-show，否则使用 v-if</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>操作元素属性</p>
<h3 id="列表循环，表单元素绑定"><a href="#列表循环，表单元素绑定" class="headerlink" title="列表循环，表单元素绑定"></a>列表循环，表单元素绑定</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>用于列表循环遍历。</p>
<p><code>(item, index) in DS</code></p>
<p>可以动态修改</p>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>data 同步获得表单信息</p>
<p>实例，记事本：</p>
<ul>
<li>v-for</li>
<li>v-on</li>
<li>v-model</li>
<li>v-text</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;note&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;inputValue&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;noteArr.length&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">title</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in noteArr&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123; index + 1 &#125;&#125;. &#123;&#123; item &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; noteArr.length &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delAll()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: crimson&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> note = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#note&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">noteArr</span>: [<span class="string">&quot;name01&quot;</span>, <span class="string">&quot;name02&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">inputValue</span>: <span class="string">&quot;input string&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">del</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">delAll</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span> = [];</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">inputValue</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><p>vue 如何结合网络数据开发应用</p>
<p>axios 网络请求库</p>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>功能强大的网络请求库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://autumnfish.cn/api/joke</span><br></pre></td></tr></table></figure>



<h3 id="简单-axios-vue-程序"><a href="#简单-axios-vue-程序" class="headerlink" title="简单 axios + vue 程序"></a>简单 axios + vue 程序</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getJoke: function () &#123;</span><br><span class="line">        var that = this;</span><br><span class="line">		// 函数中 this 已经改变，需要使用 that 将 this 存下来</span><br><span class="line">        axios.get(&quot;https://autumnfish.cn/api/joke&quot;).then(</span><br><span class="line">            function (response) &#123;</span><br><span class="line">                console.log(response.data)</span><br><span class="line">                that.msg = response.data;</span><br><span class="line">            &#125;,</span><br><span class="line">            function (error) &#123;</span><br><span class="line">                this.msg = &quot;error&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS-的导入方式"><a href="#CSS-的导入方式" class="headerlink" title="CSS 的导入方式"></a>CSS 的导入方式</h2><ol>
<li><p>在 html 中直接编写 style（内部样式）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    声明<span class="number">1</span>:XXX;</span><br><span class="line">    声明<span class="number">2</span>:XXX;</span><br><span class="line">    声明<span class="number">3</span>:XXX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>放在 CSS 文件夹中，引入 CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;CSS/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>行内属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: cornflowerblue&quot;</span>&gt;</span>css<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>优先级：就近原则</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h3><ol>
<li><p>标签选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blanchedalmond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>id 选择器，id 全局唯一</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>不遵循就近原则，id &gt; class &gt; 标签</strong></p>
<h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2. 层次选择器"></a>2. 层次选择器</h3><ol>
<li><p>后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>兄弟选择器</p>
<p><strong>选择下面一个兄弟</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.active</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用选择器</p>
<p><strong>当前标签下面的全部兄弟标签</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.active</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-结构伪类选择器"><a href="#3-结构伪类选择器" class="headerlink" title="3. 结构伪类选择器"></a>3. 结构伪类选择器</h3><ul>
<li>选中 ul 的第一个子元素</li>
<li>选中 ul 的最后一个子元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-属性选择器"><a href="#4-属性选择器" class="headerlink" title="4. 属性选择器"></a>4. 属性选择器</h3><p><strong>“value 是完整单词”</strong> 类型的比较符号: <strong>~&#x3D;</strong>, <strong>|&#x3D;</strong></p>
<p><strong>“拼接字符串</strong>“ 类型的比较符号: ***&#x3D;**, <strong>^&#x3D;</strong>, <strong>$&#x3D;</strong></p>
<p><strong>1. attribute 属性中包含 value:</strong>　</p>
<p>[attribute~&#x3D;value] 属性中包含独立的单词为 value，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title~=flower]</span>  --&gt;  &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;/<span class="selector-tag">i</span>/eg_tulip<span class="selector-class">.jpg</span>&quot; title=&quot;tulip flower&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>[attribute*&#x3D;value] 属性中做字符串拆分，只要能拆出来 value 这个词就行，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title*=flower]</span>   --&gt;  &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;/<span class="selector-tag">i</span>/eg_tulip<span class="selector-class">.jpg</span>&quot; title=&quot;ffffflowerrrrrr&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. attribute 属性以 value 开头:</strong></p>
<p>[attribute|&#x3D;value] 属性中<strong>必须是完整且唯一的单词</strong>，或者以 <strong>-</strong> 分隔开：，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[lang|=en]</span>     --&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;en&quot;&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;en-us&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>[attribute^&#x3D;value] 属性的<strong>前几个字母是 value 就可以</strong>，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[lang^=en]</span>    --&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;ennn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3. attribute 属性以 value 结尾:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute$=value]</span> 属性的后几个字母是 value 就可以，例如：</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src$=<span class="string">&quot;.pdf&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><p>约定使用的标签名：</p>
<ul>
<li>span 标签：重点要突出的字，使用 span 标签套起来。</li>
</ul>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#font-test</span> &#123;</span><br><span class="line">    <span class="comment">/*字体*/</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span>, 微软雅黑;</span><br><span class="line">    <span class="comment">/*字体大小*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="comment">/*字体粗细*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="comment">/*字体颜色*/</span></span><br><span class="line">    <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ul>
<li>颜色</li>
<li>对齐方式</li>
<li>首行缩进</li>
<li>行高</li>
<li>装饰</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#text-test</span> &#123;</span><br><span class="line">    <span class="comment">/*居中*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/*首行缩进*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="comment">/*行高*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*下划线、中划线...*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文本 与 图片对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;text-test&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;../resources/<span class="number">1</span><span class="selector-class">.jpeg</span>&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;hello world&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="创建文件时"><a href="#创建文件时" class="headerlink" title="创建文件时"></a>创建文件时</h3><ol>
<li>使用 vue 开发。使用 vue ui 创建工程的时候，需要勾选两个服务 route 和它下面的一个。</li>
<li>需要添加 axios 插件，通过 <code>vue add axios</code> 来完成</li>
</ol>
<h3 id="编写文件时"><a href="#编写文件时" class="headerlink" title="编写文件时"></a>编写文件时</h3><ol>
<li>vue 是单文件项目，所有的文件都在一个 html 中，通过 ref-link 跳转到不同的 .vue 文件中，刷新页面</li>
<li>在 views 中编写页面之后，需要在 router 下面的 index.js 注册路由</li>
<li>在 app.vue 中，编写跳转标签</li>
</ol>
<h3 id="动态获取路由渲染-nav"><a href="#动态获取路由渲染-nav" class="headerlink" title="动态获取路由渲染 nav"></a>动态获取路由渲染 nav</h3><ol>
<li>通过 <code>$router.options.routes</code> 获取路由信息，通过 <code>v-for</code> 即可获取当前项</li>
</ol>
<h3 id="前端处理表格"><a href="#前端处理表格" class="headerlink" title="前端处理表格"></a>前端处理表格</h3><h4 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h4><ol>
<li>自带属性有 page-size，total 等</li>
<li>切换页面可以通过 current-change 函数实现</li>
</ol>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ol>
<li>只会通过当前页面来渲染页面</li>
</ol>
<h3 id="前端表单处理"><a href="#前端表单处理" class="headerlink" title="前端表单处理"></a>前端表单处理</h3><ol>
<li>可以前端校验表单的合法性</li>
<li>直接向后端提交 axios 请求，通过 ，追加表单信息</li>
<li>成功后，跳转</li>
</ol>
<h3 id="修改页的处理"><a href="#修改页的处理" class="headerlink" title="修改页的处理"></a>修改页的处理</h3><ol>
<li><p>update 页面如何获取数据</p>
<ol>
<li>旧页面通过 <code>$router.push(&#123;path: &#39;url&#39;, query:&#123;id: row.id&#125;&#125;)</code> 传递参数</li>
<li>新页面通过 <code>this.$route.query.id</code> 获取传递参数</li>
</ol>
</li>
<li><p>触发点击事件后，将 id 传到另一个页面</p>
</li>
<li><p>新页面通过 id 请求后台数据</p>
</li>
</ol>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol>
<li>添加 <code>created()&#123;&#125;</code> 函数可以在页面初始化的时候，刷新页面</li>
<li>动态刷新 <code>windows.location.reload()</code></li>
<li>跳转 <code>this.$router.push(&#123;path:&#39;&#39;, query:&#123;&#125;&#125;)</code></li>
</ol>
<h3 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h3><ol>
<li>axios 采用 https 链接报错，采用 http 链接</li>
<li>axios 需要在函数外面保存对象，<code>const _this = this</code></li>
</ol>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>使用 springboot + mybatis 实现</p>
<ol>
<li>controller 需要添加 <code>@Controller</code> 注解</li>
<li>service 需要添加 <code>@Service</code> 注解</li>
<li>dao 需要添加 <code>@Mapper @Repository</code> 注解</li>
<li>Test 需要给类添加 <code>@SpringBootTest</code> 和 函数添加 <code>@Test</code> 注解</li>
</ol>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/studentms?setUnicode=true&amp;characterEncoding=utf8&amp;useAffectedRows=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">auggie</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.auggie.springboottest.bean</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure>

<p>*Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.auggie.springboottest.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM studentms.s;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="controller-文件"><a href="#controller-文件" class="headerlink" title="controller 文件"></a>controller 文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 restful 开发</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 指定根路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line"><span class="meta">@CrossOrigin(&quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getStudentList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="后端处理表格"><a href="#后端处理表格" class="headerlink" title="后端处理表格"></a>后端处理表格</h3><ol>
<li>编写获取数据大小的接口</li>
<li>编写根据当前页和页面大小的数据接口，restful 风格获取</li>
</ol>
<h3 id="后端表单处理"><a href="#后端表单处理" class="headerlink" title="后端表单处理"></a>后端表单处理</h3><ol>
<li>通过 @RequsetBody 获取 JSON 格式的信息</li>
<li>然后处理即可</li>
</ol>
<h3 id="一些常犯的错误"><a href="#一些常犯的错误" class="headerlink" title="一些常犯的错误"></a>一些常犯的错误</h3><ol>
<li>没有启动 mysql <code>service mysqld start</code></li>
<li>mybatis 通过对象传递参数的时候，需要在函数中添加 @Param 的注解，并且不需要在 xml 中配置 paramType</li>
</ol>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2022/04/07/my-new-post/</url>
    <content><![CDATA[<h1 id="docker-安装以及-opengauss-安装"><a href="#docker-安装以及-opengauss-安装" class="headerlink" title="docker 安装以及 opengauss 安装"></a>docker 安装以及 opengauss 安装</h1><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><ol>
<li><p>docker 依赖环境安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker 引擎安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker 换源 阿里云</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://2e1o9u0t.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="opengauss-安装"><a href="#opengauss-安装" class="headerlink" title="opengauss 安装"></a>opengauss 安装</h2><ol>
<li><p>安装 opengauss 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull enmotech/opengauss</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=Secretpassword@123 -p 8181:5432 enmotech/opengauss</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放安全组</p>
<p>在华为云安全组将 <code>8181</code> 端口开放，外部即可连接。</p>
</li>
<li><p>连接，选择 <code>postgre</code> 数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it opengauss sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 omm 用户</span></span><br><span class="line">su - omm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆数据库</span></span><br><span class="line">gsql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，然后就可以用连接了，密码好像有强度要求。</span></span><br><span class="line">CREATE USER auggie CREATEROLE PASSWORD <span class="string">&#x27;3263265Rjc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line">SELECT * FROM pg_user;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><h3 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment"># 查看镜像</span></span><br><span class="line"></span><br><span class="line">docker search [] <span class="comment"># 搜索镜像</span></span><br><span class="line"></span><br><span class="line">docker pull repo:[tag] <span class="comment"># 下载镜像</span></span><br><span class="line"></span><br><span class="line">docker rmi -f [image ID | image name]</span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>有了<strong>镜像</strong>才可以创建<strong>容器</strong></p>
<h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [option] image</span><br><span class="line"></span><br><span class="line">--name=<span class="string">&quot;Name&quot;</span>	容器名字，用来区分容器</span><br><span class="line">-d 				后台方式运行</span><br><span class="line">-it 			使用交互方式运行</span><br><span class="line">-p				指定容器端口</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口</span><br><span class="line">	-p 容器端口</span><br><span class="line">-P				随机指定端口</span><br><span class="line">-e				配置环境</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@auggie ~]<span class="comment"># docker run -it centos</span></span><br><span class="line">[root@7eb2206cb300 /]<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<h4 id="列出运行的容器"><a href="#列出运行的容器" class="headerlink" title="列出运行的容器"></a>列出运行的容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [option]</span><br><span class="line"></span><br><span class="line">-a		列出所有</span><br><span class="line">-q 		只列出编号</span><br><span class="line">-n=? 	查看最近运行</span><br></pre></td></tr></table></figure>

<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span>			关闭退出</span><br><span class="line">ctrl + p + q	不关闭退出</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [-f] 容器ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -q)</span><br><span class="line">docker ps -q | xargs docker <span class="built_in">rm</span> </span><br></pre></td></tr></table></figure>

<h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start <span class="built_in">id</span>		启动</span><br><span class="line">docker restart <span class="built_in">id</span>	重启</span><br><span class="line">docker stop <span class="built_in">id</span>		停止容器</span><br><span class="line">docker <span class="built_in">kill</span> <span class="built_in">id</span>		强制停止</span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p><strong>后台启动 docker</strong></p>
<p>通过 -d 后台启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@auggie ~]<span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo hello;sleep 1;done&quot;</span></span><br><span class="line">9819e426f325dac27c1180ea6239a637e059a3d9fe549d072e8be66a5d30d389</span><br><span class="line">[root@auggie ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS     NAMES</span><br><span class="line">9819e426f325   centos    <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   About a minute ago   Up About a minute             objective_zhukovsky</span><br></pre></td></tr></table></figure>

<p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -ft --<span class="built_in">tail</span> n ID</span><br><span class="line"></span><br><span class="line">-f 		持续</span><br><span class="line">-t 		显示时间戳</span><br><span class="line">--<span class="built_in">tail</span> 	<span class="built_in">tail</span></span><br></pre></td></tr></table></figure>

<p><strong>查看 docker 内部的进程信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top ID</span><br></pre></td></tr></table></figure>

<p><strong>查看容器元信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect ID</span><br></pre></td></tr></table></figure>

<p><strong>进入当前正在进行的容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入后台方式运行的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入当前终端</span></span><br><span class="line">docker attach ID</span><br></pre></td></tr></table></figure>

<p><strong>从容器内拷贝文件到主机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ID:src dest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过卷来实现</span></span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p><code>portainer</code> 是一个图形化界面管理工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8181:9000\</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立<strong>软件包</strong>，用来打包<strong>软件运行环境</strong>和基于环境开发的<strong>软件</strong>。</p>
<p>如何获得镜像：</p>
<ul>
<li>远程仓库下载</li>
<li>自己制作</li>
</ul>
<h3 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h3><blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<p>docker 下载时分层</p>
<blockquote>
<p>Docker 镜像加载原理</p>
</blockquote>
<ul>
<li>bootfs(boot file system)</li>
<li>rootfs(root file system)</li>
</ul>
<p>为什么 docker 中的 centos 很小？</p>
<p>对于一个精简的 OS，rootfs 可以很小。对于不同的 linux 发行版本，bootfs 基本一致，rootfs 会有差别。</p>
<h3 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h3><p>用于生成新镜像，相当于快照。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit </span><br><span class="line"></span><br><span class="line">docker commit -m=<span class="string">&quot;msg&quot;</span> -a=<span class="string">&quot;author&quot;</span> ID dest:[tag]</span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ ~]<span class="comment"># docker commit -m=&quot;add webapps&quot; -a=&quot;auggie&quot; bd01ec9750b6 tomcat01:1.0</span></span><br></pre></td></tr></table></figure>

<hr>
<p>简单总结 docker 的一些命令：</p>
<ul>
<li>镜像<ul>
<li>docker images</li>
<li>docker search</li>
<li>docker pull</li>
<li>docker rmi</li>
</ul>
</li>
<li>容器<ul>
<li>docker run</li>
<li>docker ps</li>
<li>docker inspect ID</li>
<li>docker top ID</li>
<li>docker logs -ft –tial n ID</li>
<li>exit &amp;&amp; ctrl + p + q</li>
<li>docker stop &#x2F; kill &#x2F; start &#x2F; restart</li>
</ul>
</li>
<li>容器 -&gt; 镜像<ul>
<li>docker commit -m&#x3D;”” -a&#x3D;”” ID img:[tag]</li>
</ul>
</li>
</ul>
<hr>
<h2 id="容器数据卷（数据持久化，双向绑定）"><a href="#容器数据卷（数据持久化，双向绑定）" class="headerlink" title="容器数据卷（数据持久化，双向绑定）"></a>容器数据卷（数据持久化，<strong>双向绑定</strong>）</h2><p>问题：如果容器删除，数据就会丢失！</p>
<p>需求：数据持久化</p>
<h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote>
<ol>
<li>使用命令挂载</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录 </span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ ~]<span class="comment"># docker run -it -v /home/test:/home centos</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker inspect ID</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<h3 id="挂载-mysql"><a href="#挂载-mysql" class="headerlink" title="挂载 mysql"></a>挂载 mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v dest:src --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123 -d mysql</span><br></pre></td></tr></table></figure>



<h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><p>通过 <code>docker volume ls</code> 可以查看挂载，使用 <code>docker volume inspect Name</code> 可以查看挂载位置</p>
<ol>
<li><p>匿名挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ test]# docker run -d --name nginx03 -v /etc/nginx nginx</span><br><span class="line">00faee8254a84238b2f464e84b1501198276420cac82ffc2c62fbfd32a103b08</span><br><span class="line"></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;675fde039bc4823c18c279a40099e656cda5f351d18ae1410df561ee07bd591e&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/675fde039bc4823c18c279a40099e656cda5f351d18ae1410df561ee07bd591e/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/etc/nginx&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>


</li>
<li><p>具名挂载</p>
<p>含有名字的挂载</p>
</li>
</ol>
<blockquote>
<ol start="2">
<li>DockerFile</li>
</ol>
</blockquote>
<p>Dockerfile 用来构建 docker 镜像的构建文件</p>
<ol>
<li><p>编写 dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;volume01&quot;</span>, <span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f ./dockerfile1 -t auggie/centos .</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>创建的两个容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">               &quot;Name&quot;: &quot;e77305721d3246561557da99c7adcfbfdbe25591746ce688bc38c60df2840a8d&quot;,</span><br><span class="line">               &quot;Source&quot;: &quot;/var/lib/docker/volumes/e77305721d3246561557da99c7adcfbfdbe25591746ce688bc38c60df2840a8d/_data&quot;,</span><br><span class="line">               &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">               &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">               &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">               &quot;RW&quot;: true,</span><br><span class="line">               &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">               &quot;Name&quot;: &quot;97203bca5396ef84cc8ed6ae0cce96d019dc2deb5dceae54c2e16fc167f8ea02&quot;,</span><br><span class="line">               &quot;Source&quot;: &quot;/var/lib/docker/volumes/97203bca5396ef84cc8ed6ae0cce96d019dc2deb5dceae54c2e16fc167f8ea02/_data&quot;,</span><br><span class="line">               &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">               &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">               &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">               &quot;RW&quot;: true,</span><br><span class="line">               &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile 用于构建一个 docker 镜像</p>
<p>构建过程：</p>
<ol>
<li>编写一个 dockerfile 文件</li>
<li>docker build 构建成为一个<strong>镜像</strong></li>
<li>docker run 将镜像生成<strong>容器</strong></li>
</ol>
<h3 id="dockerfile-的构建过程"><a href="#dockerfile-的构建过程" class="headerlink" title="dockerfile 的构建过程"></a>dockerfile 的构建过程</h3><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><ol>
<li>每一个 keyword 都是大写字母</li>
<li>从上到下构建</li>
<li>每一个指令都会创建提交一个新的镜像层，并提交</li>
</ol>
<p>dockerfile ：用于构建 docker images</p>
<p>docker images 是通过 dockerfile 构建生成的镜像，最终发布和运行的产品</p>
<p>docker container 是通过 docker image 构建的容器</p>
<h3 id="dockerfile-的指令"><a href="#dockerfile-的指令" class="headerlink" title="dockerfile 的指令"></a>dockerfile 的指令</h3><ul>
<li>FROM<ul>
<li>这个镜像的妈妈是谁</li>
<li>指定基础镜像</li>
</ul>
</li>
<li>MAINTAINER<ul>
<li>指定维护者的信息</li>
</ul>
</li>
<li>RUN<ul>
<li>构建镜像的时候，需要运行的命令</li>
</ul>
</li>
<li>ADD<ul>
<li>添加文件，例如部署 tomcat，则要添加 tomcat 的压缩包</li>
</ul>
</li>
<li>COPY<ul>
<li>类似 ADD，将文件拷贝到镜像中</li>
</ul>
</li>
<li>WORKDIR<ul>
<li>镜像的工作目录</li>
</ul>
</li>
<li>VOLUME<ul>
<li>挂在卷</li>
</ul>
</li>
<li>EXPOSE<ul>
<li>暴露端口</li>
</ul>
</li>
<li>CMD<ul>
<li>指定这个容器启动的时候，需要运行的命令；只有最后一条会生效</li>
</ul>
</li>
<li>ENTRYPOINT<ul>
<li>指定这个容器启动的时候，需要运行的命令；可以追加</li>
</ul>
</li>
<li>ENV<ul>
<li>设置环境变量，用于设置 mysql 的密码</li>
</ul>
</li>
</ul>
<h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><ol>
<li>登陆 <code>docker login -u$user -p$pass</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login -u</span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ docker_programs]# docker login -uaugg1e</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>发布 <code>dcoker push username/name:[tag]</code><ol>
<li>镜像需要以 username&#x2F;repo 的格式命名</li>
</ol>
</li>
</ol>
<h3 id="发布-springboot-项目"><a href="#发布-springboot-项目" class="headerlink" title="发布 springboot 项目"></a>发布 springboot 项目</h3><ol>
<li><p>向 springboot 项目打包 .jar</p>
</li>
<li><p>编写 Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 jdk11 上面构建</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 .jar 文件拷贝到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-0.0.1-SNAPSHOT.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello docker&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将 jar 包和 Dockerfile 发送到服务器</p>
</li>
<li><p><code>docker build -t &quot;name&quot; .</code> 构建镜像</p>
</li>
<li><p><code>docker run name</code> 生成容器</p>
</li>
</ol>
<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2>]]></content>
      <tags>
        <tag>技术</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>java</title>
    <url>/2022/05/14/java/</url>
    <content><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h2><p>Tomcat 是 web 服务器。</p>
<p>默认端口号：8080</p>
<p>可以直接使用 bin&#x2F;startup.bat 启动</p>
<p>配置文件为 conf&#x2F;server.xml</p>
<p><del>一开始 Tomcat 访问不了的原因是放在了 x86 文件夹下</del></p>
<h3 id="网站的访问"><a href="#网站的访问" class="headerlink" title="网站的访问"></a>网站的访问</h3><ol>
<li>键入 url</li>
<li>检查本机 system32\drivers\etc\hosts 配置文件下查看是否存在该 url 的映射，如果存在直接返回 IP</li>
<li>访问 DNS 服务器，获得 IP</li>
</ol>
<h3 id="使用-Tomcat-发布一个网站"><a href="#使用-Tomcat-发布一个网站" class="headerlink" title="使用 Tomcat 发布一个网站"></a>使用 Tomcat 发布一个网站</h3><p>将 html 放在指定的 web 应用文件夹下</p>
<p>网站结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps: <span class="comment">// Tomcat 服务器的 web 目录</span></span><br><span class="line">	-ROOT</span><br><span class="line">   	-auggie: <span class="comment">// 网站目录名</span></span><br><span class="line">		-WEB-INF</span><br><span class="line">            -classes: <span class="comment">// java 程序</span></span><br><span class="line">            -lib: <span class="comment">// web 应用依赖的 jar 包</span></span><br><span class="line">            -web.xml: <span class="comment">// 网站配置文件</span></span><br><span class="line">		-index.html <span class="comment">// *默认网页</span></span><br><span class="line">      	-<span class="keyword">static</span></span><br><span class="line">            -css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20211230145352576.png" alt="image-20211230145352576"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>超文本传输协议，是一个简单的请求-响应协议。</p>
<ol>
<li>TCP</li>
<li>port：80</li>
</ol>
<p>HTTPS：安全的超文本传输协议</p>
<h3 id="HTTP-request"><a href="#HTTP-request" class="headerlink" title="HTTP request"></a>HTTP request</h3><p><img src="/.com//image-20211230145331177.png" alt="image-20211230145331177"></p>
<h3 id="HTTP-response"><a href="#HTTP-response" class="headerlink" title="HTTP response"></a>HTTP response</h3><p><img src="/.com//image-20211230145322009.png" alt="image-20211230145322009"></p>
<p>状态码：</p>
<ul>
<li>200：成功</li>
<li>404：找不到</li>
<li>3**：重定向</li>
<li>5**：服务器代码错误</li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="为什么要学习-Maven"><a href="#为什么要学习-Maven" class="headerlink" title="为什么要学习 Maven"></a>为什么要学习 Maven</h3><ol>
<li>JavaWeb 开发中，需要使用大量的 jar 包，我们需要手动导入</li>
<li>Maven 是一个自动导入和配置 jar 包的工具</li>
</ol>
<h3 id="Maven-介绍"><a href="#Maven-介绍" class="headerlink" title="Maven 介绍"></a>Maven 介绍</h3><p>Maven 的核心思想：<strong>约定大于配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin: 可执行文件</span><br><span class="line">conf: 配置</span><br><span class="line">boot: 启动</span><br><span class="line">lib: 依赖</span><br></pre></td></tr></table></figure>

<h3 id="IDEA-中使用-Maven"><a href="#IDEA-中使用-Maven" class="headerlink" title="IDEA 中使用 Maven"></a>IDEA 中使用 Maven</h3><ol>
<li>创建 MavenWeb 项目</li>
</ol>
<p><img src="/.com//image-20211228140933067.png" alt="image-20211228140933067"></p>
<p><img src="/.com//image-20211228141305382.png" alt="image-20211228141305382"></p>
<p>上面图片的 groupId 配置错误（</p>
<ol start="2">
<li>IDEA 中的 Maven 设置</li>
</ol>
<p>Spring 中可能会使用 IDEA 自带的 Maven，所以我们可能需要在 IDEA 中配置 Maven。</p>
<h3 id="Maven-项目结构"><a href="#Maven-项目结构" class="headerlink" title="Maven 项目结构"></a>Maven 项目结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--mian</span><br><span class="line">	-java		<span class="comment">// 存放 java 代码</span></span><br><span class="line">	-resources	<span class="comment">// 存放一些配置文件</span></span><br><span class="line">--test</span><br><span class="line">	-java		<span class="comment">// 测试使用</span></span><br></pre></td></tr></table></figure>

<h3 id="在-IDEA-中配置-Tomcat"><a href="#在-IDEA-中配置-Tomcat" class="headerlink" title="在 IDEA 中配置 Tomcat"></a>在 IDEA 中配置 Tomcat</h3><p>左上角配置启动环境即可</p>
<h3 id="Maven-Webapp-项目结构"><a href="#Maven-Webapp-项目结构" class="headerlink" title="Maven Webapp 项目结构"></a>Maven Webapp 项目结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Lifecycle		<span class="comment">// maven 命令行操作</span></span><br><span class="line">-Plugins		<span class="comment">// 插件</span></span><br><span class="line">-Dependencies	<span class="comment">// 项目依赖</span></span><br></pre></td></tr></table></figure>

<h3 id="pom-xml-文件"><a href="#pom-xml-文件" class="headerlink" title="pom.xml 文件"></a>pom.xml 文件</h3><p>用于配置 maven 项目。只要将需要导入的包放在 dependencies 下面即可。</p>
<p>子项目无法识别父项目的时候，子模块加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auggie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb-Servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即可</p>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h3><ul>
<li>用于开发动态 Web 的技术</li>
</ul>
<p>把实现了 Servlet 接口的 Java 程序叫做 Servlet</p>
<h3 id="HelloSverlet"><a href="#HelloSverlet" class="headerlink" title="HelloSverlet"></a>HelloSverlet</h3><blockquote>
<p>Servlet 接口有两个默认的实现类：HttpServlet</p>
</blockquote>
<ol>
<li><p>构建 Maven 项目，删掉里面的全部东西，将依赖全部导入主工程</p>
</li>
<li><p>将 Servlet 建在 Module 中</p>
<ol>
<li><p>关于 Maven 父子工程的理解：</p>
<p>在父项目中建立一个 module，类似与继承</p>
</li>
</ol>
</li>
<li><p>Maven 环境优化</p>
<ol>
<li>修改 web.xml </li>
<li>将 maven 环境搭建完整</li>
</ol>
</li>
<li><p>实现 Servlet 程序</p>
<ol>
<li>编写一个实现 Servlet 接口的类</li>
<li>继承 HttpServlet</li>
</ol>
</li>
<li><p>编写 Servlet 的映射</p>
<ol>
<li><p>为什么需要映射</p>
<p>JAVA 程序需要使用浏览器访问，浏览器需要连接 Web服务器，所以我们需要 Web 服务器中<strong>注册</strong>我们写的 Servlet，<strong>并且给他一个浏览器能够访问的路径</strong>。</p>
<p>用户需要通过浏览器来访问 Web 服务器中的 Servlet。所以我们需要在 Web 服务器中注册 Servlet</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>	// 3</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.auggie.Servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> // 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>	// 2</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>		// 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java 程序需要 servlet 注册，给定一个 servlet 名字</p>
<p>然后将 servlet - name 映射到 url - pattern 上面</p>
</li>
<li><p>配置 Tomcat</p>
</li>
</ol>
<p><del>一开始使用的 Tomcat 是 10 版本，版本太高了（，导致版本不兼容</del></p>
<h3 id="Servlet-接口的实现"><a href="#Servlet-接口的实现" class="headerlink" title="Servlet 接口的实现"></a>Servlet 接口的实现</h3><h4 id="Servlet-interface"><a href="#Servlet-interface" class="headerlink" title="Servlet interface"></a>Servlet interface</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h4 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h4><p>通用小服务程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br></pre></td></tr></table></figure>

<h4 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h4><p>已经实现了 service 方法，我们只需要重写 service 调用的子方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException</span><br></pre></td></tr></table></figure>

<h3 id="Servlet-原理"><a href="#Servlet-原理" class="headerlink" title="Servlet 原理"></a>Servlet 原理</h3><p>Web 服务器收到浏览器请求之后，会调用 Servlet</p>
<p><img src="/.com//image-20211229105628159.png"></p>
<p>mapping 优先级：指定了固有映射的优先级最高。</p>
<h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>背景：登陆的时候，一个登陆全部都登陆了</p>
<p><strong>Web 容器</strong>在启动的时候，为 <strong>Web 程序</strong>都创建一个对应的 ServletContext 对象，代表当前的 Web 应用。</p>
<p>应用：</p>
<ul>
<li><p>共享数据（不同 Servlet 之间的数据通信）</p>
<p>在这个 Servlet 中的数据可以在另外一个 Servlet 中访问。</p>
</li>
<li><p>转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;dispatch&quot;</span>);</span><br><span class="line">        servletContext.getRequestDispatcher(<span class="string">&quot;/hello&quot;</span>).forward(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	1. 转发之后，会返回</span></span><br><span class="line"><span class="comment">	2. 需要使用 forward(req, resp) 方法来执行跳转	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意事项：</p>
<ol>
<li><p>如果从 ServletContext 中读取一个不存在的对象，结果为空。</p>
</li>
<li><p>设置 resp 的字符集即可解决乱码问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ol>
<li><p>响应状态码</p>
</li>
<li><p>响应体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见应用</p>
<ol>
<li>向浏览器输出消息</li>
<li><strong>下载文件</strong><ol>
<li>获取文件的绝对路径</li>
<li>获取文件名，可以使用 trick 获得</li>
<li>设置响应头 + <strong>fileName</strong></li>
<li>创建 FileOutputStream, + <strong>realPath</strong></li>
<li>创建 OutputStream</li>
<li>创建 buffer</li>
<li>将 in 读取到 buffer 中，再将 buffer 中的数据读取到 out 中</li>
<li>关闭流对象</li>
</ol>
</li>
</ol>
<blockquote>
<p>File -&gt; FileOutputStream -&gt; Buffer -&gt; OutputStream -&gt; Client</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   	</span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\auggie\\Documents\\IDEA_programs\\MavenDemo\\Servlet\\Response\\target\\classes\\image\\1.jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：需要掌握 resp 的状态头，流对象的使用。</p>
</blockquote>
<pre><code> 3. **验证码，后端实现**
</code></pre>
<blockquote>
<ol>
<li><p>如何实现后台刷新</p>
<p>resp.setHeader(“refresh”, “5”);</p>
</li>
<li><p>在内存中创建图片</p>
<p>BufferedImage</p>
</li>
<li><p>创建随机数</p>
<ol>
<li>random</li>
<li>将 int 转化为 String 类<ol>
<li>“” + int</li>
<li>String.valueOf(int)</li>
</ol>
</li>
<li>保证随机数一定是等长的<ol>
<li>使用 StringBuffer 对象</li>
</ol>
</li>
</ol>
</li>
</ol>
</blockquote>
<ol start="4">
<li><p><strong>实现重定向</strong></p>
<p>页面跳转，该资源请求另外一个 Web 资源</p>
<p>重定向的路径从项目目录开始，跳转从当前目录开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.getServletContext().getRequestDispatcher(<span class="string">&quot;/down&quot;</span>).forward(req, resp);</span><br><span class="line">resp.sendRedirect(<span class="string">&quot;/resp/down&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.contextPath&#125;</span><br><span class="line">/%--项目当前路径--%/</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);					<span class="comment">// 防止乱码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);		<span class="comment">// 单个参数</span></span><br><span class="line">String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);	<span class="comment">// checkbox</span></span><br></pre></td></tr></table></figure>

<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p>作用：用于解决 HTTP 协议的无状态性。</p>
<p>从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。</p>
<h3 id="保存会话的两种会话技术"><a href="#保存会话的两种会话技术" class="headerlink" title="保存会话的两种会话技术"></a>保存会话的两种会话技术</h3><ol>
<li>Cookie		客户端会话技术</li>
<li>Session       服务器会话技术</li>
</ol>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>定义：Cookie 属于客户端会话技术，它是服务器发送给浏览器的小段文本信息，<strong>存储在客户端浏览器的内存中或硬盘上</strong>。当浏览器保存了 Cookie 后，<strong>每次访问服务器，都会在 HTTP 请求头中将这个 Cookie 回传给服务器。</strong></p>
<p>Cookie 中存的是键值对。可以使用 getCookie 方法获得全部的 Cookie 数组。然后使用 <code>getName()</code> 和 <code>getValue()</code></p>
<p>获取单个 Cookie 的值。</p>
<p><code>setMaxAge(int expiry)</code> 以秒为单位。</p>
<ol>
<li><p>String 转化为 Date 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> it.getValue();</span><br><span class="line"><span class="type">Long</span> <span class="variable">tmp</span> <span class="operator">=</span> Long.parseLong(value);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(tmp);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Date 转化为 String 输出</p>
<p><code>SimpleDateFormat</code></p>
</li>
</ol>
<p>访问其他页面的时候，会把 cookie 带过来。</p>
<p>缺点：</p>
<ul>
<li>在 HTTP 请求中，<strong>Cookie 是明文传递的，容易泄露用户信息，安全性不高。</strong></li>
<li>浏览器可以禁用 Cookie，一旦被禁用，Cookie 将无法正常工作。</li>
<li>Cookie 对象中只能设置文本（字符串）信息。</li>
<li>客户端浏览器保存 Cookie 的数量和长度是有限制的。</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session 虽然属于服务端会话技术，但是它的实现离不开客户端浏览器和 Cookie 的支持。</p>
<p><img src="/.com//image-20211230131104256.png" alt="image-20211230131104256"></p>
<p>过程：</p>
<blockquote>
<ol>
<li>当客户端第一次请求会话对象时，服务器会创建一个 Session 对象，并为该 Session 对象分配一个唯一的 SessionID（用来标识这个 Session 对象）；</li>
<li>服务器将 SessionID 以 Cookie（Cookie 名称为：“JSESSIONID”，值为 SessionID 的值）的形式发送给客户端浏览器；</li>
<li>客户端浏览器再次发送 HTTP 请求时，会将携带 SessionID 的 Cookie 随请求一起发送给服务器；</li>
<li>服务器从请求中读取 SessionID，然后根据 SessionID 找到对应的 Session 对象。</li>
</ol>
</blockquote>
<p><strong>在 pom.xml 中设置 Session 存活时间</strong></p>
<p>以分钟为单位，默认是 30 min。Session-time 是 0 或者负数的时候，表示会话不会过期。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h3><p><a class="link" href="http://c.biancheng.net/servlet2/session.html">Servlet Session的使用 (biancheng.net)<i class="fas fa-external-link-alt"></i></a></p>
<p>上面总结的很全面</p>
<p><img src="/.com//image-20211230131258093.png" alt="image-20211230131258093"></p>
<h2 id="MVC-三层架构"><a href="#MVC-三层架构" class="headerlink" title="MVC 三层架构"></a>MVC 三层架构</h2><p>Module View Controller 模型视图控制器</p>
<p><img src="/.com//Users\auggie\Desktop\note\java\JavaWeb.assets\image-20211230140625096.png" alt="image-20211230140625096"></p>
<p>Module：</p>
<ul>
<li>业务处理（Service）：实现业务逻辑</li>
<li>数据持久层（DAO）：主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此</li>
</ul>
<p>View：</p>
<ul>
<li>展示数据</li>
<li>发起 Servlet 请求</li>
</ul>
<p>Controller：</p>
<ul>
<li>接受用户请求</li>
<li>交给业务层处理</li>
<li>控制视图跳转</li>
</ul>
<p>Demo：</p>
<ol>
<li>接受用户登陆请求（controller）</li>
<li>处理用户用户请求（controller）</li>
<li>交给业务层，判断是否合法（Module）</li>
<li>交给 DAO 层查询 DB 是否合法</li>
</ol>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>能够对 Servlet 容器传给 Web 资源的 request 对象和 response 对象进行检查和修改。</p>
<ul>
<li>在 Web 资源被访问前，检查 request 对象，修改请求头和请求正文，或对请求进行预处理操作。</li>
<li>将请求传递到下一个过滤器或目标资源。</li>
<li>在 Web 资源被访问后，检查 response 对象，修改响应头和响应正文。</li>
</ul>
<p><img src="/.com//image-20211230142142647.png" alt="image-20211230142142647"></p>
<p>作用：</p>
<ul>
<li>处理中文乱码</li>
<li>登陆验证</li>
</ul>
<p>注意事项：</p>
<ol>
<li>过滤器需要注册</li>
<li>doFilter 需要下传，如果不写程序将在这里停止。</li>
</ol>
<blockquote>
<ol>
<li>过滤器在 Web 服务器启动的时候，初始化</li>
<li>过滤器在 Web 服务器停止的时候，销毁</li>
</ol>
</blockquote>
<p>过滤经过 url 的全部请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterencoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.auggie.filter.ChineseCharacterFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterencoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterChain.doFilter(servletRequest, servletResponse); <span class="comment">// 不写程序直接停止运行</span></span><br></pre></td></tr></table></figure>

<h3 id="Filter-和监听器的应用"><a href="#Filter-和监听器的应用" class="headerlink" title="Filter 和监听器的应用"></a>Filter 和监听器的应用</h3><p>用户登陆之后才能看到主页，用户注销之后不能进入主页</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">-view</span><br><span class="line">--home		// 需要登陆之后才能进入 </span><br><span class="line">--login</span><br><span class="line">--error</span><br><span class="line"></span><br><span class="line">-controller</span><br><span class="line"></span><br><span class="line">-service</span><br><span class="line">--servlet/logout</span><br><span class="line">--servlet/login</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在 home.jsp 中重定向</p>
</li>
<li><p>使用过滤器实现</p>
<p>转化之后，才能获得 Session。</p>
<p>过滤器注册在什么地方？<strong>主页下面的一切</strong>，主页和其他页面分开</p>
</li>
</ol>
<p><strong>实现用户等级 id name level</strong></p>
<blockquote>
<p>小结：</p>
<p>过滤器实现拦截需要将网页放在不同的路径下。</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/.com//image-20211230145352576.png" alt="image-20211230145352576"></p>
<ol>
<li>一般方法<ol>
<li><code>servletResponse.setCharacterEncoding(&quot;utf-8&quot;);</code> 设置编码</li>
<li><code>servletResponse.setContentType(&quot;text/html&quot;);</code> 设置浏览器展示样式</li>
</ol>
</li>
<li>rep 常用方法<ol>
<li><code>getSession()</code></li>
<li><code>getCookie()</code></li>
<li><code>getParameter()</code></li>
<li><code>getParameterValues()</code></li>
</ol>
</li>
<li>Session 常用方法<ol>
<li><code>getAttribute(String)</code></li>
<li><code>setAttribute(String, Object)</code></li>
<li><code>removeAttribue(String)</code></li>
<li><code>invalidate()</code></li>
<li><strong><code>sendRedirect(Stirng Absoluteurl)</code></strong></li>
</ol>
</li>
<li>Cookie 常用方法<ol>
<li><code>getName(String)</code></li>
<li><code>getValue(String)</code></li>
</ol>
</li>
<li>resp 常用方法<ol>
<li><code>getWriter()</code></li>
<li><code>getOutputStream()</code></li>
<li><code>addCookie(String, String)</code></li>
</ol>
</li>
<li>ServletContext 常用方法 this.getServletContext()<ol>
<li><code>getAttribute(String)</code></li>
<li><code>setAttribute(String)</code></li>
<li><code>getRequestDispatcher(String url).forward(req, resp)</code></li>
</ol>
</li>
<li>Filter<ol>
<li><code>implements Filter</code></li>
<li><code>doFilter</code></li>
</ol>
</li>
</ol>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>加载驱动，生成 DriverManager 对象</li>
<li>通过 DriverManager 对象，生成数据库连接对象 connection</li>
<li>通过 connection 对象，生成执行环境对象 statement</li>
<li>通过 statement 对象，生成 resultSet 对象</li>
</ol>
<h2 id="加载-JDBC"><a href="#加载-JDBC" class="headerlink" title="加载 JDBC"></a>加载 JDBC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.java.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>创建数据库连接对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://IP:Port/DATABASE&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;bus&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>

<h2 id="配置-properties-文件"><a href="#配置-properties-文件" class="headerlink" title="配置 properties 文件"></a>配置 properties 文件</h2><ol>
<li>编写 properties 文件</li>
<li>使用 <code>ClassName.class.getClassLoad().getResourceAsStream(&quot;file&quot;)</code>获取文件字节流</li>
<li>初始化，创建<code>Properties</code> 对象读取字节流<code>p.load(InputStream)</code></li>
<li>读取数据 <code>p.getProperty(&quot;name&quot;)</code></li>
</ol>
<p>不要加空格，不要加双引号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//47.101.155.92:3306/idea</span></span><br><span class="line">user=bus</span><br><span class="line">password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>从其他文件读取 .properties 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过类名访问文件加载器</span></span><br><span class="line"><span class="comment">// 通过文件加载器加载文件为字节流对象</span></span><br><span class="line"><span class="type">InputSream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> ClassName.class.getClassLoader().getresourceAsStream(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 properties 对象，用于读取 InputStream 对象</span></span><br><span class="line"><span class="type">Propertiers</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">p.load(InputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 properties 对象中读取信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">drive</span> <span class="operator">=</span> Properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="增删改查基本步骤"><a href="#增删改查基本步骤" class="headerlink" title="增删改查基本步骤"></a>增删改查基本步骤</h2><ol>
<li>创建连接对象 Connection</li>
<li>写 SQL 语句</li>
<li>获取 PerparedStatement 对象</li>
<li>修改 PerparedStatement 传入参数</li>
<li>执行 SQL 语句，得到结果集</li>
<li>处理结果集</li>
<li>关闭资源</li>
</ol>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建执行环境</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(String sql);</span><br></pre></td></tr></table></figure>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建环境</span><br><span class="line">PerparedStatement pstmt = connection.perpareStatement(sql);</span><br><span class="line">// 修改数据</span><br><span class="line">pstmt.setString(pos, val);</span><br><span class="line">// 更新数据</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">// setDate(), setInt() ...</span><br></pre></td></tr></table></figure>

<p>插入时间类型：</p>
<p>因为 java.util.Date 和 java.sql.Date 不同，所以需要相互转化。</p>
<p>Date(year, month, day)</p>
<p>Date(Long )</p>
<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="Mybatis3-简介"><a href="#Mybatis3-简介" class="headerlink" title="Mybatis3 简介"></a>Mybatis3 简介</h2><p><a class="link" href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="什么是-Mybatis"><a href="#什么是-Mybatis" class="headerlink" title="什么是 Mybatis"></a>什么是 Mybatis</h3><ol>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong>。</li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
</ol>
<p>配置相关：</p>
<p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>数据持久化，将数据存在数据库中。</p>
<p>持久化就是将程序的数据在<strong>持久状态</strong>和<strong>瞬时状态</strong>转化的过程</p>
<p><strong>为什么需要持久化：</strong>内存断点即失，内存太贵了。存在一些数据不能丢失￥</p>
<h4 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h4><p>Dao层，Service层，Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层是界限明显的</li>
</ul>
<h3 id="为什么需要-mybatis，而不是直接使用-JDBC"><a href="#为什么需要-mybatis，而不是直接使用-JDBC" class="headerlink" title="为什么需要 mybatis，而不是直接使用 JDBC"></a>为什么需要 mybatis，而不是直接使用 JDBC</h3><ul>
<li>传统 JDBC 代码太复杂</li>
<li>用于简化 JDBC 的框架</li>
<li>自动化</li>
</ul>
<h2 id="第一个-Mybatis-程序"><a href="#第一个-Mybatis-程序" class="headerlink" title="第一个 Mybatis 程序"></a>第一个 Mybatis 程序</h2><ol>
<li><p>搭建环境 database，普通 maven </p>
</li>
<li><p>导入 mybatis</p>
<ol>
<li>mybatis</li>
<li>mysql</li>
<li>junite</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写代码</p>
<ol>
<li><p>创建一个 module</p>
</li>
<li><p>编写 mybatis 核心配置文件</p>
<p>在 resource 下建立一个 mybatis-config.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://47.101.155.92:3306/idea?useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bus&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/auggie/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>编写 mybatis 工具类（类似 connection 对象）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.auggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 SqlSessionFactory 对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            System.out.println(<span class="string">&quot;配置成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;配置失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写代码</p>
<ol>
<li>实体类 pojo</li>
<li>Dao <strong>接口</strong></li>
<li>接口实现类</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">&lt;--接口路径 + 函数名称 + 返回对象的泛型--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.auggie.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM idea.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>测试</p>
<ol>
<li><p>junite 测试</p>
<blockquote>
<ol>
<li>需要注册 Mapper</li>
<li>Maven 过滤掉 .xml 文件，（maven 资源导出失败）</li>
</ol>
</blockquote>
</li>
<li><p>步骤：</p>
<ol>
<li>创建 SqlSession 对象</li>
<li>创建接口对应的 mapper</li>
<li>调用接口定义的方法</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>遇到的问题：</p>
<ol>
<li>如果文件在 resources 目录下，可以直接使用文件名访问到该文件</li>
<li>mapper 中指定 .xml 文件需要使用 &#x2F;classes 下的路径</li>
<li>需要更新到最新版本</li>
<li>Maven 过滤掉除了 resources 目录下的 .xml 文件。</li>
<li>.xml 中不能添加中文（</li>
</ol>
<p>小结：</p>
<blockquote>
<ol>
<li>在 pojo 中创建实体类</li>
<li>在 Dao 中创建接口 XXX</li>
<li>设置 XXX.xml，设置 namespace，对应函数，返回的实体类，SQL 语句</li>
<li>在 mybatis-config.xml 中，创建 mapper</li>
</ol>
</blockquote>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ol>
<li>在 xml 申明中 <code>parameterType = &quot;&quot;</code>传递参数使用 <code>#&#123;paraName&#125;</code>，需要指定具体的类。</li>
<li>需要指定具体的 select, insert, update, delete</li>
<li>CUD 需要提交事物，否则不成功。<code>sqlSession.commit()</code></li>
</ol>
<p>总结：</p>
<blockquote>
<p>编写</p>
<ol>
<li>编写接口</li>
<li>编写 mapper 中的 SQL 语句</li>
<li>xml 中配置 namespace</li>
</ol>
<p>使用</p>
<ol>
<li>创建 SqlSession 对象</li>
<li>创建接口对象 sqlSession.getMapper(Interface.class) </li>
<li>调用接口中的函数</li>
<li>提交事务</li>
<li>关闭 sqlSession 对象</li>
</ol>
</blockquote>
<h2 id="Map-amp-amp-模糊查询-LIKE"><a href="#Map-amp-amp-模糊查询-LIKE" class="headerlink" title="Map &amp;&amp; 模糊查询 (LIKE)"></a>Map &amp;&amp; 模糊查询 (LIKE)</h2><p>解决传递全部属性的问题（我只需要少数的几个参数就可以修改，不需要全部属性）</p>
<p>map 传递参数的好处：</p>
<ul>
<li>可以随意传递参数名</li>
<li>不需要全部参数</li>
</ul>
<p>模糊查询：</p>
<ul>
<li><code>where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</code></li>
<li><code>where name like #&#123;name&#125; // name == &quot;%name%&quot;</code></li>
</ul>
<h2 id="XML-配置解析"><a href="#XML-配置解析" class="headerlink" title="XML 配置解析"></a>XML 配置解析</h2><ol>
<li><p><strong>environment</strong></p>
<ol>
<li><p>可以配置多套环境，但是每次只能选用一套。</p>
</li>
<li><p>事物管理器 transactionManager</p>
<pre><code>1. JDBC
</code></pre>
<ol start="2">
<li>MANAGER</li>
</ol>
</li>
<li><p>dataSource</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://47.101.155.92:3306/idea?useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bus&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>properties</strong></p>
<p>编写 .properties 文件，在 mybatis-config.xml 中导入该文件</p>
<ul>
<li>可以直接引入外部配置文件（优先使用）</li>
<li>可以在 xml 中直接编写</li>
</ul>
</li>
<li><p><strong>typeAlias</strong></p>
<p>它仅用于 XML 配置，意在降低冗余的全限定类名书写。可以在所有 XML 中使用</p>
<ul>
<li><p>在 XML 文件中配置。（实体类少的时候）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>在 interface 文件中配置。（实体类多的时候）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Alias(&quot;author&quot;)</span><br></pre></td></tr></table></figure>

<p>在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p>
</li>
</ul>
</li>
<li><p><strong>setting</strong></p>
<ul>
<li><strong>mapUnderscoreToCamelCase</strong> 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn.</li>
</ul>
</li>
</ol>
<ul>
<li><strong>logImpl</strong> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</li>
</ul>
<h2 id="ResultSet-结果集映射"><a href="#ResultSet-结果集映射" class="headerlink" title="ResultSet 结果集映射"></a>ResultSet 结果集映射</h2><p>用于解决实体类和数据库属性字段名字不同的问题。</p>
<p>解决方法：</p>
<ol>
<li><p>SQL 中取别名</p>
</li>
<li><p>ResuletSet 结果集映射</p>
<img src="/.com//image-20220102165201143.png" alt="image-20220102165201143" style="zoom:50%;">

<p>自定义映射，<strong>如果是组合类对象如何解决？</strong></p>
</li>
</ol>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>将异常的 SQL 输出出来。</p>
<p><img src="/.com//image-20220102170130007.png" alt="image-20220102170130007"></p>
<ul>
<li><p>STDOUT_LOGGING</p>
</li>
<li><p>LOG4J</p>
<p>可以使用配置文件进行配置</p>
</li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><strong>为什么需要分页？</strong></p>
<ul>
<li>数据量太大，需要分页展示</li>
<li>减少数据的处理量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT startIndex, pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT pageSize;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserListByLimit</span><span class="params">(HashMap&lt;String, Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user LIMIT #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><ol>
<li>解耦</li>
<li>定义与实现的分离</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">  Blog <span class="title function_">selectBlog</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。</p>
<p>因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>使用注解实现 CUD 的时候，需要使用 <code>autoCommit = true</code></p>
<p><strong>@Param</strong></p>
<ol>
<li>基本类型的参数或则 String 类型，需要加上</li>
<li>引用类型不需要加</li>
</ol>
<h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>自动生成方法。</p>
<p>可以放在类上，也可以放在字段上</p>
<blockquote>
<p>@Data 无参构造、Set、get、toString、hashCode、equals</p>
<p>@AllArgsConstructor 创建含有全部参数的构造方法</p>
<p>@NoArgsConstructor 创建无参构造</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="复杂查询环境的搭建"><a href="#复杂查询环境的搭建" class="headerlink" title="复杂查询环境的搭建"></a>复杂查询环境的搭建</h2><p>数据库结构：</p>
<p>Student 含有 Teacher 的外键</p>
<img src="/.com//image-20220104154243206.png" alt="image-20220104154243206" style="zoom:50%;">

<p>复杂属性的查询</p>
<ol>
<li>对象：association</li>
<li>集合：collection</li>
</ol>
<h3 id="多对一（学生-gt-学生-老师）"><a href="#多对一（学生-gt-学生-老师）" class="headerlink" title="多对一（学生 -&gt; 学生 + 老师）"></a>多对一（学生 -&gt; 学生 + 老师）</h3><p>查询所有学生信息，以及对应老师的信息</p>
<p>结构中包含另一个类</p>
<p><code>javaType</code> 表示一个具体的对象</p>
<ol>
<li><p>子查询</p>
<p>里面的 properties 都是 Student 的属性</p>
<p>内嵌 <code>select</code> 字段，调用其他函数，函数的入口是 <code>column</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.teacher WHERE id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>连表查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ttid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    SELECT s.id sid,</span><br><span class="line">    s.name sname,</span><br><span class="line">    t.id ttid,</span><br><span class="line">    t.name tname</span><br><span class="line">    FROM mybatis.student s,</span><br><span class="line">    mybatis.teacher t</span><br><span class="line">    WHERE s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="一对多（老师-gt-老师-学生）"><a href="#一对多（老师-gt-老师-学生）" class="headerlink" title="一对多（老师 -&gt; 老师 + 学生）"></a>一对多（老师 -&gt; 老师 + 学生）</h3><p>查询一个老师教授的全部学生</p>
<p>类中包含一个集合</p>
<ol>
<li>连表查询</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    SELECT t.id tid,</span><br><span class="line">           t.name tname,</span><br><span class="line">           s.id sid,</span><br><span class="line">           s.name sname</span><br><span class="line">    FROM mybatis.teacher t,</span><br><span class="line">         mybatis.student s</span><br><span class="line">    WHERE</span><br><span class="line">        t.id = #&#123;id&#125;</span><br><span class="line">        AND t.id = s.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>子查询</li>
</ol>
<h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。<strong>如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。</strong>利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>根据不同的条件获得不同的 SQL 语句。</p>
<p><strong>都需要一个永真的条件开始</strong></p>
<h3 id="sql-标签"><a href="#sql-标签" class="headerlink" title="sql 标签"></a>sql 标签</h3><p>用于复用一些 <code>sql</code> 片段。</p>
<ol>
<li>最好不要包含 <code>where、set</code> 标签</li>
<li>不要包含太复杂的 SQL</li>
</ol>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        AND id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ol>
<li>使用 map 传入参数</li>
<li>使用 state &#x3D; ‘ACTIVE’</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    WHERE 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        AND id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><p><strong>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。</strong></p>
<p>针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 <strong>switch</strong> 语句。</p>
<p>choose &lt;&#x3D;&gt; switch</p>
<p>when &lt;&#x3D;&gt; if, else if</p>
<p>otherwise &lt;&#x3D;&gt; default</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    WHERE 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            AND id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            AND name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND 1 = 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="where-trim-set"><a href="#where-trim-set" class="headerlink" title="where, trim, set"></a>where, trim, set</h3><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>用于解决出现前置 AND，OR 的情况</p>
<p><strong><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。</strong>而且，若子句的开头为 “AND” 或 “OR”，<strong><em>where</em> 元素也会将它们去除</strong>。</p>
<p>使用 <where> 优化上一段 XML 配置。</where></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">                AND id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                AND name = #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                AND 1 = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>用于解决<strong>动态更新语句</strong>的后置 <code>，</code>的情况。<strong>投影不能使用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>用于自定义匹配。</strong></p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>用于解决不定长条件。</p>
<p>这个元素也<strong>不会错误地添加多余的分隔符</strong>，看它多智能！</p>
<p>例如：需要查询学生 id 为 [1，2，3，…] 学生的全部信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mybatis.student <span class="keyword">WHERE</span> (id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<p>既可以用在<strong>选择</strong>中，也可以用在<strong>投影</strong>中。<strong>但是在投影中，需要使用 ${} 不知道为什么（</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;alist&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            $&#123;item&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;, &quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>当使用可迭代对象或者数组时，<strong>index 是当前迭代的序号，item 的值是本次迭代获取到的元素。</strong></p>
</li>
<li><p>当使用 Map 对象（或者 Map.Entry 对象的集合）时，<strong>index 是键，item 是值。</strong></p>
</li>
</ol>
<p>foreach 组合条件条件查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">getFileWithAttribute</span><span class="params">(<span class="meta">@Param(&quot;departmentList&quot;)</span> List&lt;String&gt; departmentList, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="type">int</span> limit)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getFileWithAttribute&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.experi.pojo.File&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM experiment.file</span><br><span class="line">    WHERE</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;departmentList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;department IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;, &quot;</span>&gt;</span></span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    AND #&#123;limit&#125; &gt;= file.attribute</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>问题：查询连接数据库，消耗资源</strong></p>
<p>可以将一次查询的结果缓存下来，再次查询相同数据的时候，直接取走缓存中的数据。<strong>提高查询效率，解决高并发系统的性能问题。</strong></p>
<p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  eviction=&quot;FIFO&quot;</span><br><span class="line">  flushInterval=&quot;60000&quot;</span><br><span class="line">  size=&quot;512&quot;</span><br><span class="line">  readOnly=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p>
<p>可用的<strong>清除策略</strong>有：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<p>默认的清除策略是 <strong>LRU</strong>。</p>
<p><strong>flushInterval</strong>（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是<strong>一个以毫秒为单位的合理时间量</strong>。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p>
<p><strong>size</strong>（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p>
<p><strong>readOnly</strong>（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p>
<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h2 id="javaJavaBean"><a href="#javaJavaBean" class="headerlink" title="javaJavaBean"></a>javaJavaBean</h2><p>JavaBean 是一种实体类</p>
<p>JavaBean 有特定的写法：</p>
<ul>
<li>必须有无参构造</li>
<li>属性必须私有化</li>
<li>必须有 get &#x2F; set 方法</li>
</ul>
<p>一般用于与数据库的字段做映射 ORM。Object Relational Mapping</p>
<p>ORM：对象属性映射</p>
<ul>
<li>表 -&gt; 类</li>
<li>字段 -&gt; 属性</li>
<li>行记录 -&gt; 对象</li>
</ul>
<h2 id="Spring-MVC-前置知识"><a href="#Spring-MVC-前置知识" class="headerlink" title="Spring MVC 前置知识"></a>Spring MVC 前置知识</h2><h3 id="Controller-amp-ResquestMapping"><a href="#Controller-amp-ResquestMapping" class="headerlink" title="Controller &amp; ResquestMapping"></a>Controller &amp; ResquestMapping</h3><p>本质还是 Servlet</p>
<p>传递参数需要使用 Model 对象，调用 <code>addAttribute </code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用注解在 Spring 中自动注册 Controller</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的 URL</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 将返回的信息放在 Model 中</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后跳转到 XXXX.hello.html，Spring 实现自动拼接</span></span><br><span class="line">        <span class="comment">// 只需要将 .html 放在 templates 下即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a>Restful 风格</h3><p>使用 Restful 风格可以让 URL 变得结构清晰</p>
<p>不使用 Restful：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello?a=1&amp;b=2</span></span><br></pre></td></tr></table></figure>

<p>使用 Restful:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello/1/2</span></span><br></pre></td></tr></table></figure>

<p>实现 Restful 风格：</p>
<p>需要使用 <code>@PathVariable</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现转发和重定向"><a href="#实现转发和重定向" class="headerlink" title="实现转发和重定向"></a>实现转发和重定向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forword</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forword</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// redirect</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取前端数据-amp-数据回显"><a href="#获取前端数据-amp-数据回显" class="headerlink" title="获取前端数据 &amp; 数据回显"></a>获取前端数据 &amp; 数据回显</h3><p>servlet 中使用 getParam 参数</p>
<h4 id="获取前端数据"><a href="#获取前端数据" class="headerlink" title="获取前端数据"></a>获取前端数据</h4><ol>
<li><p>通过 URL 之后的参数获取。</p>
<p><strong>Restful</strong></p>
<p>@RequsetMapping(“&#x2F;hello&#x2F;{a}&#x2F;{b}”)</p>
<p>@ParamVarible</p>
<p>使用 ？传递参数</p>
<p>@RequestParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello/1/2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>​	如果前端传递参数和接受的参数不同的时候，可以使用 <code>@RequestParam(&quot;alias&quot;)</code> ，<strong>最好都加上</strong></p>
<ol start="2">
<li><p>前端传递 Class</p>
<p>直接使用 JavaBean，即可接受，接受失败返回 null</p>
<p><strong>如果为添加表单的话，建议使用 POST 方法，@PostMapping 这样就可以接收到 Class 参数。并且顺序无关。</strong></p>
</li>
</ol>
<h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p><a class="link" href="https://www.yisu.com/zixun/216138.html">详解SpringMVC如何进行数据回显 - 编程语言 - 亿速云 (yisu.com)<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li>使用参数</li>
<li>使用 ModelMap</li>
<li>使用 Model</li>
</ol>
<p><img src="/.com//image-20220105222619527.png" alt="image-20220105222619527"></p>
<h2 id="微服务阶段"><a href="#微服务阶段" class="headerlink" title="微服务阶段"></a>微服务阶段</h2><ol>
<li>JavaSE ：oop</li>
<li>Mysql ：持久化</li>
<li>HTML, CSS, JS：视图层</li>
<li>JavaWeb ：开发 MVC 三层架构的网站</li>
<li>SSM ：Spring + Spring MVC + MyBatis 框架，简化开发流程，配置较为复杂</li>
</ol>
<p><strong>war：tomcat 运行</strong></p>
<p><strong>jar：内嵌 tomcat</strong></p>
<h3 id="该怎么学"><a href="#该怎么学" class="headerlink" title="该怎么学"></a>该怎么学</h3><p>Spring Boot：</p>
<ol>
<li>是什么</li>
<li>配置如何编写，yaml</li>
<li><strong>自动装配原理</strong></li>
<li>集成 Web 开发，SSM</li>
<li>集成数据库 Druid</li>
<li>分布式开发</li>
<li>接口文档</li>
<li>任务调度</li>
</ol>
<h2 id="什么是-Spring-Boot"><a href="#什么是-Spring-Boot" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h2><h3 id="什么是-Spring"><a href="#什么是-Spring" class="headerlink" title="什么是 Spring"></a>什么是 Spring</h3><p>容器，为了解决企业级应用开发的复杂性创建的。</p>
<h3 id="什么是-Spring-Boot-1"><a href="#什么是-Spring-Boot-1" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h3><p>JavaWeb：Servlet + Tomcat</p>
<p>Spring Boot 就是一个 JavaWeb 的框架。<strong>约定大于配置</strong>。</p>
<h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><p>将服务拆分成很多小的模块。</p>
<h3 id="第一个-Spring-Boot-程序"><a href="#第一个-Spring-Boot-程序" class="headerlink" title="第一个 Spring Boot 程序"></a>第一个 Spring Boot 程序</h3><p>Controller 层用来写接口</p>
<p>通过 Maven 的 Package 就可以实现打包。使用 <code>java -jar XXX.jar</code> 就可以运行。</p>
<h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><p>pom.xml 中 spring-boot-dependencies 包含了核心依赖。因此编写依赖的时候，不需要指定具体的版本。</p>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标注这个类是一个 SpringBoot 的应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloworldApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将 SpringBoot 程序启动</span></span><br><span class="line">        SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h2><p><code>application.*</code></p>
<h3 id="什么是-YAML-文件"><a href="#什么是-YAML-文件" class="headerlink" title="什么是 YAML 文件"></a>什么是 YAML 文件</h3><p>修改 SpringBoot 自动配置的默认值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 普通的 key-value</span></span><br><span class="line"><span class="string">name=</span> <span class="string">auggie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">auggie</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">auggie</span>, <span class="attr">age:</span> <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">brid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">pet:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">brid</span>]</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>YAML 可以直接给实体类注入值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dogdog</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>可以包含<code>$&#123;random.int&#125; $&#123;random.uuid&#125;</code> 来产生随机数</p>
<p><code>$&#123;person.hello: hello&#125;</code> 如果 <code>person.hello</code> 存在，则为 <code>person.hello</code>；不然为 hello</p>
<ol start="2">
<li>一般使用 @Value 给实体类赋值</li>
</ol>
<p>可以使用 YAML 配置端口：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>



<h3 id="JSR303-校验"><a href="#JSR303-校验" class="headerlink" title="JSR303 校验"></a>JSR303 校验</h3><p>应用：后端实现前端 <code>input</code> 标签中的<strong>校验</strong>功能。</p>
<p>例如：url，email 的校验。</p>
<p>需要导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加上注解即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Email()</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不正确，则会报错。</p>
<p><a class="link" href="https://blog.csdn.net/weixin_44440642/article/details/106335653">JSR303校验<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="多环境配置以及配置文件位置"><a href="#多环境配置以及配置文件位置" class="headerlink" title="多环境配置以及配置文件位置"></a>多环境配置以及配置文件位置</h3><p><code>application.yaml</code> 文件可以放在：(优先级从高到低)</p>
<p><img src="/.com//image-20220105201738841.png" alt="image-20220105201738841"></p>
<h2 id="SpringBoot-Web-开发"><a href="#SpringBoot-Web-开发" class="headerlink" title="SpringBoot Web 开发"></a>SpringBoot Web 开发</h2><p>Controller：@Controller</p>
<p>Dao：@Repository，使用 Dao 层，需要加上 @Autowired 注解</p>
<h3 id="静态资源的导入"><a href="#静态资源的导入" class="headerlink" title="静态资源的导入"></a>静态资源的导入</h3><p>放在 <code>resources/[public, resources, static]</code> 都行</p>
<p>其中优先级从高到低</p>
<ol>
<li>resources：存放上传文件</li>
<li>static：存放静态资源，图片</li>
<li>public：存放公共资源，大家都会访问的 js</li>
</ol>
<h3 id="首页和图标的定制"><a href="#首页和图标的定制" class="headerlink" title="首页和图标的定制"></a>首页和图标的定制</h3><p>templates 下的页面，只能通过 Controller 下面跳转。</p>
<h3 id="首页的定制"><a href="#首页的定制" class="headerlink" title="首页的定制"></a>首页的定制</h3><p>自定义 <code>index.html</code> 即可</p>
<h3 id="图标自定义"><a href="#图标自定义" class="headerlink" title="图标自定义"></a>图标自定义</h3><ol>
<li>创建 <code>/**/favicon.ico</code> </li>
<li>在 YAML 中创建 <code>spring.mvc.favicon.enable: false</code></li>
</ol>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>写一个模板，可以生成动态页面&#x2F;</p>
<p><img src="/.com//image-20220105222853586.png" alt="image-20220105222853586"></p>
<p>Maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将 html 存放在 templates 目录下即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Thymeleaf-常见语法"><a href="#Thymeleaf-常见语法" class="headerlink" title="Thymeleaf 常见语法"></a>Thymeleaf 常见语法</h4><p><a class="link" href="https://blog.csdn.net/qq_40693171/article/details/107008457?ops_request_misc=%7B%22request_id%22:%22164138353216780366591034%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164138353216780366591034&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107008457.first_rank_v2_pc_rank_v29&utm_term=thymeleaf&spm=1018.2226.3001.4187">Thymeleaf<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><h3 id="首页搭建"><a href="#首页搭建" class="headerlink" title="首页搭建"></a>首页搭建</h3><h4 id="首页跳转的实现"><a href="#首页跳转的实现" class="headerlink" title="首页跳转的实现"></a>首页跳转的实现</h4><ol>
<li><p>可以使用 RequestMappering 跳转</p>
</li>
<li><p>也可以使用 MvcConfig 来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="首页配置"><a href="#首页配置" class="headerlink" title="首页配置"></a>首页配置</h4><ol>
<li>将 html 放在 templates 下，将 css, js 放在 static 下</li>
<li><strong>html 中需要加入 thymeleaf 的标签，需要加上 thymeleaf 的超链接标签</strong></li>
</ol>
<h4 id="首页密码登陆"><a href="#首页密码登陆" class="headerlink" title="首页密码登陆"></a>首页密码登陆</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当有信息回写的时候，才会触发。</p>
<h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><p>实现 <code>HandlerInterceptor</code> 的接口。</p>
<p>登陆成功之后，应该有用户的 session。</p>
<ol>
<li>拦截器代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;userInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 类似 Model 的作用</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;please login first&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response); <span class="comment">// 转发请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>需要在 login 代码中添加 <code>HttpSession session</code>，然后给 session 添加值</p>
</li>
<li><p>需要在 MvcConfig 中配置拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceptor</span>())</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/sys/*&quot;</span>, <span class="string">&quot;/servlet/*&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/servlet/login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>html 取出 session 的值，需要 <code>&lt;p&gt;hello, [[$&#123;session.userInfo&#125;]]&lt;/p&gt;</code> ，使用 [[${}]] 来操作。</p>
</li>
</ol>
<h4 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h4><h5 id="R"><a href="#R" class="headerlink" title="R"></a>R</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-strip table-sm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getDepartment()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="CUD"><a href="#CUD" class="headerlink" title="CUD"></a>CUD</h5><p>需要使用 form 表单。如果使用 JavaBean 传递参数的话，建议使用 @PostMapping 接受参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/servlet/update&quot;)</span></span><br><span class="line"><span class="comment">// 从前端获取到参数</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">employeeUpdate</span><span class="params">(<span class="type">int</span> id, Employee employee)</span> &#123;</span><br><span class="line">    <span class="comment">// Controller 传递给 service / dao 层</span></span><br><span class="line">    employeeDao.updateEmployee(id, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/sys/home.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>跳转、action、重定向全部都是经过 servlet</strong></p>
<h4 id="处理-404-x2F-500"><a href="#处理-404-x2F-500" class="headerlink" title="处理 404 &#x2F; 500"></a>处理 404 &#x2F; 500</h4><p>只需要在 <code>templates</code> 下建立 <code>error</code> 文件夹。然后将 404 &#x2F; 500 放在该文件夹下即可。</p>
<h2 id="集成数据库"><a href="#集成数据库" class="headerlink" title="集成数据库"></a>集成数据库</h2><p>添加驱动</p>
<p><img src="/.com//image-20220106202050909.png" alt="image-20220106202050909"></p>
<ol>
<li><p>配置数据库连接文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>如果出错的话，需要添加时区。</p>
<p>自动产生对象 <code>datasource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>整合 Druid 数据源</p>
<p>导入 Maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置 YAML</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<p>配置 Druid</p>
<p><strong>不太想配（（（（</strong></p>
</li>
<li><p>MyBatis</p>
<p>Maven 配置，帮助 Spring Boot 快速配置 MyBatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line"><span class="comment"># 整合 mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.databases.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/Mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.databases.Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DAO：UserMapper 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">// 注解表示这是一个 mybatis 的 mapper 类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">// 注解表示这是一个 dao 层的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryStudentList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Controller：StudentController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = userMapper.queryStudentList();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache Shiro 是 Java 的一个安全框架。Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。这不就是我们想要的嘛，而且 Shiro 的 API 也是非常简单；</p>
<ol>
<li><p>导入 maven 依赖</p>
</li>
<li><p>编写 shiro.ini 配置文件</p>
</li>
<li><p>SQL 使用对象传递参数</p>
</li>
</ol>
<h2 id="返回-response"><a href="#返回-response" class="headerlink" title="返回 response"></a>返回 response</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/servlet/api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理 &amp; 文件管理 &amp; IO 管理</title>
    <url>/2022/04/18/os/</url>
    <content><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>&#x3D;&#x3D;问题：缓和 CPU 和磁盘之间的速度矛盾&#x3D;&#x3D;</p>
<p>解决：引入内存</p>
<p>&#x3D;&#x3D;为什么需要内存管理？&#x3D;&#x3D;</p>
<p><strong>为了更好的支持多道程序并发执行</strong>。引入多道程序的并发执行之后，进程之间共享的不仅仅是处理机，还有内存。若不对内存进行管理，容易导致内存数据混乱。限制程序的并发性。</p>
<p><strong>内存管理的主要功能：</strong>内存分配、 内存保护、 地址映射和内存扩充。 </p>
<p><strong>主要任务：</strong></p>
<ul>
<li>内存分配：为每道程序分配内存</li>
<li>内存保护：确保每道用户程序都只能在自己的内存空间里运行，彼此互不干扰。</li>
<li>地址映射：将地址空间的逻辑地址转换为内存空间与相对应的物理地址。</li>
<li>内存扩充：用于实现请求调用功能，置换功能等</li>
</ul>
<h2 id="程序的执行过程"><a href="#程序的执行过程" class="headerlink" title="程序的执行过程"></a>程序的执行过程</h2><p>预处理 -&gt; 编译 -&gt; 汇编 -&gt; <strong>链接（形成完成的逻辑地址）</strong> -&gt; 装入</p>
<blockquote>
<p>装入</p>
</blockquote>
<ul>
<li><p>绝对装入</p>
<p>在<strong>编译</strong>时，直接产生绝对地址</p>
<p>缺点：只适用于单道程序环境</p>
</li>
<li><p>静态重定位 可重定位装入</p>
<p>编译和链接的时候，都是用的是相对地址。在<strong>装入</strong>时，产生绝对地址</p>
<p>缺点：</p>
<ul>
<li>装入内存时，就需要分配程序所要求的全部内存空间。没有足够内存时，不能分配</li>
<li>运行时不能移动</li>
</ul>
</li>
<li><p>动态重定位 动态运行时装入</p>
<p><strong>程序运行</strong>时，产生绝对地址。需要重定位寄存器的支持</p>
<p>优点：允许程序在内存中发生移动，可以实现紧凑</p>
</li>
</ul>
<blockquote>
<p>链接</p>
</blockquote>
<ul>
<li><p>静态链接</p>
<p>在链接程序中，直接完成链接</p>
</li>
<li><p>装入时动态链接</p>
<p>边装入边链接</p>
</li>
<li><p>运行时动态链接</p>
<p>程序执行时动态链接，<strong>以段为基础</strong></p>
</li>
</ul>
<h2 id="内存分配方式"><a href="#内存分配方式" class="headerlink" title="内存分配方式"></a>内存分配方式</h2><ul>
<li>连续分配	<ul>
<li>单一连续分配</li>
<li>固定分区分配</li>
<li>动态分区分配<ul>
<li>首次适应</li>
<li>循环首次适应</li>
<li>最佳适应</li>
<li>最坏适应</li>
<li>快速适应</li>
<li>伙伴系统</li>
</ul>
</li>
</ul>
</li>
<li>对换</li>
<li>离散分配<ul>
<li>基本分页存储管理</li>
<li>基本分段存储管理</li>
<li>请求分页存储管理</li>
<li>请求分段存储管理</li>
</ul>
</li>
</ul>
<h3 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h3><blockquote>
<p>单一连续分配</p>
</blockquote>
<p>内存被分为系统区和用户区。系统区在低地址部分，用户区在高地址部分。</p>
<p>优点：</p>
<ul>
<li><strong>实现简单</strong></li>
<li>无外部碎片</li>
<li><strong>可以采用覆盖技术扩充内存</strong> </li>
<li>不一定需要内存保护</li>
</ul>
<p>缺点：</p>
<ul>
<li>只能用于当用户、单任务操作系统</li>
<li>有内部碎片</li>
<li>存储器利用效率极低</li>
</ul>
<blockquote>
<p>固定分区分配</p>
</blockquote>
<p><strong>一个进程只能选择一个分区</strong></p>
<p>分区方式：</p>
<ul>
<li>分区大小相等：缺乏灵活性</li>
<li>分区大小不等：增加了灵活性，可以满足不同大小进程需求</li>
</ul>
<p>优点：</p>
<ul>
<li>实现简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>当用户程序过大时，可能所有分区都不能满足需求</li>
<li>产生内部碎片，内存利用率低</li>
</ul>
<blockquote>
<p>动态分区分配 PPT P55</p>
</blockquote>
<ul>
<li><p>用什么数据结构记录空闲分区情况</p>
<ul>
<li>空闲分区表</li>
<li>空闲分区链</li>
</ul>
</li>
<li><p>分配算法</p>
<ul>
<li>首次适应<ul>
<li>空闲分区表以<strong>地址递增</strong>的次序排列</li>
<li>优点：优先利用内存低址部分的内存空间,保留了高址部分的大空闲区</li>
<li>缺点：<ul>
<li>低址部分不断划分，产生小碎片（内存碎块、零头）；</li>
<li>每次查找从低址部分开始，增加了查找的开销</li>
</ul>
</li>
</ul>
</li>
<li>循环首次适应<ul>
<li>从上次找到的空闲分区的<strong>下一个空闲分区开始查找</strong></li>
<li>优点：使内存空闲分区分布均匀，减少查找的开销</li>
<li>缺点：缺乏大的空闲分区</li>
</ul>
</li>
<li>最佳适应<ul>
<li>按其容量以<strong>从小到大</strong>的顺序</li>
<li>缺点：产生许多难以利用的小空闲区</li>
</ul>
</li>
<li>最坏适应<ul>
<li>按其容量以<strong>从大到小</strong>的顺序形成一空闲分区链</li>
<li>优点：剩下的空闲区还可以利用，同时查找效率很高。</li>
<li>缺点：缺乏大的空闲分区。</li>
</ul>
</li>
<li>快速适应（基于索引）<ul>
<li>问题：基于顺序搜索的动态分区分配算法，不适用于大型的系统。</li>
<li>引入：索引</li>
<li>根据其容量大小进行分类</li>
<li>优点：查找效率高，也不会产生内存碎片。</li>
<li>缺点：在分区归还主存时算法复杂，系统开销较大。</li>
</ul>
</li>
<li>伙伴系统（基于索引）<ul>
<li>按照 2 的整数幂将空闲分区分类</li>
<li>初始：整一个空间都是一块</li>
<li>分配：<ul>
<li>如果存在空闲分区，则分配</li>
<li>不然，向上查找分区，并且分裂</li>
</ul>
</li>
</ul>
</li>
<li>哈希算法<ul>
<li>通过 hash 实现，快速计算在 hash 表中的位置。</li>
</ul>
</li>
</ul>
<p>总结：</p>
<p><img src="/.com//image-20220419122112789.png" alt="image-20220419122112789"></p>
</li>
<li><p>回收算法</p>
<p>4 种情况</p>
</li>
</ul>
<p>优点：无内部碎片，有外部碎片</p>
<h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>&#x3D;&#x3D;问题：在小的内存空间运行大作业&#x3D;&#x3D;</p>
<p>覆盖是由程序员实现的，操作系统根据程序员提供的覆盖结构来完成<strong>程序段之间的覆盖</strong>。</p>
<p><img src="/.com//SouthEast.png" alt="图示"></p>
<p>子程序 C 运行完成之后，子程序 B 将其覆盖。</p>
<p>优点：扩充内存</p>
<p>缺点：对用户不透明，增加了用户负担。</p>
<h3 id="对换（交换）"><a href="#对换（交换）" class="headerlink" title="对换（交换）"></a>对换（交换）</h3><p>&#x3D;&#x3D;问题：在内存非常小的计算机上运行多道程序&#x3D;&#x3D;</p>
<p>条件：需要 IO 速度较高的外存</p>
<p>将内存中暂时不能运行或者暂时不用的数据和程序换出到外存上面。</p>
<p><strong>类型</strong></p>
<ol>
<li>整体对换：以进程为单位对换</li>
<li>部分对换：以页或者段为单位对换</li>
</ol>
<p>外存划分为：文件区、对换区</p>
<p><img src="/.com//image-20220419123417333.png" alt="image-20220419123417333"></p>
<p>优点：扩充内存</p>
<p><strong>覆盖与对换的区别</strong></p>
<ul>
<li>覆盖可<strong>减少一个进程运行所需的空间</strong>。对换可让整个进程暂存于外存中，<strong>让出内存空间</strong>。</li>
<li>覆盖是由<strong>程序员实现</strong>的，操作系统根据程序员提供的覆盖结构来完成程序段之间的覆盖。对换技术<strong>不要求程序员给出程序段之间的覆盖结构</strong>。</li>
<li>覆盖技术主要在<strong>同一个</strong>作业或进程中进行。对换主要在作业或进程<strong>之间</strong>进行。</li>
</ul>
<h3 id="离散分配"><a href="#离散分配" class="headerlink" title="离散分配"></a>离散分配</h3><h4 id="分页存储管理方式"><a href="#分页存储管理方式" class="headerlink" title="分页存储管理方式"></a>分页存储管理方式</h4><p>&#x3D;&#x3D;问题：固定分区分配会产生内部碎片，动态分区分配会产生外部碎片。对内存的利用率较低。同时希望尽量避免碎片的产生。&#x3D;&#x3D;</p>
<blockquote>
<p>什么是基本分页存储管理方式</p>
</blockquote>
<ul>
<li><p>不具备页面对换功能</p>
</li>
<li><p>不具有支持实现虚拟存储器的功能</p>
</li>
<li><p>要求把每个作业全部装入内存后方能运行</p>
</li>
</ul>
<blockquote>
<p>页面大小的选择</p>
</blockquote>
<p>小：</p>
<ul>
<li>内碎片小，内存利用率高</li>
<li>页表过长，占大量内存，管理开销大</li>
</ul>
<p>大：</p>
<ul>
<li>页表短，管理开销小</li>
<li>内碎片大，内存利用率低</li>
</ul>
<p>页面大小应当<strong>适中</strong></p>
<blockquote>
<p>地址变换机构</p>
</blockquote>
<ol>
<li><p>基本地址变换机构</p>
<p>需要页表寄存器 PTR</p>
<ol>
<li>判断页号是否越界</li>
<li>计算实际物理地址</li>
</ol>
<p>通过硬件自动完成</p>
<p>缺点：</p>
<ol>
<li>每次访存都需要进行地址变换（查询页表），降低速度 -&gt; TLB</li>
<li>每个进程引入页表，页表不能太大 -&gt; 多级页表</li>
</ol>
</li>
<li><p>具有快表的变换机构</p>
<p>需要快表（联想寄存器）</p>
<p>原理：程序的局部性</p>
</li>
<li><p>两级页表</p>
<p>&#x3D;&#x3D;问题：大页表占用大的连续存储空间&#x3D;&#x3D;</p>
<p>顶级页表 &#x3D; 页目录表 &#x3D; 外层页表</p>
<p>&#x3D;&#x3D;问题：没有必要让整个页表常驻内存，因为进程在一段时 间内可能只需要访问某几个特定的页面。&#x3D;&#x3D;</p>
<p>解决：类似于虚拟存储器，增加一位，是否在内存中。</p>
</li>
</ol>
<blockquote>
<p>优缺点</p>
</blockquote>
<p>优点：分页从根本上克服了外零头（地址空间、物理空间都分割）。<strong>内存利用率提高</strong>。</p>
<p>缺点：逻辑完整的信息分到不同的页面，<strong>执行速度降低</strong></p>
<h4 id="分段存储器"><a href="#分段存储器" class="headerlink" title="分段存储器"></a>分段存储器</h4><p>问题：克服分页的缺点</p>
<p>目的：满足用户的需求</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>便于编程</p>
<p><strong>用户</strong>常把自己的作业按逻辑关系划分成若干个段，每段都有自己的名字，且都从零开始编址。</p>
</li>
<li><p>信息共享</p>
<p>两个作业的段表项指向同一个共享的段。<strong>可重入代码</strong>可以共享（不属于临界资源）。</p>
</li>
<li><p>分段保护</p>
<ul>
<li>存取控制保护</li>
<li>地址越界保护</li>
</ul>
</li>
<li><p>动态链接</p>
</li>
<li><p>动态增长</p>
</li>
</ul>
<blockquote>
<p>特点</p>
</blockquote>
<p>段式的地址空间是二维的，因为没有办法给出一个整数便确定对应的物理地址。而<strong>需要显示的给出（段号，段内偏移量）</strong></p>
<blockquote>
<p>分段与分页的主要区别</p>
</blockquote>
<p>相同点：</p>
<ul>
<li>采用离散分配方式，通过地址映射机构实现地址变换</li>
</ul>
<p>不同点：</p>
<ul>
<li><strong>页是信息的物理单位</strong>，分页是为了满足系统的需要；<strong>段是信息的逻辑单位</strong>，含有意义相对完整的信息，是为了满足用户的需要。</li>
<li><strong>页的大小固定且由系统确定</strong>，由系统把逻辑地址分为页号和页内地址，由<strong>机器硬件实现</strong>；<strong>段的长度不固定</strong>，取决于用户程序，<strong>编译程序</strong>对源程序编译时根据信息的性质划分。</li>
<li>分页的作业地址空间是<strong>一维</strong>的；分段的作业地址空间是<strong>二维</strong>的,需要给出段名和段内地址。</li>
</ul>
<h4 id="段页式存储器"><a href="#段页式存储器" class="headerlink" title="段页式存储器"></a>段页式存储器</h4><blockquote>
<p>特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>分散存储，内存利用率较高</li>
<li>很好的满足用户需求，便于代码或数据共享，支持动态链接等</li>
</ul>
<p>缺点：</p>
<ul>
<li>一次访问转换成了三次访问</li>
</ul>
<p><img src="/.com//image-20220419145201131.png" alt="image-20220419145201131"></p>
<h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3><blockquote>
<p>传统分配方式的特点</p>
</blockquote>
<ul>
<li>一次性：作业必须一次性全部装入内存后才能开始运行<ul>
<li>作业很大的时候，没有办法装入内存 -&gt; 覆盖</li>
<li>大量作业要求运行时，无法容纳所有作业，因此只有少量作业能运行，导致<strong>多道程序并发度下降</strong>。 -&gt; 对换</li>
</ul>
</li>
<li>驻留性：一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。<strong>浪费内存资源</strong></li>
</ul>
<blockquote>
<p>思想 – 局部性原理</p>
</blockquote>
<p>TLB，cache 的思想</p>
<ul>
<li>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行</li>
<li>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。</li>
</ul>
<blockquote>
<p>虚拟存储器</p>
</blockquote>
<p>定义：指具有<strong>请求调入</strong>（不在内存中）功能和<strong>置换</strong>（内存满了）功能，能从逻辑上对内存容量加以扩充的一种存储器系统。 -&gt; 建立在<strong>离散分配</strong>的基础上</p>
<p><strong>特点</strong>：</p>
<ul>
<li>多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。</li>
<li>对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入、换出。 </li>
<li>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大 于实际的容量。</li>
</ul>
<p><strong>容量</strong></p>
<ul>
<li>虚拟内存的<strong>最大容量</strong>是由计算机的<strong>地址结构</strong>（CPU寻址范围）确定的</li>
<li>虚拟内存的<strong>实际容量</strong> &#x3D;min（内存 + 外存，CPU寻址范围）</li>
</ul>
<blockquote>
<p>硬件支持 P168 PPT P14</p>
</blockquote>
<ol>
<li><p>表机制</p>
<p><img src="/.com//image-20220419150330112.png" alt="image-20220419150330112"></p>
<p><img src="/.com//image-20220419153632043.png" alt="image-20220419153632043"></p>
<p>段式具有<strong>增补位</strong>，用于表示该段是否动态增长。</p>
</li>
<li><p>缺页&#x2F;段中断机构</p>
</li>
<li><p>地址变换机构</p>
</li>
<li><p>段的共享与保护 PPT P70</p>
<ol>
<li><p>共享：类似于索引节点的 DAG 图</p>
</li>
<li><p>保护</p>
<ol>
<li><p>越界检查</p>
</li>
<li><p>存取控制检查</p>
</li>
<li><p>环保护机构</p>
<p>OS 位于 0 环</p>
<p><img src="/.com//image-20220419154843734.png" alt="image-20220419154843734"></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>内存分配策略 P171</p>
</blockquote>
<ul>
<li><p><strong>最小物理块数的确定</strong>：保证进程正常运行所需的最小物理块数</p>
</li>
<li><p><strong>物理块分配策略</strong>：</p>
<ul>
<li><p>固定分配局部置换</p>
<p>为进程分配的物理块数在整个运行期间都<strong>不再改变</strong>。</p>
<p>缺点：难以确定每个进程分配的物理块数，太少导致频繁缺页中断；太多，导致资源利用率下降</p>
</li>
<li><p>可变分配全局置换</p>
<p>当进程发生缺页，若系统中有 空闲的物理块，则分配一个物理块并装入缺页；</p>
<p>优点：可以动态增加物理块数</p>
<p>缺点：盲目增加物理块，导致并发能力下降；被选中的进程缺页率增加</p>
</li>
<li><p>可变分配局部置换</p>
<p>若某个进程发生缺页，则只能将自己的某个内存页换出。OS <strong>根据缺页率</strong>进行物理块分配的调整</p>
</li>
</ul>
</li>
<li><p><strong>物理块的分配算法</strong>：</p>
<ul>
<li>平均分配算法<ul>
<li>将系统中所有可供分配的物理块，平均分配给各个进程。</li>
<li>缺点: <strong>未考虑各进程本身的大小</strong></li>
</ul>
</li>
<li>按比例分配算法<ul>
<li>根据<strong>进程的大小</strong>按比例分配物理块。</li>
</ul>
</li>
<li>考虑优先权的分配算法<ul>
<li>在实际应用中，为了<strong>照顾重要的、急迫的作业</strong>尽快完成，应为它<strong>分配较多</strong>的内存空间</li>
<li>算法：<ul>
<li>一部分按比例分配给各进程；</li>
<li>一部分则根据各进程的优先权，适当地增加其相应份额，分配给各进程</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>页面调入策略</p>
</blockquote>
<p><strong>何时调入页面</strong></p>
<ul>
<li>预调页策略<ul>
<li>主要用于进程的<strong>首次调入</strong>时，由<strong>程序员指出</strong>应该先调入哪些页。</li>
</ul>
</li>
<li>请求调页策略<ul>
<li>当程序在运行中需要访问某部分程序和数据时，若发现其所在的页面不在内存，便立即提出请求</li>
<li>优点：由请求调页策略所确定调入的页，<strong>一定会被访问</strong>；请求调页策略比较<strong>容易实现</strong></li>
<li>缺点：每次<strong>仅调入一页</strong>，需花费<strong>较大的系统开销</strong>，增加了磁盘 I&#x2F;O的启动频率。</li>
</ul>
</li>
</ul>
<p><strong>何处调入页面</strong></p>
<ul>
<li><p>系统拥有足够的对换区空间：可以<strong>全部从对换区调入所需页面</strong>，以提高调页速度</p>
<p><img src="/.com//image-20220419152036780.png" alt="image-20220419152036780"></p>
</li>
<li><p>系统缺少足够的对换区空间：</p>
<ul>
<li><strong>不会被修改的文件（不放入对换区）</strong>，直接从文件区调入；当换出这些页面时，因为未修改不用换出，再调入时仍从文件区调入。</li>
<li><strong>可能被修改的部分（放入对换区）</strong>，换出时需调到对换区，换入时从对换区调入；</li>
</ul>
<p><img src="/.com//image-20220419152050064.png" alt="image-20220419152050064"></p>
</li>
<li><p>UNIX 方式：</p>
<ul>
<li>第一次从文件区调入</li>
<li>再次使用的时候，从对换区调入</li>
</ul>
<p><img src="/.com//image-20220419152252225.png" alt="image-20220419152252225"></p>
</li>
</ul>
<blockquote>
<p>页面置换算法</p>
</blockquote>
<ul>
<li>OPT	<ul>
<li><strong>算法无法实现，但可评价其他算法</strong></li>
<li>优点：保证获得最低的缺页率</li>
<li>缺点：无法预知一个进程在内存的若干个页面，哪个在未来最长时间内不再被访问。</li>
</ul>
</li>
<li>FIFO<ul>
<li>Belady 异常——当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</li>
<li>只有 FIFO 会产生 Belady 异常</li>
</ul>
</li>
<li>LRU<ul>
<li>硬件实现：寄存器（最小值）、栈（栈顶）</li>
</ul>
</li>
<li>CLOCK<ul>
<li>最近未用算法（NRU，Not Recently Used）</li>
<li>算法：扫描访问位</li>
<li>操作系统还应考虑<strong>页面有没有被修改过</strong>。在其他条件都相同时，应<strong>优先淘汰没有修改过的页面</strong>，<strong>避免I&#x2F;O操作。</strong></li>
</ul>
</li>
</ul>
<p><img src="/.com//image-20220419152938106.png" alt="image-20220419152938106"></p>
<blockquote>
<p>抖动 &amp; 工作集 P184 PPT P60</p>
</blockquote>
<p><strong>定义</strong>：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动，或颠簸。</p>
<p><strong>原因</strong>：进程频繁访问的页面数目高于可用的物理块数（<strong>分配给进程的物理块不够</strong>）</p>
<p><strong>预防方法</strong></p>
<ul>
<li>采取可变分配局部置换</li>
<li>把工作集算法融入到处理机调度中</li>
<li>利用“L&#x3D;S”准则调节缺页率</li>
<li>选择暂停的进程</li>
</ul>
<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>文件系统的主要功能：</p>
<ul>
<li>对文件的基本操作</li>
<li>文件共享</li>
<li>文件保护</li>
<li>管理与磁盘的信息交换</li>
<li>完成逻辑结构 -&gt; 物理结构的转变</li>
</ul>
<p>文件系统结构：</p>
<p><img src="/.com//image-20220420105935784.png" alt="image-20220420105935784"></p>
<h2 id="文件系统的基本概念"><a href="#文件系统的基本概念" class="headerlink" title="文件系统的基本概念"></a>文件系统的基本概念</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件是存储在硬盘上的信息集合</p>
<blockquote>
<p>文件的组成：</p>
</blockquote>
<ul>
<li>数据项<ul>
<li>基本数据项</li>
<li>组合数据项</li>
</ul>
</li>
<li>记录：数据项的集合</li>
<li>文件：<ul>
<li>记录式文件：由相似的记录组成</li>
<li>流式文件：字符流文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>文件的属性</p>
</blockquote>
<ol>
<li>文件名</li>
<li>标识符</li>
<li>类型</li>
<li>位置</li>
</ol>
<blockquote>
<p>文件操作</p>
</blockquote>
<ol>
<li><p>文件的打开和关闭</p>
<p>将该文件的属性从外存拷贝到内存<strong>打开文件表</strong>的一个表目中，并将该表目的编号返回给用户。当用户需要操作的时候，可以利用系统返回的索引号向系统提出操作请求。关闭即关闭文件描述符</p>
</li>
<li><p>read write delete create</p>
</li>
</ol>
<h4 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h4><blockquote>
<p>无结构文件（流式文件）</p>
</blockquote>
<p>只能通过穷举搜索的方式。对基本信息单位操作不多的文件较适用于采用无结构文件。源程序文件、目标代码文件。</p>
<blockquote>
<p>有结构文件（记录式文件）</p>
</blockquote>
<ol>
<li><p>顺序文件</p>
<p>记录定长，顺序排列</p>
<ol>
<li>存储方式：顺序存储、链式存储</li>
<li>结构：串结构、顺序结构（排序）</li>
</ol>
</li>
<li><p>索引文件</p>
<p>解决：顺序文件存储可变长记录效率低的文件</p>
</li>
<li><p>索引顺序文件</p>
<p>解决：索引文件中一个记录对应一个表项，占用过多的额外空间</p>
<p>改进为：一个索引对应一组记录</p>
<p>可以优化查询效率</p>
</li>
<li><p>多级索引顺序文件</p>
</li>
</ol>
<h4 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h4><h5 id="文件分配方式（磁盘非空闲区的管理）"><a href="#文件分配方式（磁盘非空闲区的管理）" class="headerlink" title="文件分配方式（磁盘非空闲区的管理）"></a>文件分配方式（磁盘非空闲区的管理）</h5><blockquote>
<p>连续分配</p>
</blockquote>
<p>优点：1. 实现简单 2. 存取速度快</p>
<p>缺点：1. 文件长度不宜动态增长 2. 产生外部碎片</p>
<blockquote>
<p>链接分配</p>
</blockquote>
<p>&#x3D;&#x3D;问题：外部碎片和文件大小&#x3D;&#x3D;</p>
<ul>
<li><p>隐式链接：</p>
<ul>
<li>优点：方便文件的拓展，不会出现外部碎片。外存利用率高。</li>
<li>缺点：只支持顺序访问，<strong>不支持随机访问</strong>，查找效率低</li>
</ul>
</li>
<li><p>显式链接</p>
<ul>
<li>问题1：需要将物理块读入内存，查找效率低</li>
<li>解决1：引入 <code>FAT</code>，一个磁盘只有一个 FAT，开机的时候读入 FAT，常驻内存</li>
<li>问题2：指针需要消耗内存</li>
<li>解决2：将多个块并在一起，形成一个<code>簇</code></li>
<li>缺点：文件分配表需要消耗一定的内存</li>
<li>优点：支持随机访问和顺序访问。</li>
</ul>
</li>
</ul>
<blockquote>
<p>索引分配</p>
</blockquote>
<p>问题：</p>
<ul>
<li>不能支持高效的随机存取，需要在 FAT 中顺序查找</li>
<li>FAT 需要占用较大的内存空间</li>
</ul>
<p>优点：支持随机访问，文件拓展容易实现</p>
<p>缺点：索引表需要占用比较多的空间</p>
<ol>
<li>单级索引分配</li>
<li>多级索引分配<ol>
<li>解决：单级索引分配索引表过大的问题</li>
</ol>
</li>
<li>混合索引分配</li>
</ol>
<h5 id="文件存储空间管理（磁盘空闲区的管理）"><a href="#文件存储空间管理（磁盘空闲区的管理）" class="headerlink" title="文件存储空间管理（磁盘空闲区的管理）"></a>文件存储空间管理（磁盘空闲区的管理）</h5><ul>
<li><p>空闲表法</p>
</li>
<li><p>空闲链表法</p>
<ul>
<li>空闲盘块法</li>
<li>空闲盘区法</li>
</ul>
</li>
<li><p>位示图法</p>
</li>
<li><p>成组链接法</p>
<p>问题：空闲表法、空闲链表法不适用于大型文件系统。</p>
<p>解决：引入超级块</p>
<ul>
<li>需要读入内存，并且保持数据一致性</li>
</ul>
</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>解决：对文件实施有效的管理</p>
<ul>
<li><strong>实现 “按名存取” 基本功能</strong></li>
<li>提高对目录的检索速度</li>
<li>文件共享</li>
<li>允许文件重名</li>
</ul>
<blockquote>
<p>文件控制块 FDB</p>
</blockquote>
<p>用于描述和控制文件的数据结构。</p>
<p>描述了文件的文件名、物理地址、逻辑结构和物理结构。存取控制信息、使用信息</p>
<blockquote>
<p>目录结构</p>
</blockquote>
<ol>
<li><p>单级目录结构</p>
<p>优点：实现按名存取</p>
<p>缺点：不适用于多用户操作系统、查找速度慢、不允许重名</p>
</li>
<li><p>两级目录结构</p>
<p>优点：提高检索目录的速度、不同的用户目录中文件可以同名</p>
<p>缺点：无法文件共享</p>
</li>
<li><p>树形目录结构</p>
<p>引入相对路径的概念，减少了磁盘 IO 的次数</p>
<p>优点：可以很方便地对文件进行分类，层次结构清晰， 也能够更有效地进行文件的管理和保护。</p>
<p>缺点：不能实现文件共享</p>
</li>
<li><p>无环图目录结构</p>
<p>方面用户共享</p>
</li>
</ol>
<blockquote>
<p>索引节点</p>
</blockquote>
<p>问题：文件很多的时候，目录文件占用盘块</p>
<p>解决：文件名 + 文件描述信息，文件描述信息单独构成索引节点</p>
<p>使用 <code>stat filename</code> 或者 <code>ls -i</code> 可以查看索引节点</p>
<h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><ul>
<li><p>基于索引节点的共享方式（硬链接）</p>
</li>
<li><p>基于符号链的共享方式（软连接）</p>
</li>
</ul>
<h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><ul>
<li>口令保护：设置密码</li>
<li>加密保护：对文件加密，eg：异或加密</li>
<li>访问控制：chmod</li>
</ul>
<h2 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h2><ul>
<li>磁盘、磁道、扇区（块）</li>
<li>盘面、柱面(相对位置相同的磁道)</li>
</ul>
<p>磁盘读写时间 &#x3D; 寻道时间 + 延迟时间 + 传输时间</p>
<ul>
<li>寻道时间 &#x3D; 启动磁头时间 + 移动磁头的时间 （<strong>时间最长</strong>）</li>
<li>延迟时间 &#x3D; $\frac{1}{2r} &#x3D; \frac{T}{2}$</li>
<li>传出时间 &#x3D; $\frac{b}{N} \times \frac{1}{r}$</li>
</ul>
<ol>
<li><p>先来先服务 FCFS</p>
<p>优点：公平</p>
<p>缺点：FCFS 的性能很差</p>
</li>
<li><p>最短寻找时间优先 SSTF</p>
<p>优点：性能较好，平均寻道时间短</p>
<p>缺点：可能产生饥饿现象</p>
</li>
<li><p>扫描算法 SCAN 电梯算法</p>
<p>优点：性能较好，平均寻道时间较短，不会产生饥饿。</p>
<p>缺点：1. 只有到达需要访问的边界才能改变方向 2. <strong>对各个位置响应的频率不平均</strong></p>
</li>
<li><p>循环扫描算法 C-SCAN</p>
<p>优点：解决响应不平均的问题</p>
<p>缺点：平均寻道时间更长</p>
</li>
</ol>
<h2 id="文件系统维护命令"><a href="#文件系统维护命令" class="headerlink" title="文件系统维护命令"></a>文件系统维护命令</h2><ul>
<li><code>du</code>: 查看文件磁盘使用情况 <code>du [FILE]</code></li>
<li><code>df</code>: 查看文件所在磁盘剩余情况，<code>df [FILE]</code></li>
<li><code>free</code>: 查看系统的物理村内和虚拟内存的使用情况</li>
</ul>
<h1 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h1><h2 id="IO-系统"><a href="#IO-系统" class="headerlink" title="IO 系统"></a>IO 系统</h2><p>IO 设备：可以将数据输入到计算机，或者可以接受计算机输出数据的外部设备，属于计算机中的硬件部件</p>
<p>UNIX 将外部设备抽象成文件，用户可以使用与文件操作相同的方式对外部设备进行操作</p>
<ul>
<li>write：向外部设备写出数据</li>
<li>read：向外部设备读入数据</li>
</ul>
<p><strong>IO 系统的基本功能</strong></p>
<ul>
<li>隐藏物理设备的细节</li>
<li>与设备的无关性</li>
<li>提高处理及和 IO 设备的利用率</li>
<li>对 IO 设备进行控制：驱动</li>
<li>确保对设备的正确共享：独占设备（一段时间内一个）、共享设备（一个时刻一个）</li>
<li>错误处理</li>
</ul>
<p><strong>IO 软件的层次</strong></p>
<ol>
<li>用户层软件：实现与用户交互的接口</li>
<li>设备独立性软件：用户程序和驱动程序的统一接口</li>
<li>设备驱动程序：实现环境对设备发出指令</li>
<li>终端处理程序：保存 CPU 环境，装入中断处理</li>
</ol>
<blockquote>
<p>其中 2，3，4 属于操作系统的<strong>内核部分</strong>，即 IO 系统</p>
</blockquote>
<p><img src="/.com//image-20220418152350079.png" alt="image-20220418152350079"></p>
<blockquote>
<p>用户层软件</p>
</blockquote>
<p>功能：实现了与用户交互的接口（<strong>库函数</strong>），然后翻译成等价的<strong>系统调用</strong></p>
<blockquote>
<p>设备独立性软件</p>
</blockquote>
<p>功能：与硬件特性无关的功能几乎都在这一层实现</p>
<ul>
<li>向上提供统一的<strong>系统调用</strong>接口</li>
<li>设备保护：设置对设备文件的访问权限</li>
<li>差错处理：对设备的错误进行处理</li>
<li>设备的分配和回收</li>
<li>数据缓冲区管理</li>
<li>建立逻辑设备名到物理设备名的映射关系：逻辑设备表 LUT<ul>
<li>整个系统只设置一张 LUT，只适用与单用户操作系统，各个用户的逻辑设备名不能重复</li>
<li>为<strong>每个用户</strong>设置一张 LUT，存放在用户管理进程的 pcb 中，逻辑设备名可以重复</li>
<li>作用：记忆化进程使用的设备的映射关系</li>
</ul>
</li>
</ul>
<blockquote>
<p>驱动程序</p>
</blockquote>
<p>功能：将设备独立性软件的系统调用转化为具体操作</p>
<blockquote>
<p>中断处理程序</p>
</blockquote>
<p>计组中的中断处理程序</p>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>设备管理：设备独立性软件</li>
<li>涉及硬件的具体细节：设备驱动程序</li>
</ul>
<p><strong>设备与 CPU 之间的接口 – IO 控制器</strong></p>
<ul>
<li>与 CPU：数据、地址、控制线</li>
<li>与 设备：数据、状态、控制</li>
</ul>
<blockquote>
<p>功能 P197</p>
</blockquote>
<blockquote>
<p>组成：</p>
</blockquote>
<ul>
<li>与 CPU、设备的接口</li>
<li>数据寄存器：存储数据 <ul>
<li>CPU -&gt; 设备时，存储 CPU 的数据</li>
<li>设备 -&gt; CPU时，存储设备的数据</li>
</ul>
</li>
<li>控制寄存器：存储 CPU 发来的指令</li>
<li>状态寄存器</li>
<li>IO 逻辑：负责接受和识别 CPU 各种命令，对设备发出命令</li>
</ul>
<p><strong>内存映像IO</strong></p>
<p>问题：实现 CPU 和<strong>控制器</strong>交互</p>
<blockquote>
<p>利用特定的 IO 指令 （寄存器独立编址）</p>
</blockquote>
<p>使用不同的指令来对控制器操作</p>
<p>缺点：需要设置专门的 IO 指令来对控制器编址</p>
<blockquote>
<p>内存映像 IO （统一编址）</p>
</blockquote>
<p>将控制器和内存统一编址</p>
<p>优点：简化了指令。可以采用对进行操作的指令来对控制器操作</p>
<p><strong>IO 通道</strong></p>
<blockquote>
<p>什么是通道</p>
</blockquote>
<p>问题：虽然出现了控制器，但是 CPU 的负担依然很重</p>
<p>工作方式：CPU 向通道发送 IO 命令，通道执行通道程序，完成 IO 之后向 CPU 发出中断</p>
<p>与 CPU 的不同点：</p>
<ul>
<li>命令类型单一，仅能执行 IO 命令</li>
<li>没有自己的内存，通道程序存放在主存中</li>
</ul>
<blockquote>
<p>类型 P201</p>
</blockquote>
<ul>
<li><p>字节多路通道（字节传输）：是一种字节交叉方式工作的通道，采用多路分时复用 – 按时间片轮转方式共享主通道</p>
</li>
<li><p>数组选择通道（数组传输）：</p>
<ul>
<li>问题：字节多路通道不适用于连接高速设备</li>
<li>瓶颈：只有一个 IO 子通道，但是可以实现块传输</li>
<li>缺点：容易被一台设备独占，利用率低</li>
</ul>
</li>
<li><p>数组多路通道（数组传输）：</p>
<p>将上述两个技术结合在一起。使用于中高速的 IO 设备</p>
</li>
</ul>
<blockquote>
<p>瓶颈</p>
</blockquote>
<p>问题：由于<strong>通道价格昂贵</strong>，致使数量较少，使它成为I&#x2F;O系统的瓶颈 ，进而造成系统吞吐量的下降</p>
<p>解决：<strong>增加设备到主机间的通路</strong>而不增加通道</p>
<p><img src="/.com//image-20220418162042131.png" alt="image-20220418162042131"></p>
<h2 id="IO-控制方式"><a href="#IO-控制方式" class="headerlink" title="IO 控制方式"></a>IO 控制方式</h2><p>问题：如何告诉设备，CPU 需要设备做什么</p>
<blockquote>
<p>使用轮询的可编程 IO 方式</p>
</blockquote>
<p>优点：实现简单</p>
<p>缺点：CPU 和 IO 设备只能串行工作，CPU 需要一直轮询检查长期处于忙等状态，CPU 利用率低。</p>
<blockquote>
<p>中断驱动方式</p>
</blockquote>
<p>解决：引入中断机制</p>
<p>优点：CPU 和 IO 设备可以并行工作</p>
<p>缺点：频繁的中断处理会消耗较多的 CPU 时间</p>
<blockquote>
<p>DMA 方式 P211</p>
</blockquote>
<p>解决：引入 DMA 控制器</p>
<p><img src="/.com//image-20220418163200754.png" alt="image-20220418163200754"></p>
<p>优点：数据以块传输。CPU 和 IO 设备的并行得到提高</p>
<p>缺点：CPU 每发出一条 IO 指令，只能读写一个或多个<strong>连续</strong>的数据块。如果需要读取离散的数据块，则需要多条 IO 指令</p>
<blockquote>
<p>通道控制方式</p>
</blockquote>
<p>优点：每次读&#x2F;写<strong>一组</strong>数据块；CPU、通道、I&#x2F;O设备可并行工作，资源利用率很高</p>
<p>缺点：实现复杂，需要专门的通道硬件支持</p>
<p>指令格式：</p>
<p><img src="/.com//image-20220418163605709.png" alt="image-20220418163605709"></p>
<ul>
<li>操作码 </li>
<li>内存地址 &amp; 计数</li>
<li>通道<strong>程序</strong>结束位 P：1 表示这是<strong>最后一条</strong>指令</li>
<li><strong>记录</strong>结束标志位 R：1 表示这是处理某记录的最后一条指令</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p><img src="/.com//image-20220418163928895.png" alt="image-20220418163928895"></p>
<blockquote>
<p>SPOOLing 技术</p>
</blockquote>
<p>需要多道程序技术的支持，</p>
<p>问题：独占设备 -&gt; 共享设备，缓和 CPU 和 IO 速度的不匹配</p>
<p>思想：空间换时间</p>
<p><strong>脱机技术</strong>：纸带机 -&gt; 外围控制机 -&gt; 磁带机 -&gt; CPU -&gt; 磁带机 -&gt; 外围控制机 -&gt; 纸带机</p>
<p>假脱机技术：输入设备 -&gt; 输入进程 -&gt; 输入井         输出井 -&gt; 输出进程 -&gt; 输出设备</p>
<ul>
<li>输入输出井 &#x3D; 磁盘</li>
<li>输入输出进程 &#x3D; 外围控制机</li>
<li>缓冲区用于暂存数据</li>
</ul>
<p><strong>模拟打印机</strong></p>
<ol>
<li>在<strong>输出井</strong>中开辟一段空间，用于存放数据</li>
<li>申请一张<strong>打印请求表</strong>（用于说明文件存放的位置），挂在文件队列上</li>
<li>输出进程根据表上的信息，将数据从外存 -&gt; 内存 -&gt; 打印机</li>
</ol>
<p><strong>特点</strong></p>
<ol>
<li>提高了 IO 速度：将 IO 操作变为对输入输出井的操作，提高了 IO 速度；缓和 CPU 和 IO 速度的不匹配</li>
<li>将独占设备改造成了共享设备</li>
<li>实现了虚拟设备功能</li>
</ol>
<h2 id="设备分配（设备独立性软件）"><a href="#设备分配（设备独立性软件）" class="headerlink" title="设备分配（设备独立性软件）"></a>设备分配（设备独立性软件）</h2><blockquote>
<p>设备的分配和回收</p>
</blockquote>
<p>问题：应用程序直接使用设备与系统中的物理设备直接相关，导致不灵活，给用户带来不便</p>
<p>解决：引入逻辑设备名</p>
<p>好处：</p>
<ul>
<li>逻辑设备是抽象的设备名</li>
<li>可实现 IO 重定向</li>
</ul>
<p><strong>逻辑设备名到物理设备名的映射 – 逻辑设备表</strong></p>
<ul>
<li>逻辑设备名</li>
<li>物理设备名</li>
<li>驱动程序入口地址</li>
</ul>
<blockquote>
<p>设备的固有属性</p>
</blockquote>
<ul>
<li>独占设备</li>
<li>共享设备</li>
<li>虚拟设备：采用 spooling 技术将独占设备改造成共享设备</li>
</ul>
<blockquote>
<p>设备分配算法</p>
</blockquote>
<ul>
<li>先来先服务</li>
<li>优先级高者优先</li>
<li>短任务优先</li>
</ul>
<blockquote>
<p>分配的安全性 PPT P79</p>
</blockquote>
<ul>
<li>安全分配方式：为进程分配一个设备之后，将进程阻塞，本次 IO 完成之后将进程唤醒<ul>
<li>优点：不会死锁，破坏 请求和保持 条件</li>
<li>缺点：串行工作</li>
</ul>
</li>
<li>不安全分配方式：进程发出 IO 请求之后，可以继续执行<ul>
<li>优点：并行工作</li>
<li>缺点：可能死锁</li>
</ul>
</li>
</ul>
<blockquote>
<p>分配方式</p>
</blockquote>
<ul>
<li><p>静态分配：开始就得到全部资源</p>
<p>破坏请求和保持条件，不会死锁</p>
</li>
<li><p>动态分配：动态申请</p>
</li>
</ul>
<blockquote>
<p>分配管理中的数据结构</p>
</blockquote>
<p>设备控制表 DCT：</p>
<ul>
<li>属性：类型、标识符、状态、指向控制器表的<strong>指针</strong></li>
<li>运行相关：重复执行次数、设备任务队列的队首 PCB 指针</li>
</ul>
<p>控制器控制表 COCT：</p>
<ul>
<li>属性：控制器标识符、状态、指向通道表的指针</li>
<li>运行相关：等待控制器的队首和队尾 PCB 指针</li>
</ul>
<p>通道控制表 CHCT：</p>
<ul>
<li>属性：标识符、状态、指向 COCT 的指针</li>
<li>运行相关：等待控制器的队首和队尾 PCB 指针</li>
</ul>
<p>系统设备表 SDT：</p>
<ul>
<li>包含系统中<strong>全部</strong>的<strong>设备</strong>情况<ul>
<li>设备类型、标识符、驱动程序入口</li>
<li>DCT</li>
</ul>
</li>
</ul>
<blockquote>
<p>设备分配步骤</p>
</blockquote>
<ol>
<li>根据进程请求的物理设备名查找 <strong>SDT</strong></li>
<li>根据 SDT 找到 DCT，<ol>
<li>忙碌：挂载进程 PCB 到设备等待队列</li>
<li>空闲：将设备分配给进程</li>
</ol>
</li>
<li>根据 DCT 找到 COCT，分配与上面相同</li>
<li>根据 COCT 找到 CHCT，分配与上面相同</li>
</ol>
<p>只有设备、控制器、通道三者都分配成功时，这次设备分配才算成功</p>
<p><strong>缺点 &amp; 问题</strong></p>
<ol>
<li>需要提供物理设备名，底层细节对用户不透明，不方便编程</li>
<li>程序不方便移植</li>
<li>同类型的设备利用率低</li>
</ol>
<p><strong>解决</strong></p>
<p><strong>引入逻辑设备名到物理设备名的映射</strong>。</p>
<ol>
<li><p>根据进程请求的<strong>逻辑设备名</strong>查找 <strong>SDT</strong></p>
</li>
<li><p>根据 SDT 找到 DCT，<strong>找到用户进程指定类型的、并且空闲的设备</strong>，将其分配给该进程。操作系统<strong>在逻辑设备表（LUT）中新增一个表项</strong>。</p>
<p>之后用户进程再次通过<strong>相同</strong>的逻辑设备名请求使用设备，则操作系统通过 LUT 表即可知道用户进程实际要使用的是哪个物理设备了，并且也能知道该设备的驱动程序入口地址</p>
<ol>
<li>忙碌：挂载进程 PCB 到设备等待队列</li>
<li>空闲：将设备分配给进程</li>
</ol>
</li>
<li><p>根据 DCT 找到 COCT，分配与上面相同</p>
</li>
<li><p>根据 COCT 找到 CHCT，分配与上面相同</p>
</li>
</ol>
<h2 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h2><p><strong>作用</strong></p>
<ol>
<li><strong>缓和 CPU 和 IO 设备之间速度不匹配的矛盾</strong></li>
<li><strong>减少对 CPU 的中断频率</strong>，放宽对 CPU 中断对应时间的限制</li>
<li>解决数据粒度不匹配的问题，CPU 一块一块输出，IO 设备一个字符输出</li>
<li>提高 CPU 和 IO 设备之间的并行性</li>
</ol>
<h3 id="缓冲区管理策略"><a href="#缓冲区管理策略" class="headerlink" title="缓冲区管理策略"></a>缓冲区管理策略</h3><p><strong>缓冲区特性</strong>：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为 空时，可以往缓冲区传入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</p>
<p>掌握计算处理一块数据的平均时间</p>
<p>C: CPU 处理时间</p>
<p>M：IO 设备 -&gt; CPU 传送时间</p>
<p>T：IO 设备输入时间</p>
<blockquote>
<p>单缓冲区</p>
</blockquote>
<ul>
<li>T &gt; C</li>
</ul>
<p><img src="/.com//image-20220418212440750.png" alt="image-20220418212440750"></p>
<ul>
<li>T &lt; C</li>
</ul>
<p><img src="/.com//image-20220418212454284.png" alt="image-20220418212454284"></p>
<p>结论：max(C, T) + M</p>
<blockquote>
<p>双缓冲区</p>
</blockquote>
<ul>
<li>T &gt; M + C</li>
</ul>
<p><img src="/.com//image-20220418212825686.png" alt="image-20220418212825686"></p>
<ul>
<li><p>T &lt; M + C</p>
<p><img src="/.com//image-20220418212918197.png" alt="image-20220418212918197"></p>
</li>
</ul>
<p>结论：max(T, M + C)</p>
<blockquote>
<p>使用单双缓冲区在通信时的区别</p>
</blockquote>
<p>单缓冲区：半双工通信</p>
<p>双缓冲区：全双工通信</p>
<blockquote>
<p>循环缓冲区</p>
</blockquote>
<p>问题：当输入和输出的速度相差很大时，双缓冲效果不理想，但可增加缓冲 区的数量，改善情况</p>
<p>解决：引入循环队列逻辑结构的缓冲区</p>
<blockquote>
<p>缓冲池</p>
</blockquote>
<p>通过<strong>一系列缓冲区</strong>组成</p>
<p><img src="/.com//image-20220418214143500.png" alt="image-20220418214143500"></p>
<p><strong>缓冲区使用状况分类</strong></p>
<ul>
<li>空缓冲队列</li>
<li>输入队列</li>
<li>输出队列</li>
</ul>
<p><strong>缓冲区功能分类</strong></p>
<ul>
<li>用于<strong>收容输入</strong>数据的工作缓冲区（hin）</li>
<li>用于<strong>提取输入</strong>数据的工作缓冲区（sin）</li>
<li>用于<strong>收容输出</strong>数据的工作缓冲区（hout）</li>
<li>用于<strong>提取输出</strong>数据的工作缓冲区（sout）</li>
</ul>
]]></content>
      <tags>
        <tag>技术</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux</title>
    <url>/2022/04/30/tmux/</url>
    <content><![CDATA[<h1 id="为什么使用-tmux"><a href="#为什么使用-tmux" class="headerlink" title="为什么使用 tmux"></a>为什么使用 tmux</h1><p>tmux 是一个 terminal multiplexer（终端复用器），可以启动一系列的终端会话。方便使用。</p>
<p>tmux 同时解绑了会话和终端窗口的概念。关闭终端窗口，会话并不会终止，而是在运行。</p>
<p><del>因为在 shell 中编写文件的时候，需要开多个终端，还要用鼠标切屏有点麻烦。</del></p>
<p><strong>安装</strong> : <code>sudo apt-get install tmux</code></p>
<h1 id="tmux-的使用"><a href="#tmux-的使用" class="headerlink" title="tmux 的使用"></a>tmux 的使用</h1><p><img src="/images/tmux/image-20220501100622865.png" alt="image-20220501100622865"></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动命名 tmux</span></span><br><span class="line">$ tmux new -s &lt;name&gt;</span><br><span class="line">$ ts &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 tmux 会话</span></span><br><span class="line">$ tmux detach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 tmux 会话</span></span><br><span class="line">$ tmux <span class="built_in">ls</span></span><br><span class="line">$ tl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 tmux 会话</span></span><br><span class="line">$ tmux attach -t &lt;编号&gt; | &lt;会话名&gt;</span><br><span class="line">$ ta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死会话</span></span><br><span class="line">$ tmux kill-session -t &lt;编号&gt; | &lt;会话&gt;</span><br><span class="line">$ tkss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换会话</span></span><br><span class="line">$ tmux switch -s &lt;<span class="built_in">id</span>&gt; | &lt;session-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux 的其他命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有快捷键，及其对应的 Tmux 命令</span></span><br><span class="line">$ tmux list-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有 Tmux 命令及其参数</span></span><br><span class="line">$ tmux list-commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前所有 Tmux 会话的信息</span></span><br><span class="line">$ tmux info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载当前的 Tmux 配置</span></span><br><span class="line">$ tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>



<h2 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h2><h4 id="划分窗格"><a href="#划分窗格" class="headerlink" title="划分窗格"></a>划分窗格</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 划分上下两个窗格</span></span><br><span class="line">$ tmux split-window</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分左右两个窗格</span></span><br><span class="line">$ tmux split-window -h</span><br></pre></td></tr></table></figure>

<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux select-pane -UDLR</span><br></pre></td></tr></table></figure>

<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul>
<li><p>ctrl+b %：划分左右窗格</p>
</li>
<li><p>ctrl+b “：划分上下窗格</p>
</li>
<li><p>ctrl+b !: 将 pane 拆分成一个 window</p>
</li>
<li><p>ctrl+b z: 将 pane 全屏显示</p>
</li>
<li><p>ctrl+b 方向键：移动光标</p>
</li>
<li><p>ctrl+b x: 关闭窗格</p>
</li>
</ul>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul>
<li>ctrl+b c：create</li>
<li>ctrl+b ,: rename</li>
<li>ctrl+b w: select</li>
</ul>
<h1 id="oh-my-tmux"><a href="#oh-my-tmux" class="headerlink" title="oh-my-tmux"></a>oh-my-tmux</h1><p><a class="link" href="https://github.com/gpakosz/.tmux">github: oh my tmux<i class="fas fa-external-link-alt"></i></a> </p>
<p>使用 tmux 当然要美化一下捏，zsh 中的 tmux plugin 也挺好用的捏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/gpakosz/.tmux.git</span><br><span class="line">$ <span class="built_in">ln</span> -s -f .tmux/.tmux.conf</span><br><span class="line">$ <span class="built_in">cp</span> .tmux/.tmux.conf.local .</span><br><span class="line"></span><br><span class="line">$ tmux <span class="built_in">source</span> ~/.tmux.conf</span><br></pre></td></tr></table></figure>

<p>问题：色彩显示不完全</p>
<p>需要在 <code>.tmux.conf</code> 中配置一下 color</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">if-shell <span class="string">&#x27;[ $(uname -s) = Linux ]&#x27;</span> \</span><br><span class="line">     <span class="string">&#x27;set -g default-terminal &quot;xterm-256color&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM 退役总结</title>
    <url>/2022/04/17/retire-from-acm/</url>
    <content><![CDATA[<h1 id="ACM-退役总结"><a href="#ACM-退役总结" class="headerlink" title="ACM 退役总结"></a>ACM 退役总结</h1><p>在开学后得知没有安排我参加昆明之后，我也算正式告别了 XCPC 的赛场。</p>
<p>经过连续几周的面试，我也拿到了比较心仪的实习 offer，在和面试官交流的过程中也学到了很多计算机在生活中的应用。</p>
<p>我渐渐发现之前那种只用考虑这一道题如何解决的时期已经过去了，所以在这一篇文章中纪念我的 acm 生涯。</p>
<p>ACM 生涯中一共参加了 4 场 XCPC 的比赛，两铁一铜一银。这里要感谢陪伴我的队友 @xjw, @lyy, @zzy。感谢队友在这两年的陪伴。</p>
<h4 id="第-45-届-icpc-昆明"><a href="#第-45-届-icpc-昆明" class="headerlink" title="第 45 届 icpc 昆明"></a>第 45 届 icpc 昆明</h4><p>当时寒假刚参加 acm 集训队，在一个寒假中勉强学会了一些板子题。莫名其妙的被 sj 拉着参加了延期的昆明。当时赛前勉强学会了一些算法的板子并不会，对算法的理解也不全面。导致比赛我全程宕机。最后拿了一个铁牌。</p>
<p><img src="/images/image-20220417143814047.png" alt="image-20220417143814047"></p>
<p>不过第一次参加比赛就拿到 ACM 生涯中第一个，也是唯一一个一血。还是有一点意外的。</p>
<h4 id="第-45-届-icpc-银川"><a href="#第-45-届-icpc-银川" class="headerlink" title="第 45 届 icpc 银川"></a>第 45 届 icpc 银川</h4><p>有了第一次比赛打铁的经验之后，我们自费参加了 45 届 icpc 银川。就是那个被 acmer 喷烂的比赛。</p>
<p>当时比赛之前进行了比较充分的准备，但是还是没有防住银川的航模空格。好歹也报一个 PE 吧，老是来 WA 谁顶的住啊。</p>
<p>最后还是打了铁。还是银川打铁，对我的心态影响属实不小。</p>
<p>由于赛方没有公开 rk 数据，这里就不放排名了。</p>
<p><a class="link" href="https://blog.csdn.net/myvanilla1/article/details/116903422">CSDN ICPC银川总结<i class="fas fa-external-link-alt"></i></a> 这里放一个当时打完比赛写的小作文。</p>
<h4 id="第-7-届-CCPC-广州"><a href="#第-7-届-CCPC-广州" class="headerlink" title="第 7 届 CCPC 广州"></a>第 7 届 CCPC 广州</h4><p>经过了一个暑假的训练，以及队伍重组之后，我们参加了新赛季的第一场比赛。当时的我已经能够熟练的使用各种维护区间的数据架构了，同时对图论也有少量的了解。无奈前两次打铁，使我不敢放松。最后在比赛中获得了银。</p>
<p>虽然这场比赛比较离谱，和我学过的算法并没有关系，全都是思维题。作为全队唯一一个没有脑子的选手，我化身码农狂写代码。最后的银牌打表题感谢队友 @xjw 的数据，当时我已经接近宕机并不是很想继续写题了。可能是老天爷的帮助，让我刚好看到了数据，也一眼看出了是斐波那契数列。最后拿下了银牌，不然真就从银牌区掉到了铜牌区。</p>
<p><img src="/images/image-20220417145957207.png" alt="image-20220417145957207"></p>
<h4 id="第-46-届-icpc-沈阳"><a href="#第-46-届-icpc-沈阳" class="headerlink" title="第 46 届 icpc 沈阳"></a>第 46 届 icpc 沈阳</h4><p>拿到银之后，整个人都变成快乐人了。我们队也没有很认真的训练了。最后在欢声笑语中拿下一块铜牌。</p>
<p>这里再次感谢 @xjw 的打表 idea。我愿称 @xjw 为打表的神。</p>
<p><img src="/images/image-20220417150404479.png" alt="image-20220417150404479"></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>在 hr 面中，hr 问我为什么参加 xcpc 竞赛。当时我笑着说 <code>just for fun</code>。</p>
<p>记得我第一次打算法竞赛是在分流之后，学校安排的一场夏季联赛，虽然当时连数据读入都不会，但是就被这个比赛深深的吸引住了。</p>
<p>虽然当时也是出于之后好找工作，好保研的目的参加了这个竞赛。当时，退役之后回想起来 xcpc 给我带来的远不止这一些。它改变了我的思维方式，也使得我可以使用更加优雅的方式实现实际问题的求解。</p>
<p>感谢你耐心的看完了我的流水账，下面我想给想参加 xcpc 的朋友一些建议：</p>
<ol>
<li>首先得了解你参加比赛所使用的语言，有利于你使用语言的特性优雅的低常数实现。</li>
<li>熟悉至少一个编辑器的快捷键，可以让代码的编写跟的上脑子</li>
<li>代码尽量规范，让代码看上去至少不会让你感到恶心</li>
<li>尽早在 cf 和 atcoder 上面刷题，可以活跃你的思维。</li>
<li>平时一定要好好补题，不要老学我天天搁那刷傻逼题。</li>
</ol>
<h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>感谢和我一起打过比赛的队友</p>
<p>感谢实验室的朋友一路的陪伴</p>
<p>感谢所有因为 acm 而相识的朋友</p>
<p>退役，既是告别，也是开始</p>
<p>愿今后：</p>
<p>被打击时，记起你的珍贵</p>
<p>迷茫时，坚信你的珍贵</p>
<p>爱你所爱，行你所行</p>
<p>听从你心，无问西东</p>
<p>2022&#x2F;4&#x2F;17 (正好是第 46 届 icpc 昆明的比赛时间)</p>
<p><img src="/images/image-20220417153331430.png" alt="image-20220417153331430"></p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 基础学习</title>
    <url>/2022/04/18/vim/</url>
    <content><![CDATA[<h1 id="Getting-Familiar"><a href="#Getting-Familiar" class="headerlink" title="Getting Familiar"></a>Getting Familiar</h1><h2 id="Vim-modes"><a href="#Vim-modes" class="headerlink" title="Vim modes"></a>Vim modes</h2><ul>
<li>Command mode</li>
<li>insert mode</li>
<li>Command line mode</li>
<li>Visual mode: switch from command mode to visual node type <code>v</code></li>
</ul>
<h2 id="operate-with-file"><a href="#operate-with-file" class="headerlink" title="operate with file"></a>operate with file</h2><blockquote>
<p>create new file or load file</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:edit message.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>open file in read-only mode</p>
</blockquote>
<p>use -R option</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim -R message.txt</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ view message.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>edit existing file</p>
</blockquote>
<ul>
<li><p>quit editor without saving changes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q!</span><br></pre></td></tr></table></figure>
</li>
<li><p>save changes and quit editor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="editing"><a href="#editing" class="headerlink" title="editing"></a>editing</h1><blockquote>
<p>insert text <strong>before</strong> cursor</p>
</blockquote>
<p><code>i</code> switch to insert mode</p>
<blockquote>
<p>insert text at the <strong>beginning of line</strong></p>
</blockquote>
<p>problem: you want to insert text at the beginning of <strong>current line</strong> </p>
<p>solve: use <code>I</code></p>
<blockquote>
<p>append text <strong>after</strong> cursor</p>
</blockquote>
<p><code>a</code></p>
<blockquote>
<p>append text at the end of line</p>
</blockquote>
<p><code>A</code></p>
<blockquote>
<p><strong>open new line</strong> <strong>below</strong> cursor</p>
</blockquote>
<p><code>o</code></p>
<blockquote>
<p>open new line <strong>above</strong> cursor</p>
</blockquote>
<p><code>O</code></p>
<blockquote>
<p>change text</p>
</blockquote>
<p>problem: want to change text in current line then insert</p>
<p>solve: <code>cc</code> or <code>C</code></p>
<blockquote>
<p>replace text</p>
</blockquote>
<p>problem: want to replace character or entire line</p>
<p>solve: <code>r</code> or <code>R</code></p>
<blockquote>
<p>Join text</p>
</blockquote>
<p>problem: want to merge two line (this line and next line)</p>
<p>solve: <code>J</code></p>
<h1 id="Navigating"><a href="#Navigating" class="headerlink" title="Navigating"></a>Navigating</h1><p>problem: how to quickly move cursor</p>
<h2 id="Basic-navigation-move-cursor"><a href="#Basic-navigation-move-cursor" class="headerlink" title="Basic navigation (move cursor)"></a>Basic navigation (move cursor)</h2><ul>
<li><code>h</code>: left</li>
<li><code>l</code>: right</li>
<li><code>j</code>: up</li>
<li><code>k</code>: down</li>
</ul>
<blockquote>
<p>more: navigation use number with those basic command, like 10j</p>
</blockquote>
<ul>
<li><code>0</code>: move cursor to the beginning of current line. like <code>I</code> but not to insert mode</li>
<li><code>$</code>: move cursor to the end of current line</li>
<li><code>ctrl + f</code>: scroll down entire page</li>
<li><code>ctrl + b</code>: scroll up entire page</li>
</ul>
<h2 id="navigate-to-lines"><a href="#navigate-to-lines" class="headerlink" title="navigate to lines"></a>navigate to lines</h2><ul>
<li><code>:n</code>: jump to the nth line</li>
<li><code>:0</code>: jump to the <strong>start</strong> of file</li>
<li><code>:$</code>: jump to the <strong>end</strong> of file</li>
</ul>
<h2 id="word-navigation"><a href="#word-navigation" class="headerlink" title="word navigation"></a>word navigation</h2><ul>
<li><code>w</code>: move cursor to the beginning of <strong>next</strong> word</li>
<li><code>b</code>: move cursor to the end of <strong>previous</strong> word</li>
<li><code>e</code>: move cursor to the end of <strong>current</strong> word</li>
</ul>
<h1 id="revisiting-editing"><a href="#revisiting-editing" class="headerlink" title="revisiting editing"></a>revisiting editing</h1><h2 id="cut-copy-and-paste"><a href="#cut-copy-and-paste" class="headerlink" title="cut, copy and paste"></a>cut, copy and paste</h2><ul>
<li><code>x</code>: delete character from cursor position</li>
<li><code>X</code>: delete previous character from cursor position</li>
<li><code>y</code>: copy single character</li>
<li><code>p</code>: paste character <strong>after</strong> cursor position</li>
<li><code>P</code>: paste character <strong>before</strong> cursor position</li>
</ul>
<h2 id="multi-position-command"><a href="#multi-position-command" class="headerlink" title="multi-position command"></a>multi-position command</h2><ul>
<li><code>dw</code>: Delete word <strong>from</strong> cursor position</li>
<li><code>D</code>: Delete entire line from cursor position</li>
<li><code>dd</code>: Delete entire line</li>
<li><code>Y</code> or <code>yy</code>: Copies entire line</li>
</ul>
<p>more: <code>3dw</code> or <code>d3w</code> delete 3 words</p>
<ul>
<li><p><code>u</code>: undo like <code>ctrl + z</code></p>
</li>
<li><p><code>:red</code> or <code>ctrl + r</code>: redo like <code>ctrl + shift + z</code></p>
</li>
</ul>
<h1 id="searching"><a href="#searching" class="headerlink" title="searching"></a>searching</h1><h2 id="search-in-current-file"><a href="#search-in-current-file" class="headerlink" title="search in current file"></a>search in current file</h2><blockquote>
<p>search in <strong>forward</strong> direction</p>
</blockquote>
<ul>
<li><code>/&lt;expression&gt;</code></li>
<li><code>n</code>: next</li>
<li><code>N</code>: previous</li>
<li><code>//</code>: repeat search</li>
</ul>
<blockquote>
<p>search in <strong>backward</strong> direction</p>
</blockquote>
<ul>
<li><code>?&lt;expression&gt;</code></li>
<li><code>n</code>: previous</li>
<li><code>N</code>: next</li>
<li><code>??</code>: repeat</li>
</ul>
<blockquote>
<p>search word <strong>under cursor</strong></p>
</blockquote>
<ul>
<li><code>*</code>: next </li>
<li><code>#</code>: previous</li>
</ul>
<h1 id="macros"><a href="#macros" class="headerlink" title="macros"></a>macros</h1><blockquote>
<p>start recording</p>
</blockquote>
<ol>
<li>press <code>q</code> start</li>
<li>use single character as a macros name</li>
</ol>
<blockquote>
<p>stop recording</p>
</blockquote>
<p>press <code>q</code> again</p>
<blockquote>
<p>use macros</p>
</blockquote>
<p><code>@&#123;macros name&#125;</code> or <code>number@&#123;name&#125;</code></p>
<blockquote>
<p>list macros</p>
</blockquote>
<p><code>:registers</code></p>
<h1 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> mapleader=<span class="string">&quot; &quot;</span></span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ignorecase</span><br><span class="line"><span class="built_in">set</span> smartcase</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;nohlsearch&quot;</span></span><br><span class="line"></span><br><span class="line">nnoremap = nzz</span><br><span class="line">nnoremap - Nzz</span><br><span class="line"></span><br><span class="line">nnoremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line">nnoremap sj :<span class="built_in">set</span> splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">nnoremap sk :<span class="built_in">set</span> nosplitright&lt;CR&gt;:vspilt&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> noshowcmd</span><br><span class="line"><span class="built_in">set</span> wrap</span><br><span class="line"><span class="built_in">set</span> autowrite</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-9,gb2312,gbk,gb18030</span><br><span class="line"></span><br><span class="line">nnoremap tt :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">nnoremap J 5j</span><br><span class="line">nnoremap K 5k</span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#begin()</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;connorholyday/vim-snazzy&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;wakatime/vim-wakatime&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-sensible&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;Raimondi/delimitMate&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;dracula/vim&#x27;</span>, &#123;<span class="string">&#x27;as&#x27;</span>: <span class="string">&#x27;dracula&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#end()</span></span><br><span class="line"></span><br><span class="line">colorscheme dracula</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled=1</span></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#branch#enabled=1</span></span><br><span class="line"><span class="built_in">let</span> g:airline_powerline_fonts=1</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/04/07/compute-network/</url>
    <content><![CDATA[<h1 id="HTTP-专题"><a href="#HTTP-专题" class="headerlink" title="HTTP 专题"></a>HTTP 专题</h1><ol>
<li>HTTP 报文</li>
<li>GET 和 POST 方法</li>
<li>Cookie 和 Session</li>
<li>HTTP 缓存</li>
<li>HTTPS</li>
</ol>
<h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><ul>
<li>请求行<ul>
<li>请求方法</li>
<li>HTTP 版本</li>
<li>URL</li>
</ul>
</li>
<li>首部行<ul>
<li>Connection 表示要不要持续链接</li>
<li>Accept-language 表示希望收到的语言版本</li>
</ul>
</li>
<li>空行</li>
<li>请求体：供 POST 方法使用</li>
</ul>
<h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><ul>
<li>响应行<ul>
<li>HTTP 版本</li>
<li>状态码：<a class="link" href="https://github.com/TieMuZhen/Blog/issues/87">HTTP 常见的状态码和适用场景<i class="fas fa-external-link-alt"></i></a></li>
<li>响应状态信息描述</li>
</ul>
</li>
<li>首部行</li>
<li>空行</li>
<li>响应体</li>
</ul>
<h2 id="GET-和-POST-方法的区别"><a href="#GET-和-POST-方法的区别" class="headerlink" title="GET 和 POST 方法的区别"></a>GET 和 POST 方法的区别</h2><ul>
<li>GET 方法把参数包含在 URL 中，POST 通过 Request Body 传递参数</li>
<li>GET 方法比 POST 方法更快<ul>
<li>POST 请求包含更多的首部行</li>
<li><strong>POST 先将请求头发送给服务器进行确认，然后才真正发送数据</strong></li>
</ul>
</li>
<li>GET 会将数据缓存起来</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>POST 更安全，不会作为 URL 的一部分，不会被缓存。</li>
<li>POST 发送的数据更大，GET 有 URL 长度限制</li>
<li>POST 能发送跟多的数据类型，GET 只能发送 ASCII 字符</li>
<li>POST 比 GET 慢</li>
<li>POST 一般用于修改和写入数据，GET 一般用于搜索排序和筛选</li>
</ul>
<h2 id="Cookie-和-Session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h2><ul>
<li>Cookie</li>
<li>Session</li>
<li>Cookie 和 Session 的联系</li>
<li>Cookie 和 Session 的区别</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>问题：Web 站点希望能够识别用户，来对用户进行专门化服务，就生成一个唯一 ID，作为<strong>索引</strong>在数据库中产生表项。</p>
<p>服务器通过一个包含 Set-cookie 首部行的 HTTP 响应报文进行响应。</p>
<ul>
<li>如果没有设置 Cookie 失效日期，他们仅保存在浏览器会话期间</li>
<li>大多数浏览器支持的 Cookie 最大存储的数据量是 <code>4K</code>，因此不用来保存大数据</li>
<li>Cookie 以明文的方式存储，并不安全</li>
<li>Cookie 是不跨域名的</li>
</ul>
<h4 id="Cookie-的修改和删除"><a href="#Cookie-的修改和删除" class="headerlink" title="Cookie 的修改和删除"></a>Cookie 的修改和删除</h4><p>Cookie <strong>并不提供修改和删除</strong></p>
<ul>
<li>如果想要<strong>修改</strong>，需要服务器在 HTTP 响应报文中返回一个<strong>同名</strong>的 Cookie</li>
<li>如果想要<strong>删除</strong>，只需要返回一个同名的 Cookie，并发 maxAge 设置为 0</li>
</ul>
<blockquote>
<p>注意：返回同名 Cookie 的时候，需要除 maxAge，value 之外的全部信息都和原 Cookie 相同</p>
</blockquote>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>client 访问 server 的时候，server 将 client 信息记录在 server 上面，这就是 session。</p>
<p>用户和服务器建立连接的时候，服务器会为其分配一个 SessionId</p>
<blockquote>
<p>Session 的生命周期</p>
</blockquote>
<ul>
<li>Session 在用户的第一次访问服务器的时候创建，只访问静态资源并不会创建 Session</li>
<li>server 会将长时间没有活动的 Session 从服务器内存中清除，此时 Session 便失效。Tomcat 的默认失效时间为 30 min</li>
<li>计时从 Session 未被访问的时候开始算起</li>
</ul>
<h3 id="Session-和-Cookie-的联系"><a href="#Session-和-Cookie-的联系" class="headerlink" title="Session 和 Cookie 的联系"></a>Session 和 Cookie 的联系</h3><p>Session 需要通过 Cookie 实现，服务器要向 client 发送一个 JSESSIONID 的 Cookie，它的值就是该 Session 的 id，Session 依据此 Cookie 来识别是否为同一用户</p>
<ul>
<li>该 Cookie 是服务器自动生成的，maxAge 一般为 <code>-1</code>，也就是关闭浏览器就会失效。</li>
<li>因此同一计算机的两个浏览器窗口访问服务器时会生成两个不同的 Session ，但是由子窗口会共享父窗口的 Cookie ，共享一个 Session</li>
</ul>
<h3 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h3><ul>
<li>存储位置</li>
<li>安全性</li>
<li>对服务器的影响</li>
<li>数据大小：Cookie 保存的数据最多不超过 <code>4k</code> ，一般浏览器限制一个站点最多保存 20 个 Cookie</li>
</ul>
<h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h2><p>一般只用于 GET 请求</p>
<img src="/.com//edfb851e-fa61-4386-9c10-bf2105f55331-12785011.jpg" alt="img" style="zoom:50%;">

<center>HTTP 缓存流程图</center>

<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul>
<li>引入 CA 使用数字证书来<strong>保证公钥的合法性</strong>，避免了中间人攻击。</li>
<li>使用<strong>非对称加密</strong>来约定<strong>对称加密</strong>要使用的 key</li>
<li><strong>信息传递过程</strong>使用<strong>对称加密</strong>来实现</li>
</ul>
<h3 id="HTTPS-的核心-SSL-x2F-TLS-协议的工作原理"><a href="#HTTPS-的核心-SSL-x2F-TLS-协议的工作原理" class="headerlink" title="HTTPS 的核心 SSL&#x2F;TLS 协议的工作原理"></a>HTTPS 的核心 SSL&#x2F;TLS 协议的工作原理</h3><ul>
<li>对称加密：如何约定密钥在计算机网络中存在问题，性能高很多</li>
<li>非对称加密：<strong>可以使用公钥模拟用户发送信息，也存在问题</strong>，</li>
</ul>
<h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p><strong>解决：第三方仿照 server 给 client 发送自己的公钥，并且中间截获的问题</strong></p>
<img src="/.com//attack1.cfda3eb1.png" alt="img" style="zoom: 80%;">

<center>中间人攻击，server 根本看不懂密文的内容</center>

<p>为了公钥传输的信赖性问题，第三方机构应运而生——证书颁发机构（CA，Certificate Authority）。CA 默认是受信任的第三方。CA 会给各个服务器颁发证书，证书存储在服务器上，并附有 CA 的<strong>电子签名</strong></p>
<ol>
<li>client 向 server 发送 HTTPS 请求时</li>
<li>获取目标服务器的证书，并验证合法性</li>
<li>证书内存在 server 的公钥</li>
</ol>
<h4 id="如何生成数字签名"><a href="#如何生成数字签名" class="headerlink" title="如何生成数字签名"></a>如何生成数字签名</h4><ul>
<li>CA 使用<strong>散列</strong>技术生成一个<strong>摘要</strong>，并使用 CA 的密钥对<strong>摘要</strong>进行加密，然后将证书发给 server</li>
<li>server 将证书发给 client 时，client 向 CA 获取加密摘要所用的公钥，并自己计算摘要，与 CA 解密出来的摘要进行比对。</li>
<li>如果相同，则成功</li>
</ul>
<img src="/.com//image-20220313151431722.png" alt="image-20220313151431722" style="zoom:50%;">

<center>CA 数字签名的详细验证过程</center>

<p>总结：通过引入第三方机构 CA 对 server 的公钥进行验证。</p>
<img src="/.com//image-20220313151635199.png" alt="image-20220313151635199" style="zoom: 33%;">

<center>CA 的认证过程</center>

<ul>
<li>HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。</li>
<li>HTTPS 是运行在 SSL&#x2F;TLS 之上的 HTTP 协议，SSL&#x2F;TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用<strong>对称加密</strong>，但<strong>对称加密的密钥用服务器方的证书进行了非对称加密</strong>。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>
</ul>
<h3 id="HTTPS-的工作流程"><a href="#HTTPS-的工作流程" class="headerlink" title="HTTPS 的工作流程"></a>HTTPS 的工作流程</h3><ul>
<li>client 向 server 发起 HTTPS 请求</li>
<li>server 将数字证书发送给 client</li>
<li>client 校正数字证书的合法性，如果不通过产生 HTTPS 警告信息</li>
<li>client <strong>通过公钥对对称加密要使用的 key 进行加密</strong>，发送给客户端</li>
<li>server 通过密钥解密对称加密要使用的 key</li>
<li>client 和 server 进行对称加密传输</li>
</ul>
<p>为什么不适用非对称加密？</p>
<ul>
<li>资源消耗远大于对称加密</li>
</ul>
<img src="/.com//image-20220314172756595.png" alt="image-20220314172756595" style="zoom: 33%;">





<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h2><ol>
<li><p>序号 &amp;&amp; 确认号 (32 位)</p>
<p>TCP 的 ACK 并不是立即发出的，因为 TCP 会采取累计确认的方式，一旦延迟期间后面的数据包也来了，就可以直接发送最新的 ACK，提高效率</p>
</li>
<li><p>首部长度 (4 位)</p>
<p>一个单位表示 4 字节，最长是 64 字节</p>
</li>
<li><p>窗口大小 (16 位)</p>
<p>用于流量控制，设置 cwnd</p>
</li>
<li><p>TCP 校验和 (16 位)</p>
</li>
</ol>
<h2 id="拥塞控制-amp-流量控制"><a href="#拥塞控制-amp-流量控制" class="headerlink" title="拥塞控制 &amp; 流量控制"></a>拥塞控制 &amp; 流量控制</h2><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>通过拥塞窗口实现</p>
<p>TCP 维持一个 cwnd 和一个门限值</p>
<ul>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>通过滑动窗口来实现</p>
<ul>
<li>发送方维持一个 rwnd，接收方可以通过 TCP 报文来控制 rwnd</li>
</ul>
<h3 id="拥塞控制和流量控制的区别"><a href="#拥塞控制和流量控制的区别" class="headerlink" title="拥塞控制和流量控制的区别"></a>拥塞控制和流量控制的区别</h3><ul>
<li>流量控制解决的是发送方和接收方<strong>速率不匹配</strong></li>
<li>拥塞控制解决的是<strong>避免网络资源被耗尽</strong>的问题，全局性。</li>
</ul>
<h2 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h2><p>通过 TCP 校验和实现，如果发现错误，则不发送 ACK，等待重传。</p>
<blockquote>
<p>应用层可以使用更强力的手段，例如 CRC</p>
</blockquote>
<h2 id="TCP-粘包、拆包"><a href="#TCP-粘包、拆包" class="headerlink" title="TCP 粘包、拆包"></a>TCP 粘包、拆包</h2><p>发生的原因：</p>
<ul>
<li>要发送的数据大于或小于 TCP 发送缓冲区剩余空间大小</li>
<li>待发送的数据大于 MSS</li>
</ul>
<p>解决方式：</p>
<ul>
<li>给每个数据包添加包首部，包含数据包的长度</li>
<li>在数据包之间设置边界，添加特殊字符等</li>
<li>设置消息定长</li>
</ul>
<h2 id="TCP-三次握手和四次挥手"><a href="#TCP-三次握手和四次挥手" class="headerlink" title="TCP 三次握手和四次挥手"></a>TCP 三次握手和四次挥手</h2><img src="/.com//watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA4oCNb09vT29Pb29PTw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img" style="zoom:50%;">

<h2 id="TCP-与-UDP-的区别"><a href="#TCP-与-UDP-的区别" class="headerlink" title="TCP 与 UDP 的区别"></a>TCP 与 UDP 的区别</h2><table>
<thead>
<tr>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>面向连接，提供可靠交付</td>
<td>无连接，尽最大努力交付</td>
</tr>
<tr>
<td>面向字节流</td>
<td>面向报文</td>
</tr>
<tr>
<td>一对一</td>
<td>一对多、一对一、多对一、多对多</td>
</tr>
<tr>
<td>有拥塞控制、流量控制</td>
<td>首部开销小</td>
</tr>
</tbody></table>
<p>TCP：FTP、HTTP、HTTPS、SSH、SMTP、Telnet</p>
<p>UDP：DNS、DHCP、TFTP</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>2022计算机保研</title>
    <url>/2022/10/10/baoyan/</url>
    <content><![CDATA[<h3 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h3><ul>
<li>学校：上海末流211</li>
<li>专业：计算机科学与技术</li>
<li>排名：10%之内</li>
<li>英语：四级刚过，六级没过</li>
<li>竞赛：ccpc银，icpc铜</li>
<li>科研：无</li>
<li>实习：字节跳动</li>
<li>最终去向：浙软</li>
</ul>
<p>我是通过竞赛保研的，除了竞赛经历之外并没有其它优势。</p>
<hr>
<h3 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h3><p>一开始我觉得只用参加预推免就可以上岸了，夏令营没有什么必要。导致我开始报名夏令营的时候，很多学校都截止报名了。实际上也没有什么用，因为我的材料过不了大多数学校的初审(笑死)。最后也只入了哈工大威海、湖大、中南、浙软、东南。</p>
<h3 id="哈工大威海"><a href="#哈工大威海" class="headerlink" title="哈工大威海"></a>哈工大威海</h3><p>哈工大威海的面试主要分为五个部分。</p>
<ul>
<li><p>英语：</p>
</li>
<li><ul>
<li>介绍一下母校</li>
<li>研究生期间有什么规划</li>
</ul>
</li>
<li><p>科研竞赛经历：</p>
</li>
<li><ul>
<li>简单介绍一下就好了，没有的话可能会比较尬。</li>
</ul>
</li>
<li><p>创新思维：</p>
</li>
<li><ul>
<li>问了我怎么构造一个搜索引擎，我真的不会。直接开始胡言乱语。</li>
</ul>
</li>
<li><p>专业课：</p>
</li>
<li><ul>
<li>浏览器输入 URL 到返回页面的全过程。经典面试题了。</li>
</ul>
</li>
<li><p>思维题：</p>
</li>
<li><ul>
<li>推荐看看程序员思维40题。<a class="link" href="https://link.zhihu.com/?target=https://www.nowcoder.com/discuss/526897">面试常问智力题40道（逻辑题）+ 参考答案_笔经面经_牛客网<i class="fas fa-external-link-alt"></i></a> 非常的不错。</li>
<li>当时问我的题目是这道 <a class="link" href="https://www.zhihu.com/question/35950050">100人坐飞机，第一个乘客在座位中随便选一个坐下，第100人正确坐到自己坐位的概率是？<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<p>面试差不多 5 min 就结束了，非常的迅速。但是不让面试完成之后就直接离开，还要退回等待，比较折磨。最后，我也是非常相信哈工大的行政效率，足足15天才出结果。真的牛逼。一般收到欢迎填报的都是过了。</p>
<h3 id="湖南大学、中南大学"><a href="#湖南大学、中南大学" class="headerlink" title="湖南大学、中南大学"></a>湖南大学、中南大学</h3><p>湖大和中南是著名的海王学校了。中南夏令营足足海了1k人，湖大也海了500人。面试的话，都是一个英语问题，然后后面都没有专业课的问答了。纯纯聊天。最后的面试成绩也不会公布，只会告诉你有没有通过。据说hnu优营只给985。</p>
<p>最后928填系统的时候，我也没有收到hnu和csu的一个信息。纯纯海王。</p>
<h3 id="浙软"><a href="#浙软" class="headerlink" title="浙软"></a>浙软</h3><p>浙软的夏令营也是入营了 2k 人。主要的用处是给四非的同学发预推免入营的offer。如果你是低rk选手或者是四非的兄弟，建议还是参加一下夏令营。拿到优营可以面预推免初审的。</p>
<h3 id="东南大学"><a href="#东南大学" class="headerlink" title="东南大学"></a>东南大学</h3><p>东南是8.8才结束的夏令营，可以最早开始预推免的学校。东南的预推免比较麻烦，因为需要提前联系老师。有老师推荐的话，可以直接入营的。</p>
<p>面试：英语问答 + 看组</p>
<ul>
<li>英语：直接问我喜欢的研究方向。内心os：我只会打acm啊，其它方向根本没有了解过，而且还是英语问答，我直接就说了云计算。感觉面试老师也是做云计算的，然后我寄了。</li>
<li>英语问完之后，老师都没了兴趣。全程就是划水了。问问项目、竞赛和未来的规划啥的。老师在狂笑，我也在狂摆。</li>
</ul>
<p>结果最后是 170&#x2F;190，我真的麻了。</p>
<p>最后夏令营也就只有哈工大威海的offer，只能安慰自己至少可以读一个C9吧。</p>
<hr>
<h3 id="预推免"><a href="#预推免" class="headerlink" title="预推免"></a>预推免</h3><h3 id="哈工大本部"><a href="#哈工大本部" class="headerlink" title="哈工大本部"></a>哈工大本部</h3><p>哈工大今年很多本校的学生留校的，所以预推免基本上不发 offer。9.20 的面试完之后，结果居然在 9.28 上午通过邮件告知。果不其然在 wl 里面。一共 180 的 hc，夏令营就发了 50offer + 50wl，加上本校 100+ 的留校。没有在预推免上岸的希望了。</p>
<p>面试：</p>
<ul>
<li><p>专业课：</p>
</li>
<li><ul>
<li>dijkstra</li>
<li>邻接表</li>
<li>c++的三种继承的区别</li>
</ul>
</li>
<li><p>科研：</p>
</li>
<li><ul>
<li>没有科研，开始乱搞</li>
</ul>
</li>
<li><p>沟通交流：</p>
</li>
<li><ul>
<li>不知道在干什么，感觉这个环节毫无意义</li>
</ul>
</li>
<li><p>竞赛</p>
</li>
<li><ul>
<li>介绍一下就结束了</li>
</ul>
</li>
</ul>
<h3 id="华师CS"><a href="#华师CS" class="headerlink" title="华师CS"></a>华师CS</h3><p><strong>华师CS入营需要老师推荐</strong>，没有老师推免根本不能入营。之前听ACM实验室的哥哥说华师有手就行，所以直接冲了，最后证明我没有手。因为一共 27hc，50外校 + 27本校竞争。感觉还是非常激烈的。最后在 wl20。</p>
<p>华师的推免分为机试+面试</p>
<p>机试一共四道题，感觉200分算中等的水平。有人直接ak了，我太菜了。</p>
<p>面试：</p>
<ul>
<li><p>英语段落翻译，我是云计算啥的，有人是联邦学习</p>
</li>
<li><p>三个专业问题：</p>
</li>
<li><ul>
<li>过拟合是什么，什么解决</li>
<li>对称加密和非对称加密的区别</li>
<li>索引是什么，有什么作用</li>
</ul>
</li>
</ul>
<p>回答完之后就开始闲聊了。</p>
<p>在 928 的时候，我觉得 wl20 没有什么希望，不过下午 3 点的时候还真递补到我了。我一个 wl12 的朋友直接专硕变学硕。真的牛逼。感觉华师的老师人挺好的。</p>
<h3 id="西交SE"><a href="#西交SE" class="headerlink" title="西交SE"></a>西交SE</h3><p>今年西交SE优先接受夏令营优营的，所以真的想去西交的同学可以尝试一下夏令营。不要被官网的学校学科条件吓到了，很多同学没有达到也入营了。</p>
<p>面试没有英语问题，全程聊天。至今没有看到我预推免的面试结果。</p>
<h3 id="浙软-1"><a href="#浙软-1" class="headerlink" title="浙软"></a>浙软</h3><p>浙软一共入营 725 人。最后面试的时候，AI 270 人，SE 360 人。SE 180 hc，感觉还是非常好进的。</p>
<p>不过浙软还是看 rk 和本科学校的，211 基本是 10% 之内就行。面试比较中规中矩，主要看机试成绩。</p>
<p>928 的时候，浙软递补到了 wl 170，基本上是只要忍住了的人都上岸了。</p>
<p>最后也是成功上岸浙软了。</p>
<hr>
<h3 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h3><p>给学弟学妹们的一点建议：</p>
<ol>
<li>尽量早点做一个可以拿得出手的<strong>科研项目</strong>，非常加分的。</li>
<li><strong>英语成绩</strong>一定要刷高，大多数学校都非常看六级成绩的。</li>
<li>成绩排名刷高，感觉分为 rk1，5%，10% 三个档次。这是过学校初审的最重要的东西了。</li>
<li>最后没有offer也不要慌，可以捡漏的。很多学校都存在被鸽穿的情况。这里首推 sysu，年年鸽穿。</li>
<li>有志者事竟成</li>
</ol>
<hr>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>我也是 926 晚上才收到浙软 offer，当天下午我还在考虑要不要留本校读书。虽然还是有一些遗憾，可能生活就是这样吧。</p>
<p>还记得高考出分的时候，我也为物理第一道大题看错题目而懊悔，高中三年汗水并没有在6月闪耀。10分之差让我错过了很多次九学校，最后来到了上海一个211学校。虽然也曾为没有上末九而烦恼过，但是感谢大一努力的自己选到了自己心仪的CS专业。如果不是学校大类分流，我可能现在还在学习如何打螺丝。因为大一选择了CS专业，所以才在大二的时候加入了ACM集训队结识了许多志同道合的朋友。因为有竞赛加分，所以才可以成功上岸浙软。不知道 2019 的我知道现在的结果是否满意。</p>
<p>希望今后回忆起这段经历，不只有上海懒懒的海风。</p>
<p>想说的还有很多，但是写到这里却不知道怎么表述了。就这样吧！看 RNG 打 DRX 去了。</p>
<p>最后感谢家人、朋友一路上对我的支持。</p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
