<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>6.824</title>
    <url>/2022/10/17/6-824/</url>
    <content><![CDATA[<blockquote>
<p><a class="link" href="https://books.studygolang.com/gopl-zh/ch1/ch1-01.html">go<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://csdiy.wiki/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/MIT6.824/">课程指南<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://pdos.csail.mit.edu/6.824/schedule.html">课表<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://github.com/PKUFlyingPig/MIT6.824">资源文件<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h1 id="golang-入门"><a href="#golang-入门" class="headerlink" title="golang 入门"></a>golang 入门</h1><p>Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令。</p>
<blockquote>
<p>go run [file …]</p>
<p>go build [file …]</p>
<p>go env</p>
</blockquote>
<p>golang 的代码通过包组织，一个包由位于同一个目录下的 1-n 个 .go 源代码程序组成。</p>
<p>go 源代码的组成：</p>
<ul>
<li>每个源文件都以一条<code>package</code>声明语句开始</li>
<li>紧跟着一系列导入（import）的包</li>
<li>之后是存储在这个文件里的程序语句</li>
</ul>
<p><code>main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口。</p>
<ul>
<li>go 语言不允许使用无用的局部变量，会导致编译错误<ul>
<li>空标识符<code>_</code>可用于在任何语法需要变量名但程序逻辑不需要的时候，丢弃不需要的循环索引，并保留元素值。</li>
</ul>
</li>
<li>go 语言不能导入无关的包，会导致编译错误，<code>gofmt</code>可以在保存文件的时候自动去除没有使用到的包</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li><p>具名函数</p>
</li>
<li><p>匿名函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">boo := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> b, a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>闭包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	a := <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		a++</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	boo, bar := gen(), gen()</span><br><span class="line">  fmt.Println(boo(), boo(), bar(), bar())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 2 3</span></span><br></pre></td></tr></table></figure>

<p>将 a 变量封装在匿名函数的作用域之内.</p>
</li>
<li><p>defer 关键字</p>
<p>在程序结束的时候，完成一些必要的操作</p>
</li>
</ul>
<p><a class="link" href="https://github.com/zehuamama/balancer">练手项目<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>艾尔登法环</title>
    <url>/2022/10/17/EldenRing/</url>
    <content><![CDATA[<h2 id="装备"><a href="#装备" class="headerlink" title="装备"></a>装备</h2><p>个人比较喜欢猩红腐败和出血流的装备</p>
<ul>
<li>武器：猎犬长牙+9，蚁刺细剑+25，尸山血海+9，辉石法杖+18(假魔法师)</li>
<li>盾牌：乌龟盾+25，水泥板+25，盾反快乐盾+25</li>
<li>套装：碎星套，山羊套</li>
<li>骨灰：艾尔登法王骨灰+10，腐败猎狗骨灰</li>
</ul>
<p>猩红腐败可以慢慢的把 boss 折磨死，但是太慢了。后期主要使用尸山血海，打出出血的话伤害非常高。</p>
<p>记录几个卡关的 boss：</p>
<ul>
<li><p>“腐败女神” 玛莲妮亚</p>
<p>由于玛莲妮亚自带超高吸血，所以常用的盾刺流打她十分的慢，主要靠出血慢慢磨，当时打的时候非常折磨。同时招出大哥之后，大哥会变成她的血包，非常的不合算。被打成 0&#x2F;23&#x2F;0 的时候，突然想到双持尸山血海通过超高的感应出血流直接秒杀的打法。主要还是得让大哥帮忙吸引仇恨。</p>
</li>
<li><p>“野兽祭司” &amp; “黑剑” 玛利喀斯</p>
<p>主要是玛利喀斯的二阶段移动速度非常的快，同时招式的前摇非常短，非常难反应过来。被打中还会减少血量上限。但凡给玛利喀斯两管血，他才是这个游戏里面最难打的 boss。最后通过秦王绕柱+尸山血海才打过。</p>
</li>
<li><p>“黄金律法” 拉达冈 &amp; 艾尔登之兽</p>
<p>一阶段拉达冈如果使用大哥的话非常好打，不管是盾刺流还是感应出血都非常好打。但是二阶段的艾尔登之兽由于移动速度非常的快，攻击距离非常的大，不好近身导致非常难打。大哥摸不到艾尔登之兽还会吸引仇恨，反而成了副作用。由于是灵体形态的 boss，所以出血没有什么用。最后用过猎犬长牙慢慢磨死，过程非常折磨。（尸山血海也可以打过）</p>
</li>
</ul>
<p><img src="/images/EldenRing/1037695.jpg" alt="3"></p>
<h2 id="关于剧情"><a href="#关于剧情" class="headerlink" title="关于剧情"></a>关于剧情</h2><p>讲述的是一个名为“交界地”的世界由于黄金律法的崩坏，个体如何选择的问题。一共有六种结局(游戏开场的 CG 中已经给出)，4种对律法的修复、癫火以及星空。我相信在玩玩整个游戏的时候，每个玩家对于最后的选择都会有自己的答案。个人认为<strong>星空结局</strong>才是最好的，相信玛丽亚女皇也希望是这个结局。</p>
<h3 id="上古时期-amp-黄金律法的兴盛"><a href="#上古时期-amp-黄金律法的兴盛" class="headerlink" title="上古时期 &amp; 黄金律法的兴盛"></a>上古时期 &amp; 黄金律法的兴盛</h3><p>古老的年代，最初的生命自生命熔炉中孕育而出，经过漫长的演化变种不同的种族，并给交界地带来大大小小的王朝。最开始统治交界地的是龙族。后来，<strong>外星</strong>的“无上意志”想要在交界地实现统治，为此发动陨石降落交界地，带来了艾尔登之兽，也促使了选中了「玛丽卡女皇」用于管理交界地。</p>
<p>陨石带来的“艾尔登之兽”化身为“艾尔登法环”，并促使黄金树从生命熔炉中成长，玛丽卡则成为法环的寄居容器。在这个过程中，玛丽卡通过与他人结合和自我繁殖等方式生下众多后代，成为“黄金家族”，她的后代们属于半神。并先后发动了针对古龙和巨人等的战争并取得胜利，统治了这个世界。随着战争扩张，对黄金树的信仰也取代了交界地的其他信仰，黄金树的根茎生长遍布世界各地。</p>
<p>在黄金律法统治这个世界之前，这个世界被杀死的灵魂会永远消失，掌管死亡的是「死亡卢恩」，又被称为「命定之死」。而黄金律法建立后，「命定之死」被封印起来。神和半神们可以实现永生，而受到黄金律法庇护的族群，可以靠庇护避免灾病和饥饿，死后可以回归黄金树的根部，滋养半神与神明，再从中重新诞生，律法让他们不会因为意外而离开人世。受到黄金律法祝福的人眼眸会呈现金黄的颜色，而失去祝福的人眼中的金黄会消失，这种人被称为“褪色者”。</p>
<p><strong>表面上看这套秩序很完美，死亡的概念被从自然法则中拿掉，也确实为交界地带来过一段繁荣时期。</strong></p>
<p>然而在这个过程中，玛丽卡女王身上的<strong>人性</strong>越来越多，她开始怀疑起无上意志的目的，<strong>怀疑黄金律法是否真的完美</strong>，她认为没有死亡的自然法则是有问题的。在察觉到玛丽卡身上的人性越来越多之后，无上意志从玛丽卡身上又分裂出另外一个以神性为主的雄性体「拉达冈」，二者虽然源出同一灵魂，但不共享人格和记忆。拉达冈成为黄金律法最忠实的维护者。</p>
<h3 id="黄金律法的崩坏-破碎战争"><a href="#黄金律法的崩坏-破碎战争" class="headerlink" title="黄金律法的崩坏 - 破碎战争"></a>黄金律法的崩坏 - 破碎战争</h3><p>拉达冈与卡利亚王朝的满月女王蕾娜菈联姻的孩子-「月之公主 菈妮」并不认同黄金律法，也不想自己以后也成为无上意志的傀儡。从「黑剑 玛利喀斯」手中偷出了掌管死亡的「死亡卢恩」，将其附魔在武器上，这样武器就有了杀死半神之身的能力。</p>
<p>准备妥当后，菈妮在一个夜晚杀死了自己的身体，并将灵魂附身到人偶身上离开。另外在同样的夜晚，那群偷出“死亡卢恩”的刺客刺杀了玛丽卡的长子「葛德文」。这被称为“黑刀阴谋之夜”。由于在黄金律法的规定中，半神是不会死的，但葛德文的灵魂是被有“死亡卢恩”的武器杀死的，无法复活，所以他变成了肉体活着，灵魂却死了的“死诞者”。他和菈妮，一个是灵魂死了肉体活着，一个是肉体死了灵魂活着，两个加起来，正好等于一个完整的<strong>半神死亡</strong>。</p>
<p><strong>从此黄金律法开始崩坏。</strong></p>
<p>葛德文被丢入黄金树的树根底部，试图靠黄金树的力量修复葛德文。葛德文还开始影响黄金律法的整体运行，世界各地的黄金树根茎开始出现死根，「死诞者」开始大量出现。</p>
<p>长子被刺杀，玛丽卡悲痛欲绝，她突破拉达冈的阻挠，举起锤子砸碎了艾尔登法环。无上意志降下惩罚，将玛丽卡穿刺囚禁在黄金树的内部。但与此同时，黄金律法开始彻底崩坏，所有在黄金树统治下的生物的精神和肉体都开始异化，连半神都开始堕落。艾尔登法环被砸碎后，四散的碎片落到了各位半神手中。半神们为了不同的目的开始了争夺碎片的「<strong>破碎战争</strong>」</p>
<p>眼看堕落的半神们已经没法承担修复艾尔登法环的使命，而黄金树统治下的所有生灵都出现了问题，无上意志只能开始从处于黄金律法秩序之外的“褪色者”中寻找人手，收集法环碎片来<strong>修补</strong>艾尔登法环。<strong>游戏从此开始</strong>。</p>
<p><img src="/images/EldenRing/1219454.jpg" alt="2"></p>
<h3 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h3><p>由于玛丽卡女皇也是交界地的生物，随着自己的故乡「永恒之城 诺克隆恩」由于研究星星魔法被无上意志用陨石砸入地底，永远不能见到星星，产生了人性。个人感觉死亡卢恩被偷以及长子葛德文被杀都是玛丽卡女皇暗中安排好的。至于先前被流放的褪色者也是玛丽卡女皇为了让交界地摆脱无上意志统治的安排。在所有的结局中，只有癫火和星空是摆脱了无上意志的统治。但是癫火结局属实恐怖分子做法，我不是很能接受。</p>
<p>但是，随后打完艾尔登之兽太兴奋了，选择结局的时候点歪了。从星空结局点到普通结局了😡。</p>
<p><img src="/images/EldenRing/1230148.jpg" alt="结局"></p>
<p>星空结局：菈妮把律法抛弃到了世界之后，将世界敞开给了群星与外部，<strong>把自由意志和选择的权力还给了众生，我们可以一起探索未来的路</strong>，同样也抛弃了秩序对所有人的庇护，走向了绝对的不确定性。</p>
<p>很喜欢侏罗纪世界中的一句话，「生命自己会找到道路」。所以我选择星空结局！</p>
<script>
    console.log("最近几天打完了老头环的一周目，也给我带来了一些关于秩序的思考。感觉这个游戏不管是战斗系统，还是内容都做的非常好。")
</script>





]]></content>
      <tags>
        <tag>-日常</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动面经</title>
    <url>/2022/04/09/ByteDance-1/</url>
    <content><![CDATA[<p><img src="/images/image-20220409140426049.jpg" alt="image-20220409140426049"></p>
<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>3月15日，50 min</p>
<ul>
<li>自我介绍</li>
</ul>
<hr>
<p>项目相关：</p>
<ul>
<li><code>redis</code> 为什么快</li>
<li><code>redis</code> IO 多路复用</li>
<li><code>redis</code> 的数据一致性</li>
<li><code>mysql</code> 中密码如何存储</li>
<li><code>mysql</code> 表的结构</li>
<li><code>HTTP</code> 的 GET 和 POST 的区别</li>
<li><code>HTTP</code> 的流程， <code>HTTP</code> 缓存</li>
<li><code>HTTP</code> 状态码</li>
<li><code>HTTP</code> 请求、响应报文格式</li>
<li><code>RESTful</code> 风格开发的好处</li>
</ul>
<hr>
<p>基础知识：</p>
<ul>
<li>设计模式</li>
<li>C++ 代码编译过程</li>
<li>深拷贝浅拷贝</li>
<li>栈和堆是什么</li>
</ul>
<hr>
<p>算法题：</p>
<ol>
<li>链表倒置，时间复杂度$O(n)$，空间复杂度 $O(1)$</li>
<li>最长公共子串，时间复杂度$O(n^2)$，空间复杂度 $O(n^2)$</li>
</ol>
<hr>
<p>反问：</p>
<ol>
<li>部门业务</li>
<li>使用的语言</li>
</ol>
<p>第三天约二面</p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>本来是 20 号的二面，结果面试官鸽了。</p>
<p>3月23日，70 min</p>
<ul>
<li>自我介绍</li>
<li>能实习多久</li>
<li>会什么语言</li>
</ul>
<hr>
<p>项目相关：</p>
<ul>
<li><code>redis</code> 的数据一致性，面试官一直不懂我的操作（雾）</li>
<li><code>redis</code> 的基础数据结构</li>
<li>对 <code>redis</code> 的理解，面试官嫌我数据库太菜了，就没有问我 <code>mysql</code> 了</li>
</ul>
<hr>
<p>基础知识：</p>
<ul>
<li>堆排序（给他把十大排序讲了一遍）</li>
</ul>
<hr>
<p>算法题：</p>
<ul>
<li>编辑距离，时间复杂度$O(n^2)$，空间复杂度 $O(n^2)$</li>
</ul>
<hr>
<p>反问：</p>
<ul>
<li>一般优化性能是重构代码降低复杂度，还是多加几台服务器</li>
</ul>
<p>10 min 后约三面</p>
<h1 id="hr-面"><a href="#hr-面" class="headerlink" title="hr 面"></a>hr 面</h1><p>3月28日，10 min</p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>2022计算机保研</title>
    <url>/2022/10/10/baoyan/</url>
    <content><![CDATA[<h3 id="个人背景"><a href="#个人背景" class="headerlink" title="个人背景"></a>个人背景</h3><ul>
<li>学校：上海末流211</li>
<li>专业：计算机科学与技术</li>
<li>排名：10%之内</li>
<li>英语：四级刚过，六级没过</li>
<li>竞赛：ccpc银，icpc铜</li>
<li>科研：无</li>
<li>实习：字节跳动</li>
<li>最终去向：浙软</li>
</ul>
<p>我是通过竞赛保研的，除了竞赛经历之外并没有其它优势。</p>
<hr>
<h3 id="夏令营"><a href="#夏令营" class="headerlink" title="夏令营"></a>夏令营</h3><p>一开始我觉得只用参加预推免就可以上岸了，夏令营没有什么必要。导致我开始报名夏令营的时候，很多学校都截止报名了。实际上也没有什么用，因为我的材料过不了大多数学校的初审(笑死)。最后也只入了哈工大威海、湖大、中南、浙软、东南。</p>
<h3 id="哈工大威海"><a href="#哈工大威海" class="headerlink" title="哈工大威海"></a>哈工大威海</h3><p>哈工大威海的面试主要分为五个部分。</p>
<ul>
<li><p>英语：</p>
</li>
<li><ul>
<li>介绍一下母校</li>
<li>研究生期间有什么规划</li>
</ul>
</li>
<li><p>科研竞赛经历：</p>
</li>
<li><ul>
<li>简单介绍一下就好了，没有的话可能会比较尬。</li>
</ul>
</li>
<li><p>创新思维：</p>
</li>
<li><ul>
<li>问了我怎么构造一个搜索引擎，我真的不会。直接开始胡言乱语。</li>
</ul>
</li>
<li><p>专业课：</p>
</li>
<li><ul>
<li>浏览器输入 URL 到返回页面的全过程。经典面试题了。</li>
</ul>
</li>
<li><p>思维题：</p>
</li>
<li><ul>
<li>推荐看看程序员思维40题。<a href="https://link.zhihu.com/?target=https://www.nowcoder.com/discuss/526897">面试常问智力题40道（逻辑题）+ 参考答案_笔经面经_牛客网</a> 非常的不错。</li>
<li>当时问我的题目是这道 <a href="https://www.zhihu.com/question/35950050">100人坐飞机，第一个乘客在座位中随便选一个坐下，第100人正确坐到自己坐位的概率是？</a></li>
</ul>
</li>
</ul>
<p>面试差不多 5 min 就结束了，非常的迅速。但是不让面试完成之后就直接离开，还要退回等待，比较折磨。最后，我也是非常相信哈工大的行政效率，足足15天才出结果。真的牛逼。一般收到欢迎填报的都是过了。</p>
<h3 id="湖南大学、中南大学"><a href="#湖南大学、中南大学" class="headerlink" title="湖南大学、中南大学"></a>湖南大学、中南大学</h3><p>湖大和中南是著名的海王学校了。中南夏令营足足海了1k人，湖大也海了500人。面试的话，都是一个英语问题，然后后面都没有专业课的问答了。纯纯聊天。最后的面试成绩也不会公布，只会告诉你有没有通过。据说hnu优营只给985。</p>
<p>最后928填系统的时候，我也没有收到hnu和csu的一个信息。纯纯海王。</p>
<h3 id="浙软"><a href="#浙软" class="headerlink" title="浙软"></a>浙软</h3><p>浙软的夏令营也是入营了 2k 人。主要的用处是给四非的同学发预推免入营的offer。如果你是低rk选手或者是四非的兄弟，建议还是参加一下夏令营。拿到优营可以面预推免初审的。</p>
<h3 id="东南大学"><a href="#东南大学" class="headerlink" title="东南大学"></a>东南大学</h3><p>东南是8.8才结束的夏令营，可以最早开始预推免的学校。东南的预推免比较麻烦，因为需要提前联系老师。有老师推荐的话，可以直接入营的。</p>
<p>面试：英语问答 + 看组</p>
<ul>
<li>英语：直接问我喜欢的研究方向。内心os：我只会打acm啊，其它方向根本没有了解过，而且还是英语问答，我直接就说了云计算。感觉面试老师也是做云计算的，然后我寄了。</li>
<li>英语问完之后，老师都没了兴趣。全程就是划水了。问问项目、竞赛和未来的规划啥的。老师在狂笑，我也在狂摆。</li>
</ul>
<p>结果最后是 170&#x2F;190，我真的麻了。</p>
<p>最后夏令营也就只有哈工大威海的offer，只能安慰自己至少可以读一个C9吧。</p>
<hr>
<h3 id="预推免"><a href="#预推免" class="headerlink" title="预推免"></a>预推免</h3><h3 id="哈工大本部"><a href="#哈工大本部" class="headerlink" title="哈工大本部"></a>哈工大本部</h3><p>哈工大今年很多本校的学生留校的，所以预推免基本上不发 offer。9.20 的面试完之后，结果居然在 9.28 上午通过邮件告知。果不其然在 wl 里面。一共 180 的 hc，夏令营就发了 50offer + 50wl，加上本校 100+ 的留校。没有在预推免上岸的希望了。</p>
<p>面试：</p>
<ul>
<li><p>专业课：</p>
</li>
<li><ul>
<li>dijkstra</li>
<li>邻接表</li>
<li>c++的三种继承的区别</li>
</ul>
</li>
<li><p>科研：</p>
</li>
<li><ul>
<li>没有科研，开始乱搞</li>
</ul>
</li>
<li><p>沟通交流：</p>
</li>
<li><ul>
<li>不知道在干什么，感觉这个环节毫无意义</li>
</ul>
</li>
<li><p>竞赛</p>
</li>
<li><ul>
<li>介绍一下就结束了</li>
</ul>
</li>
</ul>
<h3 id="华师CS"><a href="#华师CS" class="headerlink" title="华师CS"></a>华师CS</h3><p><strong>华师CS入营需要老师推荐</strong>，没有老师推免根本不能入营。之前听ACM实验室的哥哥说华师有手就行，所以直接冲了，最后证明我没有手。因为一共 27hc，50外校 + 27本校竞争。感觉还是非常激烈的。最后在 wl20。</p>
<p>华师的推免分为机试+面试</p>
<p>机试一共四道题，感觉200分算中等的水平。有人直接ak了，我太菜了。</p>
<p>面试：</p>
<ul>
<li><p>英语段落翻译，我是云计算啥的，有人是联邦学习</p>
</li>
<li><p>三个专业问题：</p>
</li>
<li><ul>
<li>过拟合是什么，什么解决</li>
<li>对称加密和非对称加密的区别</li>
<li>索引是什么，有什么作用</li>
</ul>
</li>
</ul>
<p>回答完之后就开始闲聊了。</p>
<p>在 928 的时候，我觉得 wl20 没有什么希望，不过下午 3 点的时候还真递补到我了。我一个 wl12 的朋友直接专硕变学硕。真的牛逼。感觉华师的老师人挺好的。</p>
<h3 id="西交SE"><a href="#西交SE" class="headerlink" title="西交SE"></a>西交SE</h3><p>今年西交SE优先接受夏令营优营的，所以真的想去西交的同学可以尝试一下夏令营。不要被官网的学校学科条件吓到了，很多同学没有达到也入营了。</p>
<p>面试没有英语问题，全程聊天。至今没有看到我预推免的面试结果。</p>
<h3 id="浙软-1"><a href="#浙软-1" class="headerlink" title="浙软"></a>浙软</h3><p>浙软一共入营 725 人。最后面试的时候，AI 270 人，SE 360 人。SE 180 hc，感觉还是非常好进的。</p>
<p>不过浙软还是看 rk 和本科学校的，211 基本是 10% 之内就行。面试比较中规中矩，主要看机试成绩。</p>
<p>928 的时候，浙软递补到了 wl 170，基本上是只要忍住了的人都上岸了。</p>
<p>最后也是成功上岸浙软了。</p>
<hr>
<h3 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h3><p>给学弟学妹们的一点建议：</p>
<ol>
<li>尽量早点做一个可以拿得出手的<strong>科研项目</strong>，非常加分的。</li>
<li><strong>英语成绩</strong>一定要刷高，大多数学校都非常看六级成绩的。</li>
<li>成绩排名刷高，感觉分为 rk1，5%，10% 三个档次。这是过学校初审的最重要的东西了。</li>
<li>最后没有offer也不要慌，可以捡漏的。很多学校都存在被鸽穿的情况。这里首推 sysu，年年鸽穿。</li>
<li>有志者事竟成</li>
</ol>
<hr>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>我也是 926 晚上才收到浙软 offer，当天下午我还在考虑要不要留本校读书。虽然还是有一些遗憾，可能生活就是这样吧。</p>
<p>还记得高考出分的时候，我也为物理第一道大题看错题目而懊悔，高中三年汗水并没有在6月闪耀。10分之差让我错过了很多次九学校，最后来到了上海一个211学校。虽然也曾为没有上末九而烦恼过，但是感谢大一努力的自己选到了自己心仪的CS专业。如果不是学校大类分流，我可能现在还在学习如何打螺丝。因为大一选择了CS专业，所以才在大二的时候加入了ACM集训队结识了许多志同道合的朋友。因为有竞赛加分，所以才可以成功上岸浙软。不知道 2019 的我知道现在的结果是否满意。</p>
<p>希望今后回忆起这段经历，不只有上海懒懒的海风。</p>
<p>想说的还有很多，但是写到这里却不知道怎么表述了。就这样吧！看 RNG 打 DRX 去了。</p>
<p>最后感谢家人、朋友一路上对我的支持。</p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake</title>
    <url>/2022/04/07/cmake/</url>
    <content><![CDATA[<h1 id="linux-简介"><a href="#linux-简介" class="headerlink" title="linux 简介"></a>linux 简介</h1><h2 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h2><ul>
<li>bin：存储二进制指令</li>
<li>sbin：只能 sudo 的指令</li>
<li>etc：配置文件</li>
<li>dev：IO 设备，需要被挂载</li>
<li>mnt：IO 设备被 mount 的文件夹</li>
<li>home：除了 root 之外，其他用户的目录</li>
<li>proc：存储 linux 运行时的进程</li>
<li>tmp：临时文件</li>
<li>usr：存放文虎自己安装的文件，<code>program files</code></li>
<li>var：存放程序和日志文件</li>
</ul>
<h2 id="1-2-文件指令"><a href="#1-2-文件指令" class="headerlink" title="1.2 文件指令"></a>1.2 文件指令</h2><ul>
<li><p>命令 [option] [object]</p>
</li>
<li><p>pwd：print current working directory</p>
</li>
<li><p>ls：list</p>
</li>
<li><p>cd：change directory</p>
</li>
<li><p>mkdir：make directory，创建文件夹</p>
<ul>
<li>-p：创建多层不存在的文件夹</li>
</ul>
</li>
<li><p>touch：创建文件</p>
</li>
<li><p>rm：删除文件或文件夹</p>
</li>
<li><p>cp：复制文件或文件夹 <code>cp [src] [dest]</code></p>
<ul>
<li>-r 递归复制，文件夹</li>
</ul>
</li>
<li><p>mv：移动文件</p>
</li>
<li><p>time：time [指令] 用于计时</p>
</li>
</ul>
<h1 id="g"><a href="#g" class="headerlink" title="g++"></a>g++</h1><p>switch user do: sudo （root do）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line"><span class="comment"># 安装 gcc g++ gdb</span></span><br><span class="line">sudo yum install build-essential gdb</span><br><span class="line"><span class="comment"># 安装 cmake</span></span><br><span class="line">sudo yum install cmake</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-rh-2-3.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-2-3.el7.centos.noarch.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install devtoolset-9-gcc-c++</span><br><span class="line"></span><br><span class="line">source /opt/rh/devtoolset-9/enable</span><br></pre></td></tr></table></figure>



<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line"><span class="comment"># -E 仅对文件进行预处理</span></span><br><span class="line"><span class="comment"># 将 include 展开为代码</span></span><br><span class="line">g++ -E t.cpp -o t.i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="comment"># -S 产生汇编语言文件</span></span><br><span class="line"><span class="comment"># 中间代码生成，汇编文件</span></span><br><span class="line">g++ -S t.i -o t.s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 汇编</span></span><br><span class="line"><span class="comment"># -c 源代码 -&gt; 机器语言的目标代码</span></span><br><span class="line"><span class="comment"># 二进制文件</span></span><br><span class="line">g++ -c t.s -o t.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接</span></span><br><span class="line"><span class="comment"># 生成可执行文件</span></span><br><span class="line">g++ t.o -o t</span><br></pre></td></tr></table></figure>

<h3 id="g-重要的编译参数"><a href="#g-重要的编译参数" class="headerlink" title="g++ 重要的编译参数"></a>g++ 重要的编译参数</h3><ul>
<li>-g：产生带调试信息的可执行文件</li>
<li>-O[n] 优化源代码</li>
<li>-l 指定<strong>库</strong>文件，用于链接</li>
<li>-L 指定<strong>库</strong>文件路径 （默认：<code>/lib</code> <code>/usr/lib</code> <code>/usr/local/lib</code>）</li>
<li>-I 指定<strong>头文件</strong>的搜索目录</li>
<li>-Wall 打印警告信息</li>
<li>-w 关闭警报信息</li>
<li>-std&#x3D;c++[x]</li>
<li>-o 指定输出名</li>
<li>-D 定义宏</li>
</ul>
<h3 id="直接编译"><a href="#直接编译" class="headerlink" title="直接编译"></a>直接编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++ main.cpp /src/swap.cpp -Iinclude</span><br></pre></td></tr></table></figure>

<p>mian.cpp 中使用了 swap.cpp 中的函数</p>
<h3 id="生成静态库文件并编译"><a href="#生成静态库文件并编译" class="headerlink" title="生成静态库文件并编译"></a>生成静态库文件并编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 .o 文件</span></span><br><span class="line">g++ Swap.cpp -c -I../include</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态库文件 LibSwap.a</span></span><br><span class="line">ar rs libSwap.a Swap.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接静态库</span></span><br><span class="line">g++ mian.cpp -lswap -L./src -Iinclude -o static_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">./static_main</span><br></pre></td></tr></table></figure>

<h3 id="生成动态库文件"><a href="#生成动态库文件" class="headerlink" title="生成动态库文件"></a>生成动态库文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成动态库文件 libSwap.so</span></span><br><span class="line"><span class="comment"># -shared 生成动态库文件</span></span><br><span class="line">g++ swap.cpp -I../include -fPIC -shared -o libSwap.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 .o 文件</span></span><br><span class="line"><span class="comment"># g++ Swap.cpp -I../include -c -fPIC</span></span><br><span class="line"><span class="comment"># g++ -shared -o libSwap.so Swap.o</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用动态库编译</span></span><br><span class="line">g++ main.cpp -Iinclude -lswap -Lsrc -o dyna_main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行可执行文件</span></span><br><span class="line"><span class="comment"># 需要先指定动态库文件的搜索路径</span></span><br><span class="line"><span class="comment"># LD_LIBRARY_PATH=[dir] ./[bin]</span></span><br><span class="line">LD_LIBRARY_PATH=src ./dyna_mian</span><br></pre></td></tr></table></figure>



<h1 id="GDB-调试器"><a href="#GDB-调试器" class="headerlink" title="GDB 调试器"></a>GDB 调试器</h1><p>GDB(GNU Debugger) 是一个调试 C&#x2F;C++ 程序的调试器</p>
<ul>
<li>设置<strong>断点</strong></li>
<li><strong>单步</strong>执行程序，便于调试</li>
<li>查看程序中的<strong>变量值</strong>的变化</li>
</ul>
<h2 id="常用的调试命令参数"><a href="#常用的调试命令参数" class="headerlink" title="常用的调试命令参数"></a>常用的调试命令参数</h2><p>gdb [exefilename]，exefilename 为可执行文件名</p>
<ul>
<li><p>run(r)：重新开始运行程序</p>
</li>
<li><p>start：单步执行，运行程序</p>
</li>
<li><p>list：查看源代码，list-x 从第 x 行开始查看代码，list+func 查看 func 函数</p>
</li>
<li><p>set：设置变量的值</p>
</li>
<li><p>next：单步调试，逐过程，函数直接执行</p>
</li>
<li><p>step：单步调试，逐语句，跳入函数体内部</p>
</li>
<li><p>finish：结束当前函数的执行</p>
</li>
<li><p>continue(c)：继续执行</p>
</li>
</ul>
<p>查看：</p>
<ul>
<li>print(p): print [var] 输出 var 的值</li>
<li>display：display [var] 一直监视 var 的值</li>
<li>list(l)：显示当前附近的代码</li>
</ul>
<p>添加断点：</p>
<ul>
<li><p>break：break [n]（b [n]） 在第 n 行添加断点</p>
</li>
<li><p>info breakpoints (i b) 查看全部的断点信息</p>
</li>
<li><p>quit 结束 gdb</p>
</li>
</ul>
<blockquote>
<p>在 g++ 编译的时候，需要加入 -g 指令才能使用 gdb 调试</p>
<p>enter 键，重复执行上一次的命令</p>
<p>ctrl + l 清屏</p>
</blockquote>
<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><blockquote>
<p>使用命令行打开 vscode：code [filedir]</p>
</blockquote>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul>
<li>切换文件：<code>strl + p</code></li>
<li>打开命令面板：<code>ctrl + shift + p</code></li>
<li>打开终端：ctrl + &#96;</li>
<li>关闭侧边栏：<code>ctrl + b</code></li>
<li>变量同一重命名：<code>F2</code></li>
<li>转到定义出：<code>F12</code></li>
<li>格式化代码：<code>ctrl + shift + F</code></li>
</ul>
<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><ul>
<li>是什么是 cmake</li>
<li>语法特性介绍</li>
<li>重要指令和 cmake 常用变量</li>
<li>cmake 编译工程</li>
</ul>
<h2 id="CMake-是什么"><a href="#CMake-是什么" class="headerlink" title="CMake 是什么"></a>CMake 是什么</h2><ul>
<li>CMake 是一个跨平台的安装编译工具，可以使用简单的语句来描述所有平台的安装(编译过程)</li>
</ul>
<img src="/.com//image-20220315140635766.jpg" alt="image-20220315140635766" style="zoom:50%;">

<center>为什么 CMake 跨平台</center>

<p>通过 <code>CMakeList</code> 构建不同平台的 <code>build tool</code></p>
<h2 id="基本语法介绍"><a href="#基本语法介绍" class="headerlink" title="基本语法介绍"></a>基本语法介绍</h2><ul>
<li>基本语法格式：指令(参数1 参数2)<ul>
<li>参数使用()</li>
<li>参数之间使用空格或分号</li>
</ul>
</li>
<li>类似于 redis ，指令是不区分大小写的，参数和变量是区分的</li>
<li>变量使用 ${} 方式取值，到那时在 IF 语句中是直接使用变量名取值的</li>
</ul>
<h2 id="重要的指令"><a href="#重要的指令" class="headerlink" title="重要的指令"></a>重要的指令</h2><ul>
<li>cmake_minimum_required 指定 CMake 的最小版本要求<ul>
<li><code>cmake_minimum_required(VERSION 2.8.3)</code></li>
</ul>
</li>
<li>project 定义工程名称，并可指定工程指定的语言<ul>
<li><code>project(HELLOWORLD)</code></li>
</ul>
</li>
<li>set 显示定义变量<ul>
<li><code>set(SRC swap.cpp hello.cpp)</code></li>
</ul>
</li>
<li>include_directories 向工程添加特定的<strong>头文件</strong>的搜索路径<ul>
<li><code>include_directories(/usr/include ./include)</code></li>
</ul>
</li>
<li>link_directories 向工程添加多个特定的<strong>库文件</strong>搜索路径<ul>
<li><code>linkdirectories(/usr/lib/ ./lib)</code></li>
</ul>
</li>
<li>add_library 生成库文件<ul>
<li><code>add_library(libname [SHARED|STATIC] src1 src2)</code></li>
<li><code>add_library(hello SHARED $&#123;SRC&#125;)</code></li>
</ul>
</li>
<li>add_compile_options 添加编译参数<ul>
<li><code>add_compile_options(-Wall -std=c++14 -o2)</code></li>
</ul>
</li>
<li>add_executable 生成可执行文件，编译 mian.cpp 生成可执行文件 main<ul>
<li><code>add_executable(mian mian.cpp)</code></li>
</ul>
</li>
<li>target_link_libraries 为 target 添加需要连接的共享库 相当于 -l 参数<ul>
<li><code>target_link_libraries(mian hello)</code> 将 hello 动态库链接到 mian 中</li>
</ul>
</li>
<li>add_subdirectory 向当前工程添加源文件的子目录<ul>
<li><code>add_subdirectory(src)</code> src 文件夹中必须存在一个 CMakeList.txt</li>
</ul>
</li>
<li>aux_source_directory 发下一个目录下所有的源文件并将列表存储在一个变量中，这个指令临时用来自动构建源文件列表 <strong>？？？？不懂</strong></li>
</ul>
<h2 id="CMake-常用变量"><a href="#CMake-常用变量" class="headerlink" title="CMake 常用变量"></a>CMake 常用变量</h2><ul>
<li>CMAKE_C_FLAGS gcc 编译选项</li>
<li>CMAKE_CXX_FLAGS g++ 编译选项</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 CMAKE_CXX_FLAGS 编译选项后追加 -std=c++11</span></span><br><span class="line"><span class="keyword">set</span>( CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li>CMAKE_BUILD_TYPE 编译类型(debug, release)</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure>



<h2 id="CMake-编译工程"><a href="#CMake-编译工程" class="headerlink" title="CMake 编译工程"></a>CMake 编译工程</h2><p>CMake 目录结构：项目主目录存在 CMakeLists.txt</p>
<p>两种方式设置编译规则：</p>
<ol>
<li>包含源文件的子文件夹包含 CMakeLists.txt 文件，主目录的 CMakelists.txt 通过 <code>add_subdirectory</code> 添加子目录即可</li>
<li>包含源文件的子文件夹未包含 CMakeLists.txt 文件，子目录的编译规则体现在主目录的 CMakeLists.txt 中</li>
</ol>
<h3 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h3><ul>
<li>手动编写 CMakeLists.txt </li>
<li>执行命令 <code>cmake PATH</code> 生成 Makefile (PATH 是顶层 CMakeLists.txt 所在的目录)</li>
<li>执行命令 <code>make</code> 进行</li>
</ul>
<h3 id="构建的两种方式"><a href="#构建的两种方式" class="headerlink" title="构建的两种方式"></a>构建的两种方式</h3><ul>
<li>内部构件，在当前文件夹下，执行 make 命令。<strong>杂乱无章</strong></li>
<li>外部构建 <strong>推荐</strong>，创建 build 文件夹，编译上级目录的 CMakeLists.txt 文件</li>
</ul>
<h3 id="CMake-实战"><a href="#CMake-实战" class="headerlink" title="CMake 实战"></a>CMake 实战</h3><p><img src="/.com//image-20220315155252463.jpg" alt="image-20220315155252463"></p>
<center>两个工程的结构</center>

<h4 id="构建-proj1"><a href="#构建-proj1" class="headerlink" title="构建 proj1"></a>构建 proj1</h4><p><code>g++ helloworld.cpp -o helloworld</code></p>
<ol>
<li>编写 CMakeLists.txt</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定版本号</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工程文件名</span></span><br><span class="line"><span class="keyword">project</span>(HELLOWORLD)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 g++ helloworld.cpp -o helloworld_cmake</span></span><br><span class="line"><span class="keyword">add_executable</span>(helloWorld_cmake helloworld.cpp)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>内部构建</strong>在 bash 中</p>
<ol>
<li><code>cmake .</code> 构建 <code>Makefile</code></li>
<li><code>make</code> make Makefile</li>
</ol>
</li>
<li><p><strong>外部构建</strong>在 bash 中</p>
<ol>
<li><code>mkdir build</code></li>
<li><code>cd build</code></li>
<li><code>cmake ..</code> 在 build 文件夹构建上一级目录的 <code>CMakeLists.txt</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 build 文件夹中构建</span></span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment"># 生成 Makefile</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># make Makefile make 是编译的过程</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/.com//image-20220315161112258.jpg" alt="image-20220315161112258"></p>
<center>外部构建</center>

<h4 id="构建-proj2"><a href="#构建-proj2" class="headerlink" title="构建 proj2"></a>构建 proj2</h4><p><code>g++ main.cpp ./src/swap.cpp -I ./include -o main</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(SWAP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件搜索路径 -I 选项</span></span><br><span class="line"><span class="keyword">include_directories</span>(./<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于 g++ main.cpp ./src/swap.cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp ./src/swap.cpp)</span><br></pre></td></tr></table></figure>



<h1 id="实战-proj3"><a href="#实战-proj3" class="headerlink" title="实战 proj3"></a>实战 proj3</h1><p><img src="/.com//image-20220315164644371.jpg" alt="image-20220315164644371"></p>
<p><code>g++ main.cpp src/Gun.cpp src/Solider.cpp -I ./include/ -o main</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(GO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -g -O2 -Wall -std=c++11&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp src/Gun.cpp src/Solider.cpp)</span><br></pre></td></tr></table></figure>



<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><h2 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// ***** 可执行文件路径</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build/main_cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// ***** 指向 Task.json 中的 Build</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Tasks-json"><a href="#Tasks-json" class="headerlink" title="Tasks.json"></a>Tasks.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// cd ./build</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/build&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// cmake ..</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;..&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">                </span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// make</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;make&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOrder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sequence&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="comment">// 调用 cmake 和 make 命令</span></span><br><span class="line">                <span class="string">&quot;cmake&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;make&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>常用 cmake 指令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定最小版本号</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目名称</span></span><br><span class="line"><span class="keyword">project</span>(GO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含头文件</span></span><br><span class="line"><span class="keyword">include</span>(./lib)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译参数</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -O2 -g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置编译模式 Debug | Release</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="keyword">add_executable</span>(main_cmake main.cpp [其他文件])</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>cmake</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/04/07/compute-network/</url>
    <content><![CDATA[<h1 id="HTTP-专题"><a href="#HTTP-专题" class="headerlink" title="HTTP 专题"></a>HTTP 专题</h1><ol>
<li>HTTP 报文</li>
<li>GET 和 POST 方法</li>
<li>Cookie 和 Session</li>
<li>HTTP 缓存</li>
<li>HTTPS</li>
</ol>
<h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><ul>
<li>请求行<ul>
<li>请求方法</li>
<li>HTTP 版本</li>
<li>URL</li>
</ul>
</li>
<li>首部行<ul>
<li>Connection 表示要不要持续链接</li>
<li>Accept-language 表示希望收到的语言版本</li>
</ul>
</li>
<li>空行</li>
<li>请求体：供 POST 方法使用</li>
</ul>
<h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><ul>
<li>响应行<ul>
<li>HTTP 版本</li>
<li>状态码：<a href="https://github.com/TieMuZhen/Blog/issues/87">HTTP 常见的状态码和适用场景</a></li>
<li>响应状态信息描述</li>
</ul>
</li>
<li>首部行</li>
<li>空行</li>
<li>响应体</li>
</ul>
<h2 id="GET-和-POST-方法的区别"><a href="#GET-和-POST-方法的区别" class="headerlink" title="GET 和 POST 方法的区别"></a>GET 和 POST 方法的区别</h2><ul>
<li>GET 方法把参数包含在 URL 中，POST 通过 Request Body 传递参数</li>
<li>GET 方法比 POST 方法更快<ul>
<li>POST 请求包含更多的首部行</li>
<li><strong>POST 先将请求头发送给服务器进行确认，然后才真正发送数据</strong></li>
</ul>
</li>
<li>GET 会将数据缓存起来</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>POST 更安全，不会作为 URL 的一部分，不会被缓存。</li>
<li>POST 发送的数据更大，GET 有 URL 长度限制</li>
<li>POST 能发送跟多的数据类型，GET 只能发送 ASCII 字符</li>
<li>POST 比 GET 慢</li>
<li>POST 一般用于修改和写入数据，GET 一般用于搜索排序和筛选</li>
</ul>
<h2 id="Cookie-和-Session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h2><ul>
<li>Cookie</li>
<li>Session</li>
<li>Cookie 和 Session 的联系</li>
<li>Cookie 和 Session 的区别</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>问题：Web 站点希望能够识别用户，来对用户进行专门化服务，就生成一个唯一 ID，作为<strong>索引</strong>在数据库中产生表项。</p>
<p>服务器通过一个包含 Set-cookie 首部行的 HTTP 响应报文进行响应。</p>
<ul>
<li>如果没有设置 Cookie 失效日期，他们仅保存在浏览器会话期间</li>
<li>大多数浏览器支持的 Cookie 最大存储的数据量是 <code>4K</code>，因此不用来保存大数据</li>
<li>Cookie 以明文的方式存储，并不安全</li>
<li>Cookie 是不跨域名的</li>
</ul>
<h4 id="Cookie-的修改和删除"><a href="#Cookie-的修改和删除" class="headerlink" title="Cookie 的修改和删除"></a>Cookie 的修改和删除</h4><p>Cookie <strong>并不提供修改和删除</strong></p>
<ul>
<li>如果想要<strong>修改</strong>，需要服务器在 HTTP 响应报文中返回一个<strong>同名</strong>的 Cookie</li>
<li>如果想要<strong>删除</strong>，只需要返回一个同名的 Cookie，并发 maxAge 设置为 0</li>
</ul>
<blockquote>
<p>注意：返回同名 Cookie 的时候，需要除 maxAge，value 之外的全部信息都和原 Cookie 相同</p>
</blockquote>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>client 访问 server 的时候，server 将 client 信息记录在 server 上面，这就是 session。</p>
<p>用户和服务器建立连接的时候，服务器会为其分配一个 SessionId</p>
<blockquote>
<p>Session 的生命周期</p>
</blockquote>
<ul>
<li>Session 在用户的第一次访问服务器的时候创建，只访问静态资源并不会创建 Session</li>
<li>server 会将长时间没有活动的 Session 从服务器内存中清除，此时 Session 便失效。Tomcat 的默认失效时间为 30 min</li>
<li>计时从 Session 未被访问的时候开始算起</li>
</ul>
<h3 id="Session-和-Cookie-的联系"><a href="#Session-和-Cookie-的联系" class="headerlink" title="Session 和 Cookie 的联系"></a>Session 和 Cookie 的联系</h3><p>Session 需要通过 Cookie 实现，服务器要向 client 发送一个 JSESSIONID 的 Cookie，它的值就是该 Session 的 id，Session 依据此 Cookie 来识别是否为同一用户</p>
<ul>
<li>该 Cookie 是服务器自动生成的，maxAge 一般为 <code>-1</code>，也就是关闭浏览器就会失效。</li>
<li>因此同一计算机的两个浏览器窗口访问服务器时会生成两个不同的 Session ，但是由子窗口会共享父窗口的 Cookie ，共享一个 Session</li>
</ul>
<h3 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h3><ul>
<li>存储位置</li>
<li>安全性</li>
<li>对服务器的影响</li>
<li>数据大小：Cookie 保存的数据最多不超过 <code>4k</code> ，一般浏览器限制一个站点最多保存 20 个 Cookie</li>
</ul>
<h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h2><p>一般只用于 GET 请求</p>
<img src="/.com//edfb851e-fa61-4386-9c10-bf2105f55331-12785011.jpg" alt="img" style="zoom:50%;">

<center>HTTP 缓存流程图</center>

<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><ul>
<li>引入 CA 使用数字证书来<strong>保证公钥的合法性</strong>，避免了中间人攻击。</li>
<li>使用<strong>非对称加密</strong>来约定<strong>对称加密</strong>要使用的 key</li>
<li><strong>信息传递过程</strong>使用<strong>对称加密</strong>来实现</li>
</ul>
<h3 id="HTTPS-的核心-SSL-x2F-TLS-协议的工作原理"><a href="#HTTPS-的核心-SSL-x2F-TLS-协议的工作原理" class="headerlink" title="HTTPS 的核心 SSL&#x2F;TLS 协议的工作原理"></a>HTTPS 的核心 SSL&#x2F;TLS 协议的工作原理</h3><ul>
<li>对称加密：如何约定密钥在计算机网络中存在问题，性能高很多</li>
<li>非对称加密：<strong>可以使用公钥模拟用户发送信息，也存在问题</strong>，</li>
</ul>
<h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p><strong>解决：第三方仿照 server 给 client 发送自己的公钥，并且中间截获的问题</strong></p>
<img src="/.com//attack1.cfda3eb1.png" alt="img" style="zoom: 80%;">

<center>中间人攻击，server 根本看不懂密文的内容</center>

<p>为了公钥传输的信赖性问题，第三方机构应运而生——证书颁发机构（CA，Certificate Authority）。CA 默认是受信任的第三方。CA 会给各个服务器颁发证书，证书存储在服务器上，并附有 CA 的<strong>电子签名</strong></p>
<ol>
<li>client 向 server 发送 HTTPS 请求时</li>
<li>获取目标服务器的证书，并验证合法性</li>
<li>证书内存在 server 的公钥</li>
</ol>
<h4 id="如何生成数字签名"><a href="#如何生成数字签名" class="headerlink" title="如何生成数字签名"></a>如何生成数字签名</h4><ul>
<li>CA 使用<strong>散列</strong>技术生成一个<strong>摘要</strong>，并使用 CA 的密钥对<strong>摘要</strong>进行加密，然后将证书发给 server</li>
<li>server 将证书发给 client 时，client 向 CA 获取加密摘要所用的公钥，并自己计算摘要，与 CA 解密出来的摘要进行比对。</li>
<li>如果相同，则成功</li>
</ul>
<img src="/.com//image-20220313151431722.png" alt="image-20220313151431722" style="zoom:50%;">

<center>CA 数字签名的详细验证过程</center>

<p>总结：通过引入第三方机构 CA 对 server 的公钥进行验证。</p>
<img src="/.com//image-20220313151635199.png" alt="image-20220313151635199" style="zoom: 33%;">

<center>CA 的认证过程</center>

<ul>
<li>HTTP 协议运行在 TCP 之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。</li>
<li>HTTPS 是运行在 SSL&#x2F;TLS 之上的 HTTP 协议，SSL&#x2F;TLS 运行在 TCP 之上。所有传输的内容都经过加密，加密采用<strong>对称加密</strong>，但<strong>对称加密的密钥用服务器方的证书进行了非对称加密</strong>。所以说，HTTP 安全性没有 HTTPS 高，但是 HTTPS 比 HTTP 耗费更多服务器资源。</li>
</ul>
<h3 id="HTTPS-的工作流程"><a href="#HTTPS-的工作流程" class="headerlink" title="HTTPS 的工作流程"></a>HTTPS 的工作流程</h3><ul>
<li>client 向 server 发起 HTTPS 请求</li>
<li>server 将数字证书发送给 client</li>
<li>client 校正数字证书的合法性，如果不通过产生 HTTPS 警告信息</li>
<li>client <strong>通过公钥对对称加密要使用的 key 进行加密</strong>，发送给客户端</li>
<li>server 通过密钥解密对称加密要使用的 key</li>
<li>client 和 server 进行对称加密传输</li>
</ul>
<p>为什么不适用非对称加密？</p>
<ul>
<li>资源消耗远大于对称加密</li>
</ul>
<img src="/.com//image-20220314172756595.png" alt="image-20220314172756595" style="zoom: 33%;">





<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h2 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h2><ol>
<li><p>序号 &amp;&amp; 确认号 (32 位)</p>
<p>TCP 的 ACK 并不是立即发出的，因为 TCP 会采取累计确认的方式，一旦延迟期间后面的数据包也来了，就可以直接发送最新的 ACK，提高效率</p>
</li>
<li><p>首部长度 (4 位)</p>
<p>一个单位表示 4 字节，最长是 64 字节</p>
</li>
<li><p>窗口大小 (16 位)</p>
<p>用于流量控制，设置 cwnd</p>
</li>
<li><p>TCP 校验和 (16 位)</p>
</li>
</ol>
<h2 id="拥塞控制-amp-流量控制"><a href="#拥塞控制-amp-流量控制" class="headerlink" title="拥塞控制 &amp; 流量控制"></a>拥塞控制 &amp; 流量控制</h2><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>通过拥塞窗口实现</p>
<p>TCP 维持一个 cwnd 和一个门限值</p>
<ul>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ul>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>通过滑动窗口来实现</p>
<ul>
<li>发送方维持一个 rwnd，接收方可以通过 TCP 报文来控制 rwnd</li>
</ul>
<h3 id="拥塞控制和流量控制的区别"><a href="#拥塞控制和流量控制的区别" class="headerlink" title="拥塞控制和流量控制的区别"></a>拥塞控制和流量控制的区别</h3><ul>
<li>流量控制解决的是发送方和接收方<strong>速率不匹配</strong></li>
<li>拥塞控制解决的是<strong>避免网络资源被耗尽</strong>的问题，全局性。</li>
</ul>
<h2 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h2><p>通过 TCP 校验和实现，如果发现错误，则不发送 ACK，等待重传。</p>
<blockquote>
<p>应用层可以使用更强力的手段，例如 CRC</p>
</blockquote>
<h2 id="TCP-粘包、拆包"><a href="#TCP-粘包、拆包" class="headerlink" title="TCP 粘包、拆包"></a>TCP 粘包、拆包</h2><p>发生的原因：</p>
<ul>
<li>要发送的数据大于或小于 TCP 发送缓冲区剩余空间大小</li>
<li>待发送的数据大于 MSS</li>
</ul>
<p>解决方式：</p>
<ul>
<li>给每个数据包添加包首部，包含数据包的长度</li>
<li>在数据包之间设置边界，添加特殊字符等</li>
<li>设置消息定长</li>
</ul>
<h2 id="TCP-三次握手和四次挥手"><a href="#TCP-三次握手和四次挥手" class="headerlink" title="TCP 三次握手和四次挥手"></a>TCP 三次握手和四次挥手</h2><img src="/.com//watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA4oCNb09vT29Pb29PTw==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img" style="zoom:50%;">

<h2 id="TCP-与-UDP-的区别"><a href="#TCP-与-UDP-的区别" class="headerlink" title="TCP 与 UDP 的区别"></a>TCP 与 UDP 的区别</h2><table>
<thead>
<tr>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>面向连接，提供可靠交付</td>
<td>无连接，尽最大努力交付</td>
</tr>
<tr>
<td>面向字节流</td>
<td>面向报文</td>
</tr>
<tr>
<td>一对一</td>
<td>一对多、一对一、多对一、多对多</td>
</tr>
<tr>
<td>有拥塞控制、流量控制</td>
<td>首部开销小</td>
</tr>
</tbody></table>
<p>TCP：FTP、HTTP、HTTPS、SSH、SMTP、Telnet</p>
<p>UDP：DNS、DHCP、TFTP</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库原理一</title>
    <url>/2022/04/25/database1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>理解数据库系统结构</li>
<li>掌握数据库基本概念和理论知识</li>
<li>了解数据库技术发展的趋势</li>
<li>掌握关系代数、关系演算、SQL 语言</li>
</ul>
<h1 id="数据库发展史"><a href="#数据库发展史" class="headerlink" title="数据库发展史"></a>数据库发展史</h1><ul>
<li>数据管理技术史</li>
<li>数据库技术史</li>
<li>数据库应用系统体系结构的发展</li>
</ul>
<h2 id="数据管理技术发展史"><a href="#数据管理技术发展史" class="headerlink" title="数据管理技术发展史"></a>数据管理技术发展史</h2><h4 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h4><ul>
<li>数据的<strong>逻辑结构和物理结构相同</strong>，数据的组织方式必须由程序员自行设计和安排</li>
<li>数据不保存在机器中</li>
<li>没有专门的软件对数据进行管理</li>
<li>只有程序的概念，<strong>没有文件的概念</strong>。<strong>数据面向应用</strong></li>
</ul>
<h4 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h4><ul>
<li><strong>逻辑结构和物理结构有一定的区别</strong>，通过文件系统来实现两者的转化</li>
<li>数据可以长期保存在外存上</li>
<li>文件的逻辑结构多样化</li>
<li><strong>数据面向应用</strong>，对数据的访问以记录为单位。</li>
<li>数据可以被不用的程序重复利用</li>
</ul>
<p>缺点：</p>
<ul>
<li>数据冗余</li>
<li>数据不一致</li>
<li>数据联系弱</li>
</ul>
<h4 id="倒排文件系统"><a href="#倒排文件系统" class="headerlink" title="倒排文件系统"></a>倒排文件系统</h4><p>提高系统性能，对索引文件进行推广。</p>
<p><strong>优点</strong>：使用户不仅能用关键码，而且也能按字段的任何组合。容易地检索记录。很适合于信息检索系统。</p>
<p><strong>缺点</strong>：1. 索引占用更多存储空间 2. 数据更新比较困难</p>
<h4 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h4><p><strong>特点</strong></p>
<ul>
<li>面向全组织的复杂的数据结构，实现数据的结构化</li>
<li>有较高的数据独立性</li>
<li>系统提供了四个方面的控制功能<ul>
<li>数据库恢复</li>
<li>数据库并发控制</li>
<li>数据完整性</li>
<li>数据安全性</li>
</ul>
</li>
<li>数据的操作可以以<strong>数据项</strong>为单位，增加了系统的灵活性</li>
<li>用户可以采用程序方式或者交互方式操作数据库</li>
</ul>
<p><strong>数据库的三级模式结构</strong></p>
<p><img src="/.com//image-20220424214741945.png" alt="image-20220424214741945"></p>
<ul>
<li><p>模式 – 概念模式 – 全局模式</p>
<p>数据库中全部数据的整体逻辑结构的描述。<strong>描述了全局数据视图</strong></p>
<ul>
<li>与数据的物理存储结构无关</li>
<li>与具体用户应用程序、开发工具以及高级程序设计语言无关</li>
</ul>
</li>
<li><p>外模式</p>
<p>用户的数据视图，通常是模式的子集。</p>
<ul>
<li>保证了数据库的安全性提供了有力的措施</li>
</ul>
</li>
<li><p>内模式 – 存储模式</p>
<p>数据库的物理结构。定义了所有内部记录类型。实现了数据控制方面的细节。</p>
</li>
<li><p>模式 &#x2F; 内模式映像</p>
<p>用于定义模式和内模式之间的对应性。</p>
<ul>
<li>需要说明记录和内部记录之间的对应性</li>
<li>一般放在内模式中描述</li>
</ul>
</li>
<li><p>外模式 &#x2F; 模式映像</p>
<p>一般放在外模式中实现</p>
</li>
</ul>
<p><strong>物理独立性</strong></p>
<p>内模式修改，只需要对模式 &#x2F; 内模式映像，概念模式可以尽可能保持不变。</p>
<p><strong>逻辑独立性</strong></p>
<p>逻辑模式修改，只需要对外模式 &#x2F; 模式映像修改，就可以使外模式和应用程序尽可能保持不变。</p>
<h2 id="数据库发展史-1"><a href="#数据库发展史-1" class="headerlink" title="数据库发展史"></a>数据库发展史</h2><ol>
<li>IMS 系统 – <strong>层次模型</strong></li>
<li>DBTG 报告 – <strong>网状模型</strong>（Charls Batchman 网状数据库之父）</li>
<li>E.F.Codd 文章 – <strong>关系模型</strong></li>
</ol>
<h1 id="数据库系统结构"><a href="#数据库系统结构" class="headerlink" title="数据库系统结构"></a>数据库系统结构</h1><ul>
<li>数据描述</li>
<li>数据模型</li>
<li>逻辑模型</li>
<li>数据库体系结构</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>数据模型用于表示实体类型及实体之间联系的模型。通常使用概念数据模型和逻辑数据模型。</p>
<p>概念设计描述数据库的概念结构 – ER 模型</p>
<p>逻辑设计描述计算机的数据形式 – 逻辑模型（关系模型）</p>
<p><strong>概念数据模型</strong> – ER 模型</p>
<p><strong>逻辑数据模型</strong> – 结构数据模型</p>
<h3 id="ER-模型"><a href="#ER-模型" class="headerlink" title="ER 模型"></a>ER 模型</h3><p>独立于计算机系统的模型，用于建立信息世界的数据模型。</p>
<h3 id="逻辑数据模型"><a href="#逻辑数据模型" class="headerlink" title="逻辑数据模型"></a>逻辑数据模型</h3><p>面向数据库逻辑结构的模型</p>
<ul>
<li>数据结构：实体类型和实体联系的表达和实现</li>
<li>数据操作：数据库的 CRUD</li>
<li>数据完整性约束：<ul>
<li>实体完整型</li>
<li>参照完整型</li>
</ul>
</li>
</ul>
<h5 id="层次结构（指针导航）"><a href="#层次结构（指针导航）" class="headerlink" title="层次结构（指针导航）"></a>层次结构（指针导航）</h5><p>用<strong>有向树</strong>型结构表示实体类型及实体之间联系的模型称为层次模型。父子表示 1： N 的联系。</p>
<p>优点：易于实现、查询效率高</p>
<p>缺点：M：N 联系比较难实现、编写应用程序复杂</p>
<h5 id="网状结构（指针导航）"><a href="#网状结构（指针导航）" class="headerlink" title="网状结构（指针导航）"></a>网状结构（指针导航）</h5><p>有向图</p>
<p>优点：容易实现 M: N 联系、查询效率高</p>
<p>缺点：需要掌握数据库的逻辑结构才能编写对应的代码</p>
<h5 id="关系模型（关键码导航）"><a href="#关系模型（关键码导航）" class="headerlink" title="关系模型（关键码导航）"></a>关系模型（关键码导航）</h5><p>二维表格</p>
<p>使用外键表示实体之间的联系</p>
<p>优点：表格简单、用户易懂、编写程序不涉及存储结构和访问技术的问题</p>
<h5 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h5><p>能表达递归和嵌套的数据结构</p>
<h1 id="ER-模型-1"><a href="#ER-模型-1" class="headerlink" title="ER 模型"></a>ER 模型</h1><ul>
<li>实体、属性的基本概念</li>
<li>属性的分类</li>
<li>实体和属性的设计</li>
</ul>
<h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>客观存在可以互相分开的事物</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>实体的某一个特征。<strong>关键属性加下划线</strong></p>
<ul>
<li>基本属性：不可再分割的属性</li>
<li>复合属性：可以分割的属性</li>
</ul>
<p><img src="/.com//image-20220424223002648.png" alt="image-20220424223002648"></p>
<ul>
<li>单值属性：只能取一个值，例如：年龄</li>
<li>多值属性：可以取很多值，例如：学位（可以既是学士，又是硕士）。使用<strong>双椭圆</strong>表示</li>
</ul>
<p><img src="/.com//image-20220424223226688.png" alt="image-20220424223226688"></p>
<p><strong>表示多值属性的两种方法</strong></p>
<p>问题：简单的表示多值属性，将会产生大量的数据冗余，造成数据库的潜在数据异常、数据不一致性和完整性的缺陷。</p>
<ol>
<li><p>增加新的属性</p>
<p><img src="/.com//image-20220424223601653.png" alt="image-20220424223601653"></p>
</li>
<li><p>增加一个新的实体 1: M 的联系，<strong>弱实体</strong></p>
<p><img src="/.com//image-20220424223621280.png" alt="image-20220424223621280"></p>
</li>
</ol>
<ul>
<li><p>导出属性：可以通过其他的属性或者实体导出</p>
<p><img src="/.com//image-20220424223745292.png" alt="image-20220424223745292"></p>
</li>
</ul>
<h2 id="联系的设计和实现"><a href="#联系的设计和实现" class="headerlink" title="联系的设计和实现"></a>联系的设计和实现</h2><h3 id="一元联系"><a href="#一元联系" class="headerlink" title="一元联系"></a>一元联系</h3><ol>
<li>1: N 只需要一个关系模型</li>
<li>1: 1 只需要一个关系模型</li>
<li>M: N 需要两个，增加一个表示关系的表（表示零件和零件之间的关系）</li>
</ol>
<h3 id="二元联系"><a href="#二元联系" class="headerlink" title="二元联系"></a>二元联系</h3><ol>
<li>1: 1 需要两个</li>
<li>1: N 需要两个</li>
<li>M: N 需要三个，一个用于表示联系</li>
</ol>
<h3 id="三元联系"><a href="#三元联系" class="headerlink" title="三元联系"></a>三元联系</h3><ol>
<li>1:1:1 三张表 每张表加入两个外键</li>
<li>1:1:N 三张表，在 N 端加入两个外键</li>
<li>1:M:N 三张表，在 N 端和 M 端加入一个外键</li>
<li>M:N:P 四张表</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>弱实体</strong>：实体的主键部分或者全部从父实体中获得</p>
<p><strong>子类和超类</strong>：转换成关系模式的主键相同</p>
<h1 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h1><ul>
<li>概念：关系模型、关键码、关系的定义和性质、三类完整型规则</li>
<li>关系代数：基本操作、组合操作、扩充操作</li>
<li>关系演算：元组演算、域演算、关系演算的安全性和等价性</li>
<li>查询优化</li>
</ul>
<h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><h3 id="关系模型-E-F-Codd"><a href="#关系模型-E-F-Codd" class="headerlink" title="关系模型 E.F.Codd"></a>关系模型 E.F.Codd</h3><p>二维表格表示实体集、外键表示实体之间的联系。</p>
<p>关系：对应的二维表格，元组的集合、属性值域笛卡尔积的子集</p>
<p>元组：表中的<strong>行</strong></p>
<p>属性：表中的<strong>列</strong></p>
<p>域：属性的取值范围</p>
<h3 id="关键码"><a href="#关键码" class="headerlink" title="关键码"></a>关键码</h3><p>超键：可以推导出完成的属性集合</p>
<p>候选键：唯一标识元组的最小属性集合，极小的概念</p>
<p>主键：候选键的一个</p>
<p>外键：包含另一个关系的主键</p>
<h3 id="三类完整性"><a href="#三类完整性" class="headerlink" title="三类完整性"></a>三类完整性</h3><ul>
<li><p>实体完整性规则</p>
<p>元组的主键值不能为空</p>
</li>
<li><p>参照完整性规则</p>
<p>元组的外键值只能是空值或者对应参照关系中的某一个主键的值</p>
</li>
<li><p>用户定义的完整性规则</p>
<p>由应用环境决定</p>
</li>
</ul>
<h2 id="关系数据库语言"><a href="#关系数据库语言" class="headerlink" title="关系数据库语言"></a>关系数据库语言</h2><ul>
<li>关系代数语言：集合操作为基础</li>
<li>关系演算语言：谓词演算为基础<ul>
<li>元组关系演算</li>
<li>域关系演算</li>
</ul>
</li>
<li>SQL：基于关系代数和关系演算语言双重特点的语言</li>
</ul>
<h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><h4 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h4><ul>
<li><p>并</p>
</li>
<li><p>差</p>
</li>
<li><p>笛卡尔积：两个关系全部元组的连接</p>
<p>R 是 n 行 r 列的关系，S 是 m 行 s 列的关系。</p>
<p>$R \times S$ 是 nm 行 r + s 列的关系</p>
</li>
<li><p>选择</p>
</li>
<li><p>投影</p>
</li>
</ul>
<h4 id="组合运算"><a href="#组合运算" class="headerlink" title="组合运算"></a>组合运算</h4><ul>
<li><p>交：差</p>
<p><img src="/.com//image-20220425134214591.png" alt="image-20220425134214591"></p>
</li>
<li><p>联接：笛卡尔积、选择、投影</p>
<ul>
<li>θ 联接：一个逻辑运算表达式，当为 &#x3D;&#x3D; 的时候，称为等值连接</li>
<li>F 联接：多个 θ 的逻辑运算表达式的联接</li>
<li>自然联接：公共属性相等的联接</li>
</ul>
</li>
<li><p>除：笛卡尔积、投影、差</p>
<p><img src="/.com//image-20220425135015806.png" alt="image-20220425135015806"></p>
</li>
</ul>
<p><strong>常见题目</strong></p>
<ol>
<li><p>或：直接使用 或</p>
<p><img src="/.com//image-20220425140325751.png" alt="image-20220425140325751"></p>
</li>
<li><p>同时使用：笛卡尔积</p>
<p><img src="/.com//image-20220425140307218.png" alt="image-20220425140307218"></p>
</li>
<li><p>不使用：差</p>
</li>
<li><p>全部：除</p>
<p><img src="/.com//image-20220425140438969.png" alt="image-20220425140438969"></p>
</li>
</ol>
<h4 id="扩充关系代数"><a href="#扩充关系代数" class="headerlink" title="扩充关系代数"></a>扩充关系代数</h4><ul>
<li><p>外联接：缺少部分直接使用 null 表示</p>
<p><img src="/.com//image-20220425141340310.png" alt="image-20220425141340310"></p>
</li>
<li><p>外部并：两个关系直接并在一起，然后缺少的属性直接为空</p>
</li>
<li><p>半联接：<img src="/.com//image-20220425141442074.png" alt="image-20220425141442074"></p>
</li>
</ul>
<h3 id="关系演算"><a href="#关系演算" class="headerlink" title="关系演算"></a>关系演算</h3><p>以数理逻辑中的<strong>谓词演算</strong>为<strong>基础</strong>，用<strong>公式</strong>表示关系演算的条件</p>
<p>按照变量分为：</p>
<ul>
<li>元组关系演算</li>
<li>域关系演算</li>
</ul>
<h4 id="元组关系演算"><a href="#元组关系演算" class="headerlink" title="元组关系演算"></a>元组关系演算</h4><p><strong>原子公式</strong></p>
<p><img src="/.com//image-20220425141927129.png" alt="image-20220425141927129"></p>
<p><strong>约束变量和只有变量</strong></p>
<p><img src="/.com//image-20220425142010261.png" alt="image-20220425142010261"></p>
<p><strong>常见题目</strong></p>
<ol>
<li><p>使用两种：类似与笛卡尔积做法</p>
<p><img src="/.com//image-20220425145124165.png" alt="image-20220425145124165"></p>
</li>
<li><p>都使用：任意(蕴含(存在))</p>
<p><img src="/.com//image-20220425145144214.png" alt="image-20220425145144214"></p>
</li>
<li><p>不使用：任意(蕴含)</p>
<p><img src="/.com//image-20220425145208501.png" alt="image-20220425145208501"></p>
</li>
</ol>
<h3 id="域关系演算"><a href="#域关系演算" class="headerlink" title="域关系演算"></a>域关系演算</h3><p>将元组拆成元素</p>
<h3 id="安全性和等价性"><a href="#安全性和等价性" class="headerlink" title="安全性和等价性"></a>安全性和等价性</h3><p><img src="/.com//image-20220425152428192.png" alt="image-20220425152428192"></p>
<p>安全运算：不产生<strong>无限关系</strong>和<strong>无穷验证</strong>的运算称为安全运算。通常采用安全约束集 DOM</p>
<h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><ul>
<li>尽早执行选择操作</li>
<li>把笛卡尔积和其后的选择操作合并成 F 联接</li>
<li>同时运算选择和投影，避免多次扫描文件</li>
<li>适当预处理</li>
</ul>
<p><strong>步骤</strong></p>
<ol>
<li>把<strong>选择</strong>全部<strong>拆开</strong></li>
<li>把<strong>选择</strong>尽可能<strong>移动</strong>到<strong>树叶</strong>端</li>
<li>把<strong>投影</strong>尽可能<strong>移动</strong>到<strong>树叶</strong>端</li>
<li>把选择和投影<strong>合并</strong>为单个选择和投影</li>
<li>分组<ol>
<li>将二元运算和一元祖先节点和下面的一元运算节点组合。</li>
<li>如果二元运算是笛卡尔积。如果选择不能组成<strong>等值连接</strong>的时候，不能并未同一组</li>
</ol>
</li>
</ol>
<h1 id="结构化查询语言-SQL"><a href="#结构化查询语言-SQL" class="headerlink" title="结构化查询语言 SQL"></a>结构化查询语言 SQL</h1><ul>
<li>SQL 数据库的体系结构，SQL 的组成</li>
<li>SQL 的数据定义：数据库、基本表、索引的创建和撤销</li>
<li>SQL 的数据 CRUD</li>
<li>视图的创建和撤销，对视图更新操作的限制</li>
<li>嵌入式 SQL：预处理方法、使用规定、使用技术、动态 SQL 语句</li>
</ul>
<h2 id="SQL-数据库体系结构"><a href="#SQL-数据库体系结构" class="headerlink" title="SQL 数据库体系结构"></a>SQL 数据库体系结构</h2><p>外模式对应视图、模式对应基本表、内模式对应存储文件</p>
<p><strong>特点</strong></p>
<ul>
<li>一体化</li>
<li>两种使用方式，统一的语法结构</li>
<li>高度非过程化</li>
<li>语言简洁</li>
</ul>
<p><strong>组成</strong></p>
<ul>
<li>数据定义</li>
<li>数据操控</li>
<li>数据控制</li>
<li>嵌入式 SQL</li>
</ul>
<h2 id="SQL-数据定义"><a href="#SQL-数据定义" class="headerlink" title="SQL 数据定义"></a>SQL 数据定义</h2><p><strong>模式（命名空间）和数据库的创建和撤销</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> <span class="keyword">AUTHORIZATION</span> <span class="operator">&lt;</span><span class="keyword">USER</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> SCHEMA <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT]</span><br><span class="line"><span class="keyword">DROP</span> DATABASE <span class="operator">&lt;</span>NAME<span class="operator">&gt;</span> [CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure>

<p><strong>基本表的创建、修改和撤销</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> schema.name (</span><br><span class="line">	列名 类型,</span><br><span class="line">    完整性约束,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(SNO,PNO,JNO),</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY(SNO) <span class="keyword">REFERENCES</span> S(SNO),</span><br><span class="line">	<span class="keyword">CHECK</span>(QTY <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">10000</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 增加属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> name <span class="keyword">ADD</span> attribute type</span><br><span class="line"></span><br><span class="line"># 删除属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 基本表名 <span class="keyword">DROP</span> 属性名 [CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure>

<ul>
<li>主键子句 PRIMARY KEY()</li>
<li>外键子句 FOREIGN KEY()</li>
<li>检查子句 CHECK</li>
</ul>
<h2 id="SQL-的-CRUD"><a href="#SQL-的-CRUD" class="headerlink" title="SQL 的 CRUD"></a>SQL 的 CRUD</h2><p><img src="/.com//image-20220425155637159.png" alt="image-20220425155637159"></p>
<p>SELECT A FROM R WHERE F</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] A</span><br><span class="line"><span class="keyword">FROM</span> R</span><br><span class="line">[<span class="keyword">WHERE</span> F]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> a [<span class="keyword">HAVING</span> exp]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">array</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]；</span><br></pre></td></tr></table></figure>

<p><strong>执行过程</strong></p>
<ol>
<li>FROM 读取基本表，执行笛卡尔积运算</li>
<li>WHERE</li>
<li>GROUP HAVING</li>
<li>SELECT</li>
<li>ORDER</li>
</ol>
<p><strong>使用 EXIST 和 NOT EXIST 谓词表示全称量词和逻辑蕴含⭐</strong></p>
<ul>
<li><p>全称量词</p>
<p><img src="/.com//image-20220425170939340.png" alt="image-20220425170939340"></p>
<p>转化为不存在课程没有选修的学生</p>
<p><img src="/.com//image-20220425171004835.png" alt="image-20220425171004835"></p>
</li>
<li><p>逻辑蕴含</p>
<p><img src="/.com//image-20220425171104747.png" alt="image-20220425171104747"></p>
<p>与上面相类似</p>
</li>
</ul>
<p><strong>数据更新操作</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t (列名)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(val);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">SELECT</span> 查询语句;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">update</span></span><br><span class="line"><span class="keyword">UPDATE</span> t</span><br><span class="line"><span class="keyword">SET</span> t1 <span class="operator">=</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>

<h2 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h2><p>对于视图的更新 INSERT, DELETE, UPDATE</p>
<ol>
<li>多个表<strong>联接</strong>导出的话，不允许更新</li>
<li>使用了<strong>分组和聚合</strong>导出，不允许更新</li>
<li>从单个基本表导出，使用选择、投影导出，并且包含主键或某一个候选键，那么称为<strong>行列子集视图</strong>，并且可以被执行更新操作。</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> name (列表名)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> 查询语句</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"></span><br><span class="line"># 视图的更新操作</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> name </span><br><span class="line"><span class="keyword">VALUES</span> ()</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> name</span><br><span class="line"><span class="keyword">SET</span> t1<span class="operator">=</span>t2</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure>

<h2 id="嵌入式-SQL"><a href="#嵌入式-SQL" class="headerlink" title="嵌入式 SQL"></a>嵌入式 SQL</h2><ul>
<li>在终端交互方式，称为交互式 SQL</li>
<li>嵌入高级语言的程序中使用，称为嵌入式。高级语言称为宿主语言</li>
</ul>
<p><strong>高级语言和 SQL 的区别</strong></p>
<p>SQL 是基于关系数据模型的语言；高级语言是关于基本数据类型的语言。</p>
<p><strong>如何实现嵌入式 SQL</strong></p>
<ol>
<li>扩充宿主语言的编译程序，能够直接处理 SQL 语句</li>
<li>采用预处理的方式（多数系统采用）</li>
</ol>
<p><strong>预处理的实现</strong></p>
<ol>
<li>源程序扫描之后，识别出 SQL 语句。并处理成宿主语言的函数调用形式。</li>
<li>然后编译</li>
</ol>
<p>通常是 DBMS 的制造商提供一个 SQL 函数定义库，供编译的时候使用。</p>
<p><img src="/.com//image-20220425165325731.png" alt="image-20220425165325731"></p>
<p><strong>嵌入式 SQL 需要解决的问题</strong></p>
<ol>
<li><p>需要区分 SQL 语言和宿主语言</p>
</li>
<li><p>数据库工作单元和主程序工作单元之间的通信</p>
<ol>
<li><h5 id="允许嵌入式-SQL-语句引用宿主语言的程序变量"><a href="#允许嵌入式-SQL-语句引用宿主语言的程序变量" class="headerlink" title="允许嵌入式 SQL 语句引用宿主语言的程序变量"></a>允许嵌入式 SQL 语句引用宿主语言的程序变量</h5></li>
<li><p><strong>主语言不能引用数据库中的字段变量</strong></p>
</li>
</ol>
</li>
<li><p>SQLSTATUS 是一个特殊的共享变量，用于解释 SQL 语句的执行情况。0 表示成功。</p>
</li>
<li><p>引入游标机制，将集合操作转换为单元组处理。用于协调不同数据处理方式</p>
<ol>
<li>SQL 面向集合，一条 SQL 可以产生或处理多条记录</li>
<li>宿主语言面向记录</li>
</ol>
<p>与游标相关的语句</p>
<ol>
<li>定义游标 <code>EXEC SQL DECLEAR &lt;NAME&gt; CURSOR FOR &lt;SELECT&gt; END_EXEC</code></li>
<li>使用 OPEM 打开游标 <code>EXEC SQL OPEN &lt;NAME&gt; END_EXEC</code></li>
<li>推进游标 <code>EXEC SQL FETCH FROM &lt;游标名&gt; INTO &lt;变量表&gt; END_EXEC</code></li>
<li>关闭游标 <code>EXEC SQL CLOSE &lt;NAME&gt; END_EXEC</code></li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>python 编码规范</title>
    <url>/2022/04/11/encode-python/</url>
    <content><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>无特殊情况，文件一律使用 UTF-8 编码</li>
<li>无特殊情况，文件头部必须加入 <code># -*- coding: utf-8 -*-</code></li>
</ul>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul>
<li>统一使用 4 个空格进行缩进</li>
</ul>
<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><ul>
<li>自然语言，使用双引号。例如 <code>&quot;hello world&quot;</code></li>
<li>机器标识，使用单引号。</li>
<li>正则表达式，使用双引号。</li>
<li>文档字符串，使用三引号。</li>
</ul>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li><strong>模块级函数</strong>和<strong>类定义</strong>之间空两行</li>
<li><strong>类成员函数</strong>之间空一行</li>
<li><strong>函数中</strong>可以使用空行分隔出逻辑相关的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h3><ul>
<li>import 应该分行书写</li>
<li>import 应该使用 absolute import</li>
<li>import 放在文件头部，置于模块说明及 <code>docstring</code> 之后，与全局变量之前<ul>
<li><code>docstring</code></li>
<li>import</li>
<li>全局变量</li>
</ul>
</li>
</ul>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul>
<li>二元运算符两边</li>
<li>函数的参数列表 <code>, </code> 之后要有空格</li>
<li>函数的参数列表中，默认值等号两边不要加空格</li>
<li>括号不需要加空格，字典类似</li>
<li>不要添加多余空格，用于对齐 <code>=</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a, b=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">foo(&#123;a: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><blockquote>
<p>python 支持括号内的换行，第二行缩进到括号的起始处，<strong>参数对齐</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar = foo(a1, a2, </span><br><span class="line">a3, a4)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用反斜杠\换行，二元运算符+ .等应出现在行末；长字符串也可以用此法换行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.query(MyTable).\</span><br><span class="line">        filter_by(<span class="built_in">id</span>=<span class="number">1</span>).\</span><br><span class="line">        one()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>if &#x2F; for &#x2F; while 独占一行</p>
</blockquote>
<h3 id="Docstring"><a href="#Docstring" class="headerlink" title="Docstring"></a>Docstring</h3><p>作为文档的 Docstring 一般出现在模块的头部、函数和类的头部，这样在 python 中可以通过对象的 <code>__doc__</code> 对象获取文档。编辑器和 IDE 也可以根据 Docstring 给出自动提示。</p>
<ul>
<li>所有的公共模块、函数、类、方法，都应该写 <code>docstring</code>。私有方法不一定需要，def 后提供一个块注释来说明</li>
<li>docstirng 的结束，应该独占一行，除非只有一行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Return a foobar</span></span><br><span class="line"><span class="string">hello python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Oneline docstring&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>Google 风格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Example docstrings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module demonstrates documentation as specified by the `Google Python</span></span><br><span class="line"><span class="string">Style Guide`_. Docstrings may extend over multiple lines. Sections are created</span></span><br><span class="line"><span class="string">with a section header and a colon followed by a block of indented text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    Examples can be given using either the ``Example`` or ``Examples``</span></span><br><span class="line"><span class="string">    sections. Sections support any reStructuredText formatting, including</span></span><br><span class="line"><span class="string">    literal blocks::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $ python example_google.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Section breaks are created by resuming unindented text. Section breaks</span></span><br><span class="line"><span class="string">are also implicitly created anytime a new section starts.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块尽量使用小写命名，首字母保持小写，尽量不要使用下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的模块名</span></span><br><span class="line"><span class="keyword">import</span> decoder</span><br><span class="line"><span class="keyword">import</span> html_parser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的模块名</span></span><br><span class="line"><span class="keyword">import</span> Decoder</span><br></pre></td></tr></table></figure>

<h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><p>类名使用<strong>驼峰命名</strong>风格，首字母大写，私有类可用下划线开头。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Farm</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_PrivateFarm</span>(<span class="title class_ inherited__">Farm</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>将相关的类和顶级函数放在同一个 module 里. 不像 Java , 没必要限制一个类一个 module.</p>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数名一律小写，有多个单词，使用下划线隔开。私有函数在函数前加一个下划线。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_with_env</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_private_func</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><p>尽量使用小写，如有多个单词，使用下划线隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    school_name = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>使用全部大写 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MAX_CLIENT = <span class="number">100</span></span><br><span class="line">MAX_CONNECTION = <span class="number">1000</span></span><br><span class="line">CONNECTION_TIMEOUT = <span class="number">600</span></span><br><span class="line"></span><br><span class="line">MAX_OVERFLOW = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">Class FooBar:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo_bar</span>(<span class="params">self, print_</span>):</span><br><span class="line">        <span class="built_in">print</span>(print_)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="add-picture-use-relative-path"><a href="#add-picture-use-relative-path" class="headerlink" title="add picture use relative path"></a>add picture use relative path</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./<span class="variable">$&#123;filename&#125;</span>/name</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>java</title>
    <url>/2022/05/14/java/</url>
    <content><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h2><p>Tomcat 是 web 服务器。</p>
<p>默认端口号：8080</p>
<p>可以直接使用 bin&#x2F;startup.bat 启动</p>
<p>配置文件为 conf&#x2F;server.xml</p>
<p><del>一开始 Tomcat 访问不了的原因是放在了 x86 文件夹下</del></p>
<h3 id="网站的访问"><a href="#网站的访问" class="headerlink" title="网站的访问"></a>网站的访问</h3><ol>
<li>键入 url</li>
<li>检查本机 system32\drivers\etc\hosts 配置文件下查看是否存在该 url 的映射，如果存在直接返回 IP</li>
<li>访问 DNS 服务器，获得 IP</li>
</ol>
<h3 id="使用-Tomcat-发布一个网站"><a href="#使用-Tomcat-发布一个网站" class="headerlink" title="使用 Tomcat 发布一个网站"></a>使用 Tomcat 发布一个网站</h3><p>将 html 放在指定的 web 应用文件夹下</p>
<p>网站结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps: <span class="comment">// Tomcat 服务器的 web 目录</span></span><br><span class="line">	-ROOT</span><br><span class="line">   	-auggie: <span class="comment">// 网站目录名</span></span><br><span class="line">		-WEB-INF</span><br><span class="line">            -classes: <span class="comment">// java 程序</span></span><br><span class="line">            -lib: <span class="comment">// web 应用依赖的 jar 包</span></span><br><span class="line">            -web.xml: <span class="comment">// 网站配置文件</span></span><br><span class="line">		-index.html <span class="comment">// *默认网页</span></span><br><span class="line">      	-<span class="keyword">static</span></span><br><span class="line">            -css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20211230145352576.png" alt="image-20211230145352576"></p>
<h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>超文本传输协议，是一个简单的请求-响应协议。</p>
<ol>
<li>TCP</li>
<li>port：80</li>
</ol>
<p>HTTPS：安全的超文本传输协议</p>
<h3 id="HTTP-request"><a href="#HTTP-request" class="headerlink" title="HTTP request"></a>HTTP request</h3><p><img src="/.com//image-20211230145331177.png" alt="image-20211230145331177"></p>
<h3 id="HTTP-response"><a href="#HTTP-response" class="headerlink" title="HTTP response"></a>HTTP response</h3><p><img src="/.com//image-20211230145322009.png" alt="image-20211230145322009"></p>
<p>状态码：</p>
<ul>
<li>200：成功</li>
<li>404：找不到</li>
<li>3**：重定向</li>
<li>5**：服务器代码错误</li>
</ul>
<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="为什么要学习-Maven"><a href="#为什么要学习-Maven" class="headerlink" title="为什么要学习 Maven"></a>为什么要学习 Maven</h3><ol>
<li>JavaWeb 开发中，需要使用大量的 jar 包，我们需要手动导入</li>
<li>Maven 是一个自动导入和配置 jar 包的工具</li>
</ol>
<h3 id="Maven-介绍"><a href="#Maven-介绍" class="headerlink" title="Maven 介绍"></a>Maven 介绍</h3><p>Maven 的核心思想：<strong>约定大于配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bin: 可执行文件</span><br><span class="line">conf: 配置</span><br><span class="line">boot: 启动</span><br><span class="line">lib: 依赖</span><br></pre></td></tr></table></figure>

<h3 id="IDEA-中使用-Maven"><a href="#IDEA-中使用-Maven" class="headerlink" title="IDEA 中使用 Maven"></a>IDEA 中使用 Maven</h3><ol>
<li>创建 MavenWeb 项目</li>
</ol>
<p><img src="/.com//image-20211228140933067.png" alt="image-20211228140933067"></p>
<p><img src="/.com//image-20211228141305382.png" alt="image-20211228141305382"></p>
<p>上面图片的 groupId 配置错误（</p>
<ol start="2">
<li>IDEA 中的 Maven 设置</li>
</ol>
<p>Spring 中可能会使用 IDEA 自带的 Maven，所以我们可能需要在 IDEA 中配置 Maven。</p>
<h3 id="Maven-项目结构"><a href="#Maven-项目结构" class="headerlink" title="Maven 项目结构"></a>Maven 项目结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--mian</span><br><span class="line">	-java		<span class="comment">// 存放 java 代码</span></span><br><span class="line">	-resources	<span class="comment">// 存放一些配置文件</span></span><br><span class="line">--test</span><br><span class="line">	-java		<span class="comment">// 测试使用</span></span><br></pre></td></tr></table></figure>

<h3 id="在-IDEA-中配置-Tomcat"><a href="#在-IDEA-中配置-Tomcat" class="headerlink" title="在 IDEA 中配置 Tomcat"></a>在 IDEA 中配置 Tomcat</h3><p>左上角配置启动环境即可</p>
<h3 id="Maven-Webapp-项目结构"><a href="#Maven-Webapp-项目结构" class="headerlink" title="Maven Webapp 项目结构"></a>Maven Webapp 项目结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Lifecycle		<span class="comment">// maven 命令行操作</span></span><br><span class="line">-Plugins		<span class="comment">// 插件</span></span><br><span class="line">-Dependencies	<span class="comment">// 项目依赖</span></span><br></pre></td></tr></table></figure>

<h3 id="pom-xml-文件"><a href="#pom-xml-文件" class="headerlink" title="pom.xml 文件"></a>pom.xml 文件</h3><p>用于配置 maven 项目。只要将需要导入的包放在 dependencies 下面即可。</p>
<p>子项目无法识别父项目的时候，子模块加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auggie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>JavaWeb-Servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即可</p>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h3><ul>
<li>用于开发动态 Web 的技术</li>
</ul>
<p>把实现了 Servlet 接口的 Java 程序叫做 Servlet</p>
<h3 id="HelloSverlet"><a href="#HelloSverlet" class="headerlink" title="HelloSverlet"></a>HelloSverlet</h3><blockquote>
<p>Servlet 接口有两个默认的实现类：HttpServlet</p>
</blockquote>
<ol>
<li><p>构建 Maven 项目，删掉里面的全部东西，将依赖全部导入主工程</p>
</li>
<li><p>将 Servlet 建在 Module 中</p>
<ol>
<li><p>关于 Maven 父子工程的理解：</p>
<p>在父项目中建立一个 module，类似与继承</p>
</li>
</ol>
</li>
<li><p>Maven 环境优化</p>
<ol>
<li>修改 web.xml </li>
<li>将 maven 环境搭建完整</li>
</ol>
</li>
<li><p>实现 Servlet 程序</p>
<ol>
<li>编写一个实现 Servlet 接口的类</li>
<li>继承 HttpServlet</li>
</ol>
</li>
<li><p>编写 Servlet 的映射</p>
<ol>
<li><p>为什么需要映射</p>
<p>JAVA 程序需要使用浏览器访问，浏览器需要连接 Web服务器，所以我们需要 Web 服务器中<strong>注册</strong>我们写的 Servlet，<strong>并且给他一个浏览器能够访问的路径</strong>。</p>
<p>用户需要通过浏览器来访问 Web 服务器中的 Servlet。所以我们需要在 Web 服务器中注册 Servlet</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>	// 3</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.auggie.Servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> // 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>	// 2</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>		// 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java 程序需要 servlet 注册，给定一个 servlet 名字</p>
<p>然后将 servlet - name 映射到 url - pattern 上面</p>
</li>
<li><p>配置 Tomcat</p>
</li>
</ol>
<p><del>一开始使用的 Tomcat 是 10 版本，版本太高了（，导致版本不兼容</del></p>
<h3 id="Servlet-接口的实现"><a href="#Servlet-接口的实现" class="headerlink" title="Servlet 接口的实现"></a>Servlet 接口的实现</h3><h4 id="Servlet-interface"><a href="#Servlet-interface" class="headerlink" title="Servlet interface"></a>Servlet interface</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line">ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h4 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h4><p>通用小服务程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br></pre></td></tr></table></figure>

<h4 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h4><p>已经实现了 service 方法，我们只需要重写 service 调用的子方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException</span><br></pre></td></tr></table></figure>

<h3 id="Servlet-原理"><a href="#Servlet-原理" class="headerlink" title="Servlet 原理"></a>Servlet 原理</h3><p>Web 服务器收到浏览器请求之后，会调用 Servlet</p>
<p><img src="/.com//image-20211229105628159.png"></p>
<p>mapping 优先级：指定了固有映射的优先级最高。</p>
<h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>背景：登陆的时候，一个登陆全部都登陆了</p>
<p><strong>Web 容器</strong>在启动的时候，为 <strong>Web 程序</strong>都创建一个对应的 ServletContext 对象，代表当前的 Web 应用。</p>
<p>应用：</p>
<ul>
<li><p>共享数据（不同 Servlet 之间的数据通信）</p>
<p>在这个 Servlet 中的数据可以在另外一个 Servlet 中访问。</p>
</li>
<li><p>转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">&quot;dispatch&quot;</span>);</span><br><span class="line">        servletContext.getRequestDispatcher(<span class="string">&quot;/hello&quot;</span>).forward(req, resp);</span><br><span class="line">        System.out.println(<span class="string">&quot;finish&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	1. 转发之后，会返回</span></span><br><span class="line"><span class="comment">	2. 需要使用 forward(req, resp) 方法来执行跳转	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意事项：</p>
<ol>
<li><p>如果从 ServletContext 中读取一个不存在的对象，结果为空。</p>
</li>
<li><p>设置 resp 的字符集即可解决乱码问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><ol>
<li><p>响应状态码</p>
</li>
<li><p>响应体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletOutputStream <span class="title function_">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">PrintWriter <span class="title function_">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见应用</p>
<ol>
<li>向浏览器输出消息</li>
<li><strong>下载文件</strong><ol>
<li>获取文件的绝对路径</li>
<li>获取文件名，可以使用 trick 获得</li>
<li>设置响应头 + <strong>fileName</strong></li>
<li>创建 FileOutputStream, + <strong>realPath</strong></li>
<li>创建 OutputStream</li>
<li>创建 buffer</li>
<li>将 in 读取到 buffer 中，再将 buffer 中的数据读取到 out 中</li>
<li>关闭流对象</li>
</ol>
</li>
</ol>
<blockquote>
<p>File -&gt; FileOutputStream -&gt; Buffer -&gt; OutputStream -&gt; Client</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   	</span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\auggie\\Documents\\IDEA_programs\\MavenDemo\\Servlet\\Response\\target\\classes\\image\\1.jpeg&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：需要掌握 resp 的状态头，流对象的使用。</p>
</blockquote>
<pre><code> 3. **验证码，后端实现**
</code></pre>
<blockquote>
<ol>
<li><p>如何实现后台刷新</p>
<p>resp.setHeader(“refresh”, “5”);</p>
</li>
<li><p>在内存中创建图片</p>
<p>BufferedImage</p>
</li>
<li><p>创建随机数</p>
<ol>
<li>random</li>
<li>将 int 转化为 String 类<ol>
<li>“” + int</li>
<li>String.valueOf(int)</li>
</ol>
</li>
<li>保证随机数一定是等长的<ol>
<li>使用 StringBuffer 对象</li>
</ol>
</li>
</ol>
</li>
</ol>
</blockquote>
<ol start="4">
<li><p><strong>实现重定向</strong></p>
<p>页面跳转，该资源请求另外一个 Web 资源</p>
<p>重定向的路径从项目目录开始，跳转从当前目录开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.getServletContext().getRequestDispatcher(<span class="string">&quot;/down&quot;</span>).forward(req, resp);</span><br><span class="line">resp.sendRedirect(<span class="string">&quot;/resp/down&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.contextPath&#125;</span><br><span class="line">/%--项目当前路径--%/</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);					<span class="comment">// 防止乱码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);		<span class="comment">// 单个参数</span></span><br><span class="line">String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);	<span class="comment">// checkbox</span></span><br></pre></td></tr></table></figure>

<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p>作用：用于解决 HTTP 协议的无状态性。</p>
<p>从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。</p>
<h3 id="保存会话的两种会话技术"><a href="#保存会话的两种会话技术" class="headerlink" title="保存会话的两种会话技术"></a>保存会话的两种会话技术</h3><ol>
<li>Cookie		客户端会话技术</li>
<li>Session       服务器会话技术</li>
</ol>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>定义：Cookie 属于客户端会话技术，它是服务器发送给浏览器的小段文本信息，<strong>存储在客户端浏览器的内存中或硬盘上</strong>。当浏览器保存了 Cookie 后，<strong>每次访问服务器，都会在 HTTP 请求头中将这个 Cookie 回传给服务器。</strong></p>
<p>Cookie 中存的是键值对。可以使用 getCookie 方法获得全部的 Cookie 数组。然后使用 <code>getName()</code> 和 <code>getValue()</code></p>
<p>获取单个 Cookie 的值。</p>
<p><code>setMaxAge(int expiry)</code> 以秒为单位。</p>
<ol>
<li><p>String 转化为 Date 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> it.getValue();</span><br><span class="line"><span class="type">Long</span> <span class="variable">tmp</span> <span class="operator">=</span> Long.parseLong(value);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(tmp);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Date 转化为 String 输出</p>
<p><code>SimpleDateFormat</code></p>
</li>
</ol>
<p>访问其他页面的时候，会把 cookie 带过来。</p>
<p>缺点：</p>
<ul>
<li>在 HTTP 请求中，<strong>Cookie 是明文传递的，容易泄露用户信息，安全性不高。</strong></li>
<li>浏览器可以禁用 Cookie，一旦被禁用，Cookie 将无法正常工作。</li>
<li>Cookie 对象中只能设置文本（字符串）信息。</li>
<li>客户端浏览器保存 Cookie 的数量和长度是有限制的。</li>
</ul>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session 虽然属于服务端会话技术，但是它的实现离不开客户端浏览器和 Cookie 的支持。</p>
<p><img src="/.com//image-20211230131104256.png" alt="image-20211230131104256"></p>
<p>过程：</p>
<blockquote>
<ol>
<li>当客户端第一次请求会话对象时，服务器会创建一个 Session 对象，并为该 Session 对象分配一个唯一的 SessionID（用来标识这个 Session 对象）；</li>
<li>服务器将 SessionID 以 Cookie（Cookie 名称为：“JSESSIONID”，值为 SessionID 的值）的形式发送给客户端浏览器；</li>
<li>客户端浏览器再次发送 HTTP 请求时，会将携带 SessionID 的 Cookie 随请求一起发送给服务器；</li>
<li>服务器从请求中读取 SessionID，然后根据 SessionID 找到对应的 Session 对象。</li>
</ol>
</blockquote>
<p><strong>在 pom.xml 中设置 Session 存活时间</strong></p>
<p>以分钟为单位，默认是 30 min。Session-time 是 0 或者负数的时候，表示会话不会过期。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a>Cookie 和 Session 的区别</h3><p><a href="http://c.biancheng.net/servlet2/session.html">Servlet Session的使用 (biancheng.net)</a></p>
<p>上面总结的很全面</p>
<p><img src="/.com//image-20211230131258093.png" alt="image-20211230131258093"></p>
<h2 id="MVC-三层架构"><a href="#MVC-三层架构" class="headerlink" title="MVC 三层架构"></a>MVC 三层架构</h2><p>Module View Controller 模型视图控制器</p>
<p><img src="/.com//Users\auggie\Desktop\note\java\JavaWeb.assets\image-20211230140625096.png" alt="image-20211230140625096"></p>
<p>Module：</p>
<ul>
<li>业务处理（Service）：实现业务逻辑</li>
<li>数据持久层（DAO）：主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此</li>
</ul>
<p>View：</p>
<ul>
<li>展示数据</li>
<li>发起 Servlet 请求</li>
</ul>
<p>Controller：</p>
<ul>
<li>接受用户请求</li>
<li>交给业务层处理</li>
<li>控制视图跳转</li>
</ul>
<p>Demo：</p>
<ol>
<li>接受用户登陆请求（controller）</li>
<li>处理用户用户请求（controller）</li>
<li>交给业务层，判断是否合法（Module）</li>
<li>交给 DAO 层查询 DB 是否合法</li>
</ol>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>能够对 Servlet 容器传给 Web 资源的 request 对象和 response 对象进行检查和修改。</p>
<ul>
<li>在 Web 资源被访问前，检查 request 对象，修改请求头和请求正文，或对请求进行预处理操作。</li>
<li>将请求传递到下一个过滤器或目标资源。</li>
<li>在 Web 资源被访问后，检查 response 对象，修改响应头和响应正文。</li>
</ul>
<p><img src="/.com//image-20211230142142647.png" alt="image-20211230142142647"></p>
<p>作用：</p>
<ul>
<li>处理中文乱码</li>
<li>登陆验证</li>
</ul>
<p>注意事项：</p>
<ol>
<li>过滤器需要注册</li>
<li>doFilter 需要下传，如果不写程序将在这里停止。</li>
</ol>
<blockquote>
<ol>
<li>过滤器在 Web 服务器启动的时候，初始化</li>
<li>过滤器在 Web 服务器停止的时候，销毁</li>
</ol>
</blockquote>
<p>过滤经过 url 的全部请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterencoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.auggie.filter.ChineseCharacterFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterencoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterChain.doFilter(servletRequest, servletResponse); <span class="comment">// 不写程序直接停止运行</span></span><br></pre></td></tr></table></figure>

<h3 id="Filter-和监听器的应用"><a href="#Filter-和监听器的应用" class="headerlink" title="Filter 和监听器的应用"></a>Filter 和监听器的应用</h3><p>用户登陆之后才能看到主页，用户注销之后不能进入主页</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">-view</span><br><span class="line">--home		// 需要登陆之后才能进入 </span><br><span class="line">--login</span><br><span class="line">--error</span><br><span class="line"></span><br><span class="line">-controller</span><br><span class="line"></span><br><span class="line">-service</span><br><span class="line">--servlet/logout</span><br><span class="line">--servlet/login</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在 home.jsp 中重定向</p>
</li>
<li><p>使用过滤器实现</p>
<p>转化之后，才能获得 Session。</p>
<p>过滤器注册在什么地方？<strong>主页下面的一切</strong>，主页和其他页面分开</p>
</li>
</ol>
<p><strong>实现用户等级 id name level</strong></p>
<blockquote>
<p>小结：</p>
<p>过滤器实现拦截需要将网页放在不同的路径下。</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/.com//image-20211230145352576.png" alt="image-20211230145352576"></p>
<ol>
<li>一般方法<ol>
<li><code>servletResponse.setCharacterEncoding(&quot;utf-8&quot;);</code> 设置编码</li>
<li><code>servletResponse.setContentType(&quot;text/html&quot;);</code> 设置浏览器展示样式</li>
</ol>
</li>
<li>rep 常用方法<ol>
<li><code>getSession()</code></li>
<li><code>getCookie()</code></li>
<li><code>getParameter()</code></li>
<li><code>getParameterValues()</code></li>
</ol>
</li>
<li>Session 常用方法<ol>
<li><code>getAttribute(String)</code></li>
<li><code>setAttribute(String, Object)</code></li>
<li><code>removeAttribue(String)</code></li>
<li><code>invalidate()</code></li>
<li><strong><code>sendRedirect(Stirng Absoluteurl)</code></strong></li>
</ol>
</li>
<li>Cookie 常用方法<ol>
<li><code>getName(String)</code></li>
<li><code>getValue(String)</code></li>
</ol>
</li>
<li>resp 常用方法<ol>
<li><code>getWriter()</code></li>
<li><code>getOutputStream()</code></li>
<li><code>addCookie(String, String)</code></li>
</ol>
</li>
<li>ServletContext 常用方法 this.getServletContext()<ol>
<li><code>getAttribute(String)</code></li>
<li><code>setAttribute(String)</code></li>
<li><code>getRequestDispatcher(String url).forward(req, resp)</code></li>
</ol>
</li>
<li>Filter<ol>
<li><code>implements Filter</code></li>
<li><code>doFilter</code></li>
</ol>
</li>
</ol>
<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>加载驱动，生成 DriverManager 对象</li>
<li>通过 DriverManager 对象，生成数据库连接对象 connection</li>
<li>通过 connection 对象，生成执行环境对象 statement</li>
<li>通过 statement 对象，生成 resultSet 对象</li>
</ol>
<h2 id="加载-JDBC"><a href="#加载-JDBC" class="headerlink" title="加载 JDBC"></a>加载 JDBC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.java.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>创建数据库连接对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://IP:Port/DATABASE&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;bus&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure>

<h2 id="配置-properties-文件"><a href="#配置-properties-文件" class="headerlink" title="配置 properties 文件"></a>配置 properties 文件</h2><ol>
<li>编写 properties 文件</li>
<li>使用 <code>ClassName.class.getClassLoad().getResourceAsStream(&quot;file&quot;)</code>获取文件字节流</li>
<li>初始化，创建<code>Properties</code> 对象读取字节流<code>p.load(InputStream)</code></li>
<li>读取数据 <code>p.getProperty(&quot;name&quot;)</code></li>
</ol>
<p>不要加空格，不要加双引号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//47.101.155.92:3306/idea</span></span><br><span class="line">user=bus</span><br><span class="line">password=<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>从其他文件读取 .properties 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过类名访问文件加载器</span></span><br><span class="line"><span class="comment">// 通过文件加载器加载文件为字节流对象</span></span><br><span class="line"><span class="type">InputSream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> ClassName.class.getClassLoader().getresourceAsStream(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 properties 对象，用于读取 InputStream 对象</span></span><br><span class="line"><span class="type">Propertiers</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">p.load(InputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 properties 对象中读取信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">drive</span> <span class="operator">=</span> Properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="增删改查基本步骤"><a href="#增删改查基本步骤" class="headerlink" title="增删改查基本步骤"></a>增删改查基本步骤</h2><ol>
<li>创建连接对象 Connection</li>
<li>写 SQL 语句</li>
<li>获取 PerparedStatement 对象</li>
<li>修改 PerparedStatement 传入参数</li>
<li>执行 SQL 语句，得到结果集</li>
<li>处理结果集</li>
<li>关闭资源</li>
</ol>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建执行环境</span></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(String sql);</span><br></pre></td></tr></table></figure>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建环境</span><br><span class="line">PerparedStatement pstmt = connection.perpareStatement(sql);</span><br><span class="line">// 修改数据</span><br><span class="line">pstmt.setString(pos, val);</span><br><span class="line">// 更新数据</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">// setDate(), setInt() ...</span><br></pre></td></tr></table></figure>

<p>插入时间类型：</p>
<p>因为 java.util.Date 和 java.sql.Date 不同，所以需要相互转化。</p>
<p>Date(year, month, day)</p>
<p>Date(Long )</p>
<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="Mybatis3-简介"><a href="#Mybatis3-简介" class="headerlink" title="Mybatis3 简介"></a>Mybatis3 简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis – MyBatis 3 | 入门</a></p>
<h3 id="什么是-Mybatis"><a href="#什么是-Mybatis" class="headerlink" title="什么是 Mybatis"></a>什么是 Mybatis</h3><ol>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong>。</li>
<li>它支持自定义 SQL、存储过程以及高级映射。</li>
<li>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</li>
</ol>
<p>配置相关：</p>
<p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>数据持久化，将数据存在数据库中。</p>
<p>持久化就是将程序的数据在<strong>持久状态</strong>和<strong>瞬时状态</strong>转化的过程</p>
<p><strong>为什么需要持久化：</strong>内存断点即失，内存太贵了。存在一些数据不能丢失￥</p>
<h4 id="持久层-1"><a href="#持久层-1" class="headerlink" title="持久层"></a>持久层</h4><p>Dao层，Service层，Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层是界限明显的</li>
</ul>
<h3 id="为什么需要-mybatis，而不是直接使用-JDBC"><a href="#为什么需要-mybatis，而不是直接使用-JDBC" class="headerlink" title="为什么需要 mybatis，而不是直接使用 JDBC"></a>为什么需要 mybatis，而不是直接使用 JDBC</h3><ul>
<li>传统 JDBC 代码太复杂</li>
<li>用于简化 JDBC 的框架</li>
<li>自动化</li>
</ul>
<h2 id="第一个-Mybatis-程序"><a href="#第一个-Mybatis-程序" class="headerlink" title="第一个 Mybatis 程序"></a>第一个 Mybatis 程序</h2><ol>
<li><p>搭建环境 database，普通 maven </p>
</li>
<li><p>导入 mybatis</p>
<ol>
<li>mybatis</li>
<li>mysql</li>
<li>junite</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写代码</p>
<ol>
<li><p>创建一个 module</p>
</li>
<li><p>编写 mybatis 核心配置文件</p>
<p>在 resource 下建立一个 mybatis-config.xml 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://47.101.155.92:3306/idea?useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bus&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/auggie/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>编写 mybatis 工具类（类似 connection 对象）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.auggie.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 SqlSessionFactory 对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">            System.out.println(<span class="string">&quot;配置成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;配置失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写代码</p>
<ol>
<li>实体类 pojo</li>
<li>Dao <strong>接口</strong></li>
<li>接口实现类</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">&lt;--接口路径 + 函数名称 + 返回对象的泛型--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.auggie.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM idea.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>测试</p>
<ol>
<li><p>junite 测试</p>
<blockquote>
<ol>
<li>需要注册 Mapper</li>
<li>Maven 过滤掉 .xml 文件，（maven 资源导出失败）</li>
</ol>
</blockquote>
</li>
<li><p>步骤：</p>
<ol>
<li>创建 SqlSession 对象</li>
<li>创建接口对应的 mapper</li>
<li>调用接口定义的方法</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>遇到的问题：</p>
<ol>
<li>如果文件在 resources 目录下，可以直接使用文件名访问到该文件</li>
<li>mapper 中指定 .xml 文件需要使用 &#x2F;classes 下的路径</li>
<li>需要更新到最新版本</li>
<li>Maven 过滤掉除了 resources 目录下的 .xml 文件。</li>
<li>.xml 中不能添加中文（</li>
</ol>
<p>小结：</p>
<blockquote>
<ol>
<li>在 pojo 中创建实体类</li>
<li>在 Dao 中创建接口 XXX</li>
<li>设置 XXX.xml，设置 namespace，对应函数，返回的实体类，SQL 语句</li>
<li>在 mybatis-config.xml 中，创建 mapper</li>
</ol>
</blockquote>
<h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ol>
<li>在 xml 申明中 <code>parameterType = &quot;&quot;</code>传递参数使用 <code>#&#123;paraName&#125;</code>，需要指定具体的类。</li>
<li>需要指定具体的 select, insert, update, delete</li>
<li>CUD 需要提交事物，否则不成功。<code>sqlSession.commit()</code></li>
</ol>
<p>总结：</p>
<blockquote>
<p>编写</p>
<ol>
<li>编写接口</li>
<li>编写 mapper 中的 SQL 语句</li>
<li>xml 中配置 namespace</li>
</ol>
<p>使用</p>
<ol>
<li>创建 SqlSession 对象</li>
<li>创建接口对象 sqlSession.getMapper(Interface.class) </li>
<li>调用接口中的函数</li>
<li>提交事务</li>
<li>关闭 sqlSession 对象</li>
</ol>
</blockquote>
<h2 id="Map-amp-amp-模糊查询-LIKE"><a href="#Map-amp-amp-模糊查询-LIKE" class="headerlink" title="Map &amp;&amp; 模糊查询 (LIKE)"></a>Map &amp;&amp; 模糊查询 (LIKE)</h2><p>解决传递全部属性的问题（我只需要少数的几个参数就可以修改，不需要全部属性）</p>
<p>map 传递参数的好处：</p>
<ul>
<li>可以随意传递参数名</li>
<li>不需要全部参数</li>
</ul>
<p>模糊查询：</p>
<ul>
<li><code>where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</code></li>
<li><code>where name like #&#123;name&#125; // name == &quot;%name%&quot;</code></li>
</ul>
<h2 id="XML-配置解析"><a href="#XML-配置解析" class="headerlink" title="XML 配置解析"></a>XML 配置解析</h2><ol>
<li><p><strong>environment</strong></p>
<ol>
<li><p>可以配置多套环境，但是每次只能选用一套。</p>
</li>
<li><p>事物管理器 transactionManager</p>
<pre><code>1. JDBC
</code></pre>
<ol start="2">
<li>MANAGER</li>
</ol>
</li>
<li><p>dataSource</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://47.101.155.92:3306/idea?useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bus&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>properties</strong></p>
<p>编写 .properties 文件，在 mybatis-config.xml 中导入该文件</p>
<ul>
<li>可以直接引入外部配置文件（优先使用）</li>
<li>可以在 xml 中直接编写</li>
</ul>
</li>
<li><p><strong>typeAlias</strong></p>
<p>它仅用于 XML 配置，意在降低冗余的全限定类名书写。可以在所有 XML 中使用</p>
<ul>
<li><p>在 XML 文件中配置。（实体类少的时候）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Comment&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Comment&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Post&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Post&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Section&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Section&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Tag&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Tag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>在 interface 文件中配置。（实体类多的时候）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Alias(&quot;author&quot;)</span><br></pre></td></tr></table></figure>

<p>在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p>
</li>
</ul>
</li>
<li><p><strong>setting</strong></p>
<ul>
<li><strong>mapUnderscoreToCamelCase</strong> 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn.</li>
</ul>
</li>
</ol>
<ul>
<li><strong>logImpl</strong> 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</li>
</ul>
<h2 id="ResultSet-结果集映射"><a href="#ResultSet-结果集映射" class="headerlink" title="ResultSet 结果集映射"></a>ResultSet 结果集映射</h2><p>用于解决实体类和数据库属性字段名字不同的问题。</p>
<p>解决方法：</p>
<ol>
<li><p>SQL 中取别名</p>
</li>
<li><p>ResuletSet 结果集映射</p>
<img src="/.com//image-20220102165201143.png" alt="image-20220102165201143" style="zoom:50%;">

<p>自定义映射，<strong>如果是组合类对象如何解决？</strong></p>
</li>
</ol>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h3><p>将异常的 SQL 输出出来。</p>
<p><img src="/.com//image-20220102170130007.png" alt="image-20220102170130007"></p>
<ul>
<li><p>STDOUT_LOGGING</p>
</li>
<li><p>LOG4J</p>
<p>可以使用配置文件进行配置</p>
</li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p><strong>为什么需要分页？</strong></p>
<ul>
<li>数据量太大，需要分页展示</li>
<li>减少数据的处理量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT startIndex, pageSize;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT pageSize;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; <span class="title function_">getUserListByLimit</span><span class="params">(HashMap&lt;String, Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user LIMIT #&#123;startIndex&#125;, #&#123;pageSize&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><h3 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h3><ol>
<li>解耦</li>
<li>定义与实现的分离</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlogMapper</span> &#123;</span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">  Blog <span class="title function_">selectBlog</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱不堪。</p>
<p>因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<p>使用注解实现 CUD 的时候，需要使用 <code>autoCommit = true</code></p>
<p><strong>@Param</strong></p>
<ol>
<li>基本类型的参数或则 String 类型，需要加上</li>
<li>引用类型不需要加</li>
</ol>
<h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>自动生成方法。</p>
<p>可以放在类上，也可以放在字段上</p>
<blockquote>
<p>@Data 无参构造、Set、get、toString、hashCode、equals</p>
<p>@AllArgsConstructor 创建含有全部参数的构造方法</p>
<p>@NoArgsConstructor 创建无参构造</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="复杂查询环境的搭建"><a href="#复杂查询环境的搭建" class="headerlink" title="复杂查询环境的搭建"></a>复杂查询环境的搭建</h2><p>数据库结构：</p>
<p>Student 含有 Teacher 的外键</p>
<img src="/.com//image-20220104154243206.png" alt="image-20220104154243206" style="zoom:50%;">

<p>复杂属性的查询</p>
<ol>
<li>对象：association</li>
<li>集合：collection</li>
</ol>
<h3 id="多对一（学生-gt-学生-老师）"><a href="#多对一（学生-gt-学生-老师）" class="headerlink" title="多对一（学生 -&gt; 学生 + 老师）"></a>多对一（学生 -&gt; 学生 + 老师）</h3><p>查询所有学生信息，以及对应老师的信息</p>
<p>结构中包含另一个类</p>
<p><code>javaType</code> 表示一个具体的对象</p>
<ol>
<li><p>子查询</p>
<p>里面的 properties 都是 Student 的属性</p>
<p>内嵌 <code>select</code> 字段，调用其他函数，函数的入口是 <code>column</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.teacher WHERE id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>连表查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ttid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    SELECT s.id sid,</span><br><span class="line">    s.name sname,</span><br><span class="line">    t.id ttid,</span><br><span class="line">    t.name tname</span><br><span class="line">    FROM mybatis.student s,</span><br><span class="line">    mybatis.teacher t</span><br><span class="line">    WHERE s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="一对多（老师-gt-老师-学生）"><a href="#一对多（老师-gt-老师-学生）" class="headerlink" title="一对多（老师 -&gt; 老师 + 学生）"></a>一对多（老师 -&gt; 老师 + 学生）</h3><p>查询一个老师教授的全部学生</p>
<p>类中包含一个集合</p>
<ol>
<li>连表查询</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.auggie.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    SELECT t.id tid,</span><br><span class="line">           t.name tname,</span><br><span class="line">           s.id sid,</span><br><span class="line">           s.name sname</span><br><span class="line">    FROM mybatis.teacher t,</span><br><span class="line">         mybatis.student s</span><br><span class="line">    WHERE</span><br><span class="line">        t.id = #&#123;id&#125;</span><br><span class="line">        AND t.id = s.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>子查询</li>
</ol>
<h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。<strong>如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。</strong>利用动态 SQL，可以彻底摆脱这种痛苦。</p>
<p>根据不同的条件获得不同的 SQL 语句。</p>
<p><strong>都需要一个永真的条件开始</strong></p>
<h3 id="sql-标签"><a href="#sql-标签" class="headerlink" title="sql 标签"></a>sql 标签</h3><p>用于复用一些 <code>sql</code> 片段。</p>
<ol>
<li>最好不要包含 <code>where、set</code> 标签</li>
<li>不要包含太复杂的 SQL</li>
</ol>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        AND id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ol>
<li>使用 map 传入参数</li>
<li>使用 state &#x3D; ‘ACTIVE’</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    WHERE 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">        AND id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">        AND name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><p><strong>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。</strong></p>
<p>针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 <strong>switch</strong> 语句。</p>
<p>choose &lt;&#x3D;&gt; switch</p>
<p>when &lt;&#x3D;&gt; if, else if</p>
<p>otherwise &lt;&#x3D;&gt; default</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    WHERE 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            AND id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            AND name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND 1 = 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="where-trim-set"><a href="#where-trim-set" class="headerlink" title="where, trim, set"></a>where, trim, set</h3><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>用于解决出现前置 AND，OR 的情况</p>
<p><strong><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。</strong>而且，若子句的开头为 “AND” 或 “OR”，<strong><em>where</em> 元素也会将它们去除</strong>。</p>
<p>使用 <where> 优化上一段 XML 配置。</where></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">                AND id = #&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                AND name = #&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                AND 1 = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。</p>
<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>用于解决<strong>动态更新语句</strong>的后置 <code>，</code>的情况。<strong>投影不能使用</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>用于自定义匹配。</strong></p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>用于解决不定长条件。</p>
<p>这个元素也<strong>不会错误地添加多余的分隔符</strong>，看它多智能！</p>
<p>例如：需要查询学生 id 为 [1，2，3，…] 学生的全部信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mybatis.student <span class="keyword">WHERE</span> (id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">OR</span> id <span class="operator">=</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<p>既可以用在<strong>选择</strong>中，也可以用在<strong>投影</strong>中。<strong>但是在投影中，需要使用 ${} 不知道为什么（</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;get&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;alist&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;&quot;</span> <span class="attr">close</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            $&#123;item&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;, &quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>当使用可迭代对象或者数组时，<strong>index 是当前迭代的序号，item 的值是本次迭代获取到的元素。</strong></p>
</li>
<li><p>当使用 Map 对象（或者 Map.Entry 对象的集合）时，<strong>index 是键，item 是值。</strong></p>
</li>
</ol>
<p>foreach 组合条件条件查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">getFileWithAttribute</span><span class="params">(<span class="meta">@Param(&quot;departmentList&quot;)</span> List&lt;String&gt; departmentList, <span class="meta">@Param(&quot;limit&quot;)</span> <span class="type">int</span> limit)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getFileWithAttribute&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.auggie.experi.pojo.File&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM experiment.file</span><br><span class="line">    WHERE</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;departmentList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">open</span>=<span class="string">&quot;department IN (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;, &quot;</span>&gt;</span></span><br><span class="line">            #&#123;item&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    AND #&#123;limit&#125; &gt;= file.attribute</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>问题：查询连接数据库，消耗资源</strong></p>
<p>可以将一次查询的结果缓存下来，再次查询相同数据的时候，直接取走缓存中的数据。<strong>提高查询效率，解决高并发系统的性能问题。</strong></p>
<p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cache</span><br><span class="line">  eviction=&quot;FIFO&quot;</span><br><span class="line">  flushInterval=&quot;60000&quot;</span><br><span class="line">  size=&quot;512&quot;</span><br><span class="line">  readOnly=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</p>
<p>可用的<strong>清除策略</strong>有：</p>
<ul>
<li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li>
<li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li>
<li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li>
<li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li>
</ul>
<p>默认的清除策略是 <strong>LRU</strong>。</p>
<p><strong>flushInterval</strong>（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是<strong>一个以毫秒为单位的合理时间量</strong>。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</p>
<p><strong>size</strong>（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</p>
<p><strong>readOnly</strong>（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false。</p>
<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h2 id="javaJavaBean"><a href="#javaJavaBean" class="headerlink" title="javaJavaBean"></a>javaJavaBean</h2><p>JavaBean 是一种实体类</p>
<p>JavaBean 有特定的写法：</p>
<ul>
<li>必须有无参构造</li>
<li>属性必须私有化</li>
<li>必须有 get &#x2F; set 方法</li>
</ul>
<p>一般用于与数据库的字段做映射 ORM。Object Relational Mapping</p>
<p>ORM：对象属性映射</p>
<ul>
<li>表 -&gt; 类</li>
<li>字段 -&gt; 属性</li>
<li>行记录 -&gt; 对象</li>
</ul>
<h2 id="Spring-MVC-前置知识"><a href="#Spring-MVC-前置知识" class="headerlink" title="Spring MVC 前置知识"></a>Spring MVC 前置知识</h2><h3 id="Controller-amp-ResquestMapping"><a href="#Controller-amp-ResquestMapping" class="headerlink" title="Controller &amp; ResquestMapping"></a>Controller &amp; ResquestMapping</h3><p>本质还是 Servlet</p>
<p>传递参数需要使用 Model 对象，调用 <code>addAttribute </code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用注解在 Spring 中自动注册 Controller</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的 URL</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 将返回的信息放在 Model 中</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后跳转到 XXXX.hello.html，Spring 实现自动拼接</span></span><br><span class="line">        <span class="comment">// 只需要将 .html 放在 templates 下即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Restful-风格"><a href="#Restful-风格" class="headerlink" title="Restful 风格"></a>Restful 风格</h3><p>使用 Restful 风格可以让 URL 变得结构清晰</p>
<p>不使用 Restful：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello?a=1&amp;b=2</span></span><br></pre></td></tr></table></figure>

<p>使用 Restful:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello/1/2</span></span><br></pre></td></tr></table></figure>

<p>实现 Restful 风格：</p>
<p>需要使用 <code>@PathVariable</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a,<span class="meta">@PathVariable</span> <span class="type">int</span> b, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现转发和重定向"><a href="#实现转发和重定向" class="headerlink" title="实现转发和重定向"></a>实现转发和重定向</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// forword</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forword</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello1</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// redirect</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello2</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取前端数据-amp-数据回显"><a href="#获取前端数据-amp-数据回显" class="headerlink" title="获取前端数据 &amp; 数据回显"></a>获取前端数据 &amp; 数据回显</h3><p>servlet 中使用 getParam 参数</p>
<h4 id="获取前端数据"><a href="#获取前端数据" class="headerlink" title="获取前端数据"></a>获取前端数据</h4><ol>
<li><p>通过 URL 之后的参数获取。</p>
<p><strong>Restful</strong></p>
<p>@RequsetMapping(“&#x2F;hello&#x2F;{a}&#x2F;{b}”)</p>
<p>@ParamVarible</p>
<p>使用 ？传递参数</p>
<p>@RequestParam</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/hello/1/2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>​	如果前端传递参数和接受的参数不同的时候，可以使用 <code>@RequestParam(&quot;alias&quot;)</code> ，<strong>最好都加上</strong></p>
<ol start="2">
<li><p>前端传递 Class</p>
<p>直接使用 JavaBean，即可接受，接受失败返回 null</p>
<p><strong>如果为添加表单的话，建议使用 POST 方法，@PostMapping 这样就可以接收到 Class 参数。并且顺序无关。</strong></p>
</li>
</ol>
<h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><p><a href="https://www.yisu.com/zixun/216138.html">详解SpringMVC如何进行数据回显 - 编程语言 - 亿速云 (yisu.com)</a></p>
<ol>
<li>使用参数</li>
<li>使用 ModelMap</li>
<li>使用 Model</li>
</ol>
<p><img src="/.com//image-20220105222619527.png" alt="image-20220105222619527"></p>
<h2 id="微服务阶段"><a href="#微服务阶段" class="headerlink" title="微服务阶段"></a>微服务阶段</h2><ol>
<li>JavaSE ：oop</li>
<li>Mysql ：持久化</li>
<li>HTML, CSS, JS：视图层</li>
<li>JavaWeb ：开发 MVC 三层架构的网站</li>
<li>SSM ：Spring + Spring MVC + MyBatis 框架，简化开发流程，配置较为复杂</li>
</ol>
<p><strong>war：tomcat 运行</strong></p>
<p><strong>jar：内嵌 tomcat</strong></p>
<h3 id="该怎么学"><a href="#该怎么学" class="headerlink" title="该怎么学"></a>该怎么学</h3><p>Spring Boot：</p>
<ol>
<li>是什么</li>
<li>配置如何编写，yaml</li>
<li><strong>自动装配原理</strong></li>
<li>集成 Web 开发，SSM</li>
<li>集成数据库 Druid</li>
<li>分布式开发</li>
<li>接口文档</li>
<li>任务调度</li>
</ol>
<h2 id="什么是-Spring-Boot"><a href="#什么是-Spring-Boot" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h2><h3 id="什么是-Spring"><a href="#什么是-Spring" class="headerlink" title="什么是 Spring"></a>什么是 Spring</h3><p>容器，为了解决企业级应用开发的复杂性创建的。</p>
<h3 id="什么是-Spring-Boot-1"><a href="#什么是-Spring-Boot-1" class="headerlink" title="什么是 Spring Boot"></a>什么是 Spring Boot</h3><p>JavaWeb：Servlet + Tomcat</p>
<p>Spring Boot 就是一个 JavaWeb 的框架。<strong>约定大于配置</strong>。</p>
<h3 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h3><p>将服务拆分成很多小的模块。</p>
<h3 id="第一个-Spring-Boot-程序"><a href="#第一个-Spring-Boot-程序" class="headerlink" title="第一个 Spring Boot 程序"></a>第一个 Spring Boot 程序</h3><p>Controller 层用来写接口</p>
<p>通过 Maven 的 Package 就可以实现打包。使用 <code>java -jar XXX.jar</code> 就可以运行。</p>
<h2 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h2><p>pom.xml 中 spring-boot-dependencies 包含了核心依赖。因此编写依赖的时候，不需要指定具体的版本。</p>
<p>主函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标注这个类是一个 SpringBoot 的应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloworldApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 将 SpringBoot 程序启动</span></span><br><span class="line">        SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h2><p><code>application.*</code></p>
<h3 id="什么是-YAML-文件"><a href="#什么是-YAML-文件" class="headerlink" title="什么是 YAML 文件"></a>什么是 YAML 文件</h3><p>修改 SpringBoot 自动配置的默认值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 普通的 key-value</span></span><br><span class="line"><span class="string">name=</span> <span class="string">auggie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">	<span class="attr">name:</span> <span class="string">auggie</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">auggie</span>, <span class="attr">age:</span> <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 数组</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">brid</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">pet:</span> [<span class="string">cat</span>, <span class="string">dog</span>, <span class="string">brid</span>]</span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>YAML 可以直接给实体类注入值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dogdog</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>可以包含<code>$&#123;random.int&#125; $&#123;random.uuid&#125;</code> 来产生随机数</p>
<p><code>$&#123;person.hello: hello&#125;</code> 如果 <code>person.hello</code> 存在，则为 <code>person.hello</code>；不然为 hello</p>
<ol start="2">
<li>一般使用 @Value 给实体类赋值</li>
</ol>
<p>可以使用 YAML 配置端口：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>



<h3 id="JSR303-校验"><a href="#JSR303-校验" class="headerlink" title="JSR303 校验"></a>JSR303 校验</h3><p>应用：后端实现前端 <code>input</code> 标签中的<strong>校验</strong>功能。</p>
<p>例如：url，email 的校验。</p>
<p>需要导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加上注解即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="meta">@Email()</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不正确，则会报错。</p>
<p><a href="https://blog.csdn.net/weixin_44440642/article/details/106335653">JSR303校验</a></p>
<h3 id="多环境配置以及配置文件位置"><a href="#多环境配置以及配置文件位置" class="headerlink" title="多环境配置以及配置文件位置"></a>多环境配置以及配置文件位置</h3><p><code>application.yaml</code> 文件可以放在：(优先级从高到低)</p>
<p><img src="/.com//image-20220105201738841.png" alt="image-20220105201738841"></p>
<h2 id="SpringBoot-Web-开发"><a href="#SpringBoot-Web-开发" class="headerlink" title="SpringBoot Web 开发"></a>SpringBoot Web 开发</h2><p>Controller：@Controller</p>
<p>Dao：@Repository，使用 Dao 层，需要加上 @Autowired 注解</p>
<h3 id="静态资源的导入"><a href="#静态资源的导入" class="headerlink" title="静态资源的导入"></a>静态资源的导入</h3><p>放在 <code>resources/[public, resources, static]</code> 都行</p>
<p>其中优先级从高到低</p>
<ol>
<li>resources：存放上传文件</li>
<li>static：存放静态资源，图片</li>
<li>public：存放公共资源，大家都会访问的 js</li>
</ol>
<h3 id="首页和图标的定制"><a href="#首页和图标的定制" class="headerlink" title="首页和图标的定制"></a>首页和图标的定制</h3><p>templates 下的页面，只能通过 Controller 下面跳转。</p>
<h3 id="首页的定制"><a href="#首页的定制" class="headerlink" title="首页的定制"></a>首页的定制</h3><p>自定义 <code>index.html</code> 即可</p>
<h3 id="图标自定义"><a href="#图标自定义" class="headerlink" title="图标自定义"></a>图标自定义</h3><ol>
<li>创建 <code>/**/favicon.ico</code> </li>
<li>在 YAML 中创建 <code>spring.mvc.favicon.enable: false</code></li>
</ol>
<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>写一个模板，可以生成动态页面&#x2F;</p>
<p><img src="/.com//image-20220105222853586.png" alt="image-20220105222853586"></p>
<p>Maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将 html 存放在 templates 目录下即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Thymeleaf-常见语法"><a href="#Thymeleaf-常见语法" class="headerlink" title="Thymeleaf 常见语法"></a>Thymeleaf 常见语法</h4><p><a href="https://blog.csdn.net/qq_40693171/article/details/107008457?ops_request_misc=%7B%22request_id%22:%22164138353216780366591034%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164138353216780366591034&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107008457.first_rank_v2_pc_rank_v29&utm_term=thymeleaf&spm=1018.2226.3001.4187">Thymeleaf</a></p>
<h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><h3 id="首页搭建"><a href="#首页搭建" class="headerlink" title="首页搭建"></a>首页搭建</h3><h4 id="首页跳转的实现"><a href="#首页跳转的实现" class="headerlink" title="首页跳转的实现"></a>首页跳转的实现</h4><ol>
<li><p>可以使用 RequestMappering 跳转</p>
</li>
<li><p>也可以使用 MvcConfig 来配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="首页配置"><a href="#首页配置" class="headerlink" title="首页配置"></a>首页配置</h4><ol>
<li>将 html 放在 templates 下，将 css, js 放在 static 下</li>
<li><strong>html 中需要加入 thymeleaf 的标签，需要加上 thymeleaf 的超链接标签</strong></li>
</ol>
<h4 id="首页密码登陆"><a href="#首页密码登陆" class="headerlink" title="首页密码登陆"></a>首页密码登陆</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当有信息回写的时候，才会触发。</p>
<h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><p>实现 <code>HandlerInterceptor</code> 的接口。</p>
<p>登陆成功之后，应该有用户的 session。</p>
<ol>
<li>拦截器代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;userInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 类似 Model 的作用</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;please login first&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response); <span class="comment">// 转发请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>需要在 login 代码中添加 <code>HttpSession session</code>，然后给 session 添加值</p>
</li>
<li><p>需要在 MvcConfig 中配置拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceptor</span>())</span><br><span class="line">        .addPathPatterns(<span class="string">&quot;/sys/*&quot;</span>, <span class="string">&quot;/servlet/*&quot;</span>)</span><br><span class="line">        .excludePathPatterns(<span class="string">&quot;/servlet/login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>html 取出 session 的值，需要 <code>&lt;p&gt;hello, [[$&#123;session.userInfo&#125;]]&lt;/p&gt;</code> ，使用 [[${}]] 来操作。</p>
</li>
</ol>
<h4 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h4><h5 id="R"><a href="#R" class="headerlink" title="R"></a>R</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-strip table-sm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>department<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;emp : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getId()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;emp.getDepartment()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="CUD"><a href="#CUD" class="headerlink" title="CUD"></a>CUD</h5><p>需要使用 form 表单。如果使用 JavaBean 传递参数的话，建议使用 @PostMapping 接受参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/servlet/update&quot;)</span></span><br><span class="line"><span class="comment">// 从前端获取到参数</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">employeeUpdate</span><span class="params">(<span class="type">int</span> id, Employee employee)</span> &#123;</span><br><span class="line">    <span class="comment">// Controller 传递给 service / dao 层</span></span><br><span class="line">    employeeDao.updateEmployee(id, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/sys/home.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>跳转、action、重定向全部都是经过 servlet</strong></p>
<h4 id="处理-404-x2F-500"><a href="#处理-404-x2F-500" class="headerlink" title="处理 404 &#x2F; 500"></a>处理 404 &#x2F; 500</h4><p>只需要在 <code>templates</code> 下建立 <code>error</code> 文件夹。然后将 404 &#x2F; 500 放在该文件夹下即可。</p>
<h2 id="集成数据库"><a href="#集成数据库" class="headerlink" title="集成数据库"></a>集成数据库</h2><p>添加驱动</p>
<p><img src="/.com//image-20220106202050909.png" alt="image-20220106202050909"></p>
<ol>
<li><p>配置数据库连接文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>如果出错的话，需要添加时区。</p>
<p>自动产生对象 <code>datasource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>整合 Druid 数据源</p>
<p>导入 Maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置 YAML</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<p>配置 Druid</p>
<p><strong>不太想配（（（（</strong></p>
</li>
<li><p>MyBatis</p>
<p>Maven 配置，帮助 Spring Boot 快速配置 MyBatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>application.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/mybatis?useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">bus</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line"><span class="comment"># 整合 mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.databases.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/Mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.databases.Mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM mybatis.student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DAO：UserMapper 接口</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">// 注解表示这是一个 mybatis 的 mapper 类</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">// 注解表示这是一个 dao 层的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">queryStudentList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Controller：StudentController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; students = userMapper.queryStudentList();</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache Shiro 是 Java 的一个安全框架。Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。这不就是我们想要的嘛，而且 Shiro 的 API 也是非常简单；</p>
<ol>
<li><p>导入 maven 依赖</p>
</li>
<li><p>编写 shiro.ini 配置文件</p>
</li>
<li><p>SQL 使用对象传递参数</p>
</li>
</ol>
<h2 id="返回-response"><a href="#返回-response" class="headerlink" title="返回 response"></a>返回 response</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/servlet/api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Employee <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础学习笔记</title>
    <url>/2022/05/14/html-css-vue/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="什么是-Vue"><a href="#什么是-Vue" class="headerlink" title="什么是 Vue"></a>什么是 Vue</h2><ul>
<li><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 view） 是一套构建用户界面的渐进式框架。</p>
</li>
<li><p>Vue 只关注视图层， 采用自底向上增量开发的设计。</p>
</li>
<li><p>Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><a href="https://unpkg.com/vue/dist/vue.js">https://unpkg.com/vue/dist/vue.js</a></li>
<li><a href="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js">https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.8/vue.min.js</a></li>
</ol>
<h2 id="第一个-vue-程序"><a href="#第一个-vue-程序" class="headerlink" title="第一个 vue 程序"></a>第一个 vue 程序</h2><h3 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el 挂载点"></a>el 挂载点</h3><ul>
<li><p>Vue 实例的作用范围是什么？</p>
<p>在 el 命中的内部都可以使用</p>
</li>
<li><p>是否可以使用其他的选择器？</p>
<p>可以使用</p>
<ul>
<li>id 选择器 id&#x3D;””，建议挂载在 div 下面 <code>#app</code></li>
<li>class 选择器 <code>.app</code></li>
<li>标签选择器</li>
</ul>
</li>
<li><p>作用域</p>
<ul>
<li>所有的双标签，除去 body，html</li>
<li>不持支单标签</li>
</ul>
</li>
</ul>
<h3 id="data-数据对象"><a href="#data-数据对象" class="headerlink" title="data 数据对象"></a>data 数据对象</h3><ul>
<li><p>基础类型 string</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">message:&quot;hello!&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组 array</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">campus:[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span><br></pre></td></tr></table></figure>

<p>可以使用数组索引访问</p>
</li>
<li><p>对象 object</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">school : &#123;</span><br><span class="line">	name:&quot;name&quot;,</span><br><span class="line">	mobile:&quot;xxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>支持全部渲染，也可以使用 <code>.</code> 访问</p>
</li>
</ul>
<h3 id="methods-属性"><a href="#methods-属性" class="headerlink" title="methods 属性"></a>methods 属性</h3><p>用于添加方法</p>
<h2 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h2><p>通过 vue 实现常见的网页效果</p>
<ol>
<li>内容绑定、事件绑定</li>
<li>显示切换、属性绑定</li>
<li>列表循环，表单元素绑定</li>
</ol>
<h3 id="内容绑定、事件绑定"><a href="#内容绑定、事件绑定" class="headerlink" title="内容绑定、事件绑定"></a>内容绑定、事件绑定</h3><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4><p>内容绑定</p>
<p>用于设置标签的内容</p>
<ol>
<li>标签内部使用 v-text 语法，<strong>只能全部替换</strong></li>
<li>使用插值表达式，<strong>支持部分替换</strong><ol>
<li>支持内部字符串拼接</li>
</ol>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; message + &quot; world&quot; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20220110165251780.png" alt="image-20220110165251780"></p>
<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>内容绑定</p>
<p>与 v-text 语法类似，但是设置的字符串是 html 标签的时候，<strong>v-html 会被解析出来</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;tmp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/.com//image-20220110165708426.png" alt="image-20220110165708426"></p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>事件绑定</p>
<p><img src="/.com//image-20220110170223158.png" alt="image-20220110170223158"></p>
<ul>
<li>传递兹定理参数</li>
<li>事件修饰符</li>
</ul>
<p>容器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    单击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    双击--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> @<span class="attr">dblclick</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    鼠标移入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> @<span class="attr">mouseenter</span>=<span class="string">&quot;doit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>vue 实例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var app = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            doit:function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                alert(&quot;go&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="comment">&lt;!--弹窗--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>更改页面显示：</strong></p>
<p>在事件中修改数据。</p>
<p>计数器案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span></span><br><span class="line">        -</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">        +</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">msg</span> &lt; <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> ++;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;too large&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sub</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">msg</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">msg</span> --;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;too small&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="显示切换、属性绑定"><a href="#显示切换、属性绑定" class="headerlink" title="显示切换、属性绑定"></a>显示切换、属性绑定</h3><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><p><strong>用于操作显示状态</strong></p>
<p>根据表达式的真假，切换元素的显示和隐藏。</p>
<p>可以直接在 v-show&#x3D;”” 中写表达式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/1.jpeg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../resources/2.jpeg&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!isShow&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>与 v-show 类似。</p>
<p>频繁切换的时候，使用 v-show，否则使用 v-if</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>show<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><p>操作元素属性</p>
<h3 id="列表循环，表单元素绑定"><a href="#列表循环，表单元素绑定" class="headerlink" title="列表循环，表单元素绑定"></a>列表循环，表单元素绑定</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>用于列表循环遍历。</p>
<p><code>(item, index) in DS</code></p>
<p>可以动态修改</p>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>data 同步获得表单信息</p>
<p>实例，记事本：</p>
<ul>
<li>v-for</li>
<li>v-on</li>
<li>v-model</li>
<li>v-text</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;note&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;inputValue&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;add()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;noteArr.length&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">title</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in noteArr&quot;</span>&gt;</span></span><br><span class="line">                    &#123;&#123; index + 1 &#125;&#125;. &#123;&#123; item &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; noteArr.length &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;delAll()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: crimson&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> note = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#note&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">noteArr</span>: [<span class="string">&quot;name01&quot;</span>, <span class="string">&quot;name02&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">inputValue</span>: <span class="string">&quot;input string&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">del</span>: <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">delAll</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">noteArr</span> = [];</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">inputValue</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a>网络应用</h2><p>vue 如何结合网络数据开发应用</p>
<p>axios 网络请求库</p>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>功能强大的网络请求库</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://autumnfish.cn/api/joke</span><br></pre></td></tr></table></figure>



<h3 id="简单-axios-vue-程序"><a href="#简单-axios-vue-程序" class="headerlink" title="简单 axios + vue 程序"></a>简单 axios + vue 程序</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    getJoke: function () &#123;</span><br><span class="line">        var that = this;</span><br><span class="line">		// 函数中 this 已经改变，需要使用 that 将 this 存下来</span><br><span class="line">        axios.get(&quot;https://autumnfish.cn/api/joke&quot;).then(</span><br><span class="line">            function (response) &#123;</span><br><span class="line">                console.log(response.data)</span><br><span class="line">                that.msg = response.data;</span><br><span class="line">            &#125;,</span><br><span class="line">            function (error) &#123;</span><br><span class="line">                this.msg = &quot;error&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS-的导入方式"><a href="#CSS-的导入方式" class="headerlink" title="CSS 的导入方式"></a>CSS 的导入方式</h2><ol>
<li><p>在 html 中直接编写 style（内部样式）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    声明<span class="number">1</span>:XXX;</span><br><span class="line">    声明<span class="number">2</span>:XXX;</span><br><span class="line">    声明<span class="number">3</span>:XXX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>放在 CSS 文件夹中，引入 CSS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;CSS/style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>行内属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: cornflowerblue&quot;</span>&gt;</span>css<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>优先级：就近原则</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h3><ol>
<li><p>标签选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blanchedalmond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>id 选择器，id 全局唯一</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#test</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>不遵循就近原则，id &gt; class &gt; 标签</strong></p>
<h3 id="2-层次选择器"><a href="#2-层次选择器" class="headerlink" title="2. 层次选择器"></a>2. 层次选择器</h3><ol>
<li><p>后代选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>兄弟选择器</p>
<p><strong>选择下面一个兄弟</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.active</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用选择器</p>
<p><strong>当前标签下面的全部兄弟标签</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.active</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: cornflowerblue;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-结构伪类选择器"><a href="#3-结构伪类选择器" class="headerlink" title="3. 结构伪类选择器"></a>3. 结构伪类选择器</h3><ul>
<li>选中 ul 的第一个子元素</li>
<li>选中 ul 的最后一个子元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-属性选择器"><a href="#4-属性选择器" class="headerlink" title="4. 属性选择器"></a>4. 属性选择器</h3><p><strong>“value 是完整单词”</strong> 类型的比较符号: <strong>~&#x3D;</strong>, <strong>|&#x3D;</strong></p>
<p><strong>“拼接字符串</strong>“ 类型的比较符号: ***&#x3D;**, <strong>^&#x3D;</strong>, <strong>$&#x3D;</strong></p>
<p><strong>1. attribute 属性中包含 value:</strong>　</p>
<p>[attribute~&#x3D;value] 属性中包含独立的单词为 value，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title~=flower]</span>  --&gt;  &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;/<span class="selector-tag">i</span>/eg_tulip<span class="selector-class">.jpg</span>&quot; title=&quot;tulip flower&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>[attribute*&#x3D;value] 属性中做字符串拆分，只要能拆出来 value 这个词就行，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title*=flower]</span>   --&gt;  &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;/<span class="selector-tag">i</span>/eg_tulip<span class="selector-class">.jpg</span>&quot; title=&quot;ffffflowerrrrrr&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>2. attribute 属性以 value 开头:</strong></p>
<p>[attribute|&#x3D;value] 属性中<strong>必须是完整且唯一的单词</strong>，或者以 <strong>-</strong> 分隔开：，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[lang|=en]</span>     --&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;en&quot;&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;en-us&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>[attribute^&#x3D;value] 属性的<strong>前几个字母是 value 就可以</strong>，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[lang^=en]</span>    --&gt;  &lt;<span class="selector-tag">p</span> lang=&quot;ennn&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3. attribute 属性以 value 结尾:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute$=value]</span> 属性的后几个字母是 value 就可以，例如：</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[src$=<span class="string">&quot;.pdf&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><p>约定使用的标签名：</p>
<ul>
<li>span 标签：重点要突出的字，使用 span 标签套起来。</li>
</ul>
<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#font-test</span> &#123;</span><br><span class="line">    <span class="comment">/*字体*/</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span>, 微软雅黑;</span><br><span class="line">    <span class="comment">/*字体大小*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="comment">/*字体粗细*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="comment">/*字体颜色*/</span></span><br><span class="line">    <span class="attribute">color</span>: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ul>
<li>颜色</li>
<li>对齐方式</li>
<li>首行缩进</li>
<li>行高</li>
<li>装饰</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#text-test</span> &#123;</span><br><span class="line">    <span class="comment">/*居中*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/*首行缩进*/</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="comment">/*行高*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/*下划线、中划线...*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="comment">/**/</span></span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文本 与 图片对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>, <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span> id=&quot;text-test&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;../resources/<span class="number">1</span><span class="selector-class">.jpeg</span>&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;hello world&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="创建文件时"><a href="#创建文件时" class="headerlink" title="创建文件时"></a>创建文件时</h3><ol>
<li>使用 vue 开发。使用 vue ui 创建工程的时候，需要勾选两个服务 route 和它下面的一个。</li>
<li>需要添加 axios 插件，通过 <code>vue add axios</code> 来完成</li>
</ol>
<h3 id="编写文件时"><a href="#编写文件时" class="headerlink" title="编写文件时"></a>编写文件时</h3><ol>
<li>vue 是单文件项目，所有的文件都在一个 html 中，通过 ref-link 跳转到不同的 .vue 文件中，刷新页面</li>
<li>在 views 中编写页面之后，需要在 router 下面的 index.js 注册路由</li>
<li>在 app.vue 中，编写跳转标签</li>
</ol>
<h3 id="动态获取路由渲染-nav"><a href="#动态获取路由渲染-nav" class="headerlink" title="动态获取路由渲染 nav"></a>动态获取路由渲染 nav</h3><ol>
<li>通过 <code>$router.options.routes</code> 获取路由信息，通过 <code>v-for</code> 即可获取当前项</li>
</ol>
<h3 id="前端处理表格"><a href="#前端处理表格" class="headerlink" title="前端处理表格"></a>前端处理表格</h3><h4 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h4><ol>
<li>自带属性有 page-size，total 等</li>
<li>切换页面可以通过 current-change 函数实现</li>
</ol>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ol>
<li>只会通过当前页面来渲染页面</li>
</ol>
<h3 id="前端表单处理"><a href="#前端表单处理" class="headerlink" title="前端表单处理"></a>前端表单处理</h3><ol>
<li>可以前端校验表单的合法性</li>
<li>直接向后端提交 axios 请求，通过 ，追加表单信息</li>
<li>成功后，跳转</li>
</ol>
<h3 id="修改页的处理"><a href="#修改页的处理" class="headerlink" title="修改页的处理"></a>修改页的处理</h3><ol>
<li><p>update 页面如何获取数据</p>
<ol>
<li>旧页面通过 <code>$router.push(&#123;path: &#39;url&#39;, query:&#123;id: row.id&#125;&#125;)</code> 传递参数</li>
<li>新页面通过 <code>this.$route.query.id</code> 获取传递参数</li>
</ol>
</li>
<li><p>触发点击事件后，将 id 传到另一个页面</p>
</li>
<li><p>新页面通过 id 请求后台数据</p>
</li>
</ol>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol>
<li>添加 <code>created()&#123;&#125;</code> 函数可以在页面初始化的时候，刷新页面</li>
<li>动态刷新 <code>windows.location.reload()</code></li>
<li>跳转 <code>this.$router.push(&#123;path:&#39;&#39;, query:&#123;&#125;&#125;)</code></li>
</ol>
<h3 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h3><ol>
<li>axios 采用 https 链接报错，采用 http 链接</li>
<li>axios 需要在函数外面保存对象，<code>const _this = this</code></li>
</ol>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>使用 springboot + mybatis 实现</p>
<ol>
<li>controller 需要添加 <code>@Controller</code> 注解</li>
<li>service 需要添加 <code>@Service</code> 注解</li>
<li>dao 需要添加 <code>@Mapper @Repository</code> 注解</li>
<li>Test 需要给类添加 <code>@SpringBootTest</code> 和 函数添加 <code>@Test</code> 注解</li>
</ol>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.101.155.92:3306/studentms?setUnicode=true&amp;characterEncoding=utf8&amp;useAffectedRows=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">auggie</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.auggie.springboottest.bean</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure>

<p>*Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.auggie.springboottest.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM studentms.s;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="controller-文件"><a href="#controller-文件" class="headerlink" title="controller 文件"></a>controller 文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 restful 开发</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 指定根路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="comment">// 解决跨域问题</span></span><br><span class="line"><span class="meta">@CrossOrigin(&quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getStudentList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentMapper.getStudentList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="后端处理表格"><a href="#后端处理表格" class="headerlink" title="后端处理表格"></a>后端处理表格</h3><ol>
<li>编写获取数据大小的接口</li>
<li>编写根据当前页和页面大小的数据接口，restful 风格获取</li>
</ol>
<h3 id="后端表单处理"><a href="#后端表单处理" class="headerlink" title="后端表单处理"></a>后端表单处理</h3><ol>
<li>通过 @RequsetBody 获取 JSON 格式的信息</li>
<li>然后处理即可</li>
</ol>
<h3 id="一些常犯的错误"><a href="#一些常犯的错误" class="headerlink" title="一些常犯的错误"></a>一些常犯的错误</h3><ol>
<li>没有启动 mysql <code>service mysqld start</code></li>
<li>mybatis 通过对象传递参数的时候，需要在函数中添加 @Param 的注解，并且不需要在 xml 中配置 paramType</li>
</ol>
]]></content>
      <tags>
        <tag>vue</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2022/04/07/my-new-post/</url>
    <content><![CDATA[<h1 id="docker-安装以及-opengauss-安装"><a href="#docker-安装以及-opengauss-安装" class="headerlink" title="docker 安装以及 opengauss 安装"></a>docker 安装以及 opengauss 安装</h1><h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><ol>
<li><p>docker 依赖环境安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">   --add-repo \</span><br><span class="line">   https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker 引擎安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker 换源 阿里云</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://2e1o9u0t.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="opengauss-安装"><a href="#opengauss-安装" class="headerlink" title="opengauss 安装"></a>opengauss 安装</h2><ol>
<li><p>安装 opengauss 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull enmotech/opengauss</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name opengauss --privileged=<span class="literal">true</span> -d -e GS_PASSWORD=Secretpassword@123 -p 8181:5432 enmotech/opengauss</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
</li>
<li><p>开放安全组</p>
<p>在华为云安全组将 <code>8181</code> 端口开放，外部即可连接。</p>
</li>
<li><p>连接，选择 <code>postgre</code> 数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it opengauss sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 omm 用户</span></span><br><span class="line">su - omm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆数据库</span></span><br><span class="line">gsql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户，然后就可以用连接了，密码好像有强度要求。</span></span><br><span class="line">CREATE USER auggie CREATEROLE PASSWORD <span class="string">&#x27;3263265Rjc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有用户</span></span><br><span class="line">SELECT * FROM pg_user;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><h3 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker 命令 --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment"># 查看镜像</span></span><br><span class="line"></span><br><span class="line">docker search [] <span class="comment"># 搜索镜像</span></span><br><span class="line"></span><br><span class="line">docker pull repo:[tag] <span class="comment"># 下载镜像</span></span><br><span class="line"></span><br><span class="line">docker rmi -f [image ID | image name]</span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>有了<strong>镜像</strong>才可以创建<strong>容器</strong></p>
<h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [option] image</span><br><span class="line"></span><br><span class="line">--name=<span class="string">&quot;Name&quot;</span>	容器名字，用来区分容器</span><br><span class="line">-d 				后台方式运行</span><br><span class="line">-it 			使用交互方式运行</span><br><span class="line">-p				指定容器端口</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口</span><br><span class="line">	-p 容器端口</span><br><span class="line">-P				随机指定端口</span><br><span class="line">-e				配置环境</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@auggie ~]<span class="comment"># docker run -it centos</span></span><br><span class="line">[root@7eb2206cb300 /]<span class="comment"># exit</span></span><br></pre></td></tr></table></figure>

<h4 id="列出运行的容器"><a href="#列出运行的容器" class="headerlink" title="列出运行的容器"></a>列出运行的容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [option]</span><br><span class="line"></span><br><span class="line">-a		列出所有</span><br><span class="line">-q 		只列出编号</span><br><span class="line">-n=? 	查看最近运行</span><br></pre></td></tr></table></figure>

<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span>			关闭退出</span><br><span class="line">ctrl + p + q	不关闭退出</span><br></pre></td></tr></table></figure>

<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [-f] 容器ID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -q)</span><br><span class="line">docker ps -q | xargs docker <span class="built_in">rm</span> </span><br></pre></td></tr></table></figure>

<h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start <span class="built_in">id</span>		启动</span><br><span class="line">docker restart <span class="built_in">id</span>	重启</span><br><span class="line">docker stop <span class="built_in">id</span>		停止容器</span><br><span class="line">docker <span class="built_in">kill</span> <span class="built_in">id</span>		强制停止</span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p><strong>后台启动 docker</strong></p>
<p>通过 -d 后台启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@auggie ~]<span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo hello;sleep 1;done&quot;</span></span><br><span class="line">9819e426f325dac27c1180ea6239a637e059a3d9fe549d072e8be66a5d30d389</span><br><span class="line">[root@auggie ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS     NAMES</span><br><span class="line">9819e426f325   centos    <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   About a minute ago   Up About a minute             objective_zhukovsky</span><br></pre></td></tr></table></figure>

<p><strong>查看日志</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -ft --<span class="built_in">tail</span> n ID</span><br><span class="line"></span><br><span class="line">-f 		持续</span><br><span class="line">-t 		显示时间戳</span><br><span class="line">--<span class="built_in">tail</span> 	<span class="built_in">tail</span></span><br></pre></td></tr></table></figure>

<p><strong>查看 docker 内部的进程信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker top ID</span><br></pre></td></tr></table></figure>

<p><strong>查看容器元信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect ID</span><br></pre></td></tr></table></figure>

<p><strong>进入当前正在进行的容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入后台方式运行的容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入当前终端</span></span><br><span class="line">docker attach ID</span><br></pre></td></tr></table></figure>

<p><strong>从容器内拷贝文件到主机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ID:src dest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过卷来实现</span></span><br></pre></td></tr></table></figure>

<h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p><code>portainer</code> 是一个图形化界面管理工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8181:9000\</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立<strong>软件包</strong>，用来打包<strong>软件运行环境</strong>和基于环境开发的<strong>软件</strong>。</p>
<p>如何获得镜像：</p>
<ul>
<li>远程仓库下载</li>
<li>自己制作</li>
</ul>
<h3 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h3><blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<p>docker 下载时分层</p>
<blockquote>
<p>Docker 镜像加载原理</p>
</blockquote>
<ul>
<li>bootfs(boot file system)</li>
<li>rootfs(root file system)</li>
</ul>
<p>为什么 docker 中的 centos 很小？</p>
<p>对于一个精简的 OS，rootfs 可以很小。对于不同的 linux 发行版本，bootfs 基本一致，rootfs 会有差别。</p>
<h3 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h3><p>用于生成新镜像，相当于快照。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit </span><br><span class="line"></span><br><span class="line">docker commit -m=<span class="string">&quot;msg&quot;</span> -a=<span class="string">&quot;author&quot;</span> ID dest:[tag]</span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ ~]<span class="comment"># docker commit -m=&quot;add webapps&quot; -a=&quot;auggie&quot; bd01ec9750b6 tomcat01:1.0</span></span><br></pre></td></tr></table></figure>

<hr>
<p>简单总结 docker 的一些命令：</p>
<ul>
<li>镜像<ul>
<li>docker images</li>
<li>docker search</li>
<li>docker pull</li>
<li>docker rmi</li>
</ul>
</li>
<li>容器<ul>
<li>docker run</li>
<li>docker ps</li>
<li>docker inspect ID</li>
<li>docker top ID</li>
<li>docker logs -ft –tial n ID</li>
<li>exit &amp;&amp; ctrl + p + q</li>
<li>docker stop &#x2F; kill &#x2F; start &#x2F; restart</li>
</ul>
</li>
<li>容器 -&gt; 镜像<ul>
<li>docker commit -m&#x3D;”” -a&#x3D;”” ID img:[tag]</li>
</ul>
</li>
</ul>
<hr>
<h2 id="容器数据卷（数据持久化，双向绑定）"><a href="#容器数据卷（数据持久化，双向绑定）" class="headerlink" title="容器数据卷（数据持久化，双向绑定）"></a>容器数据卷（数据持久化，<strong>双向绑定</strong>）</h2><p>问题：如果容器删除，数据就会丢失！</p>
<p>需求：数据持久化</p>
<h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote>
<ol>
<li>使用命令挂载</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器内目录 </span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ ~]<span class="comment"># docker run -it -v /home/test:/home centos</span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker inspect ID</span></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;bind&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/home/test&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<h3 id="挂载-mysql"><a href="#挂载-mysql" class="headerlink" title="挂载 mysql"></a>挂载 mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v dest:src --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123 -d mysql</span><br></pre></td></tr></table></figure>



<h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><p>通过 <code>docker volume ls</code> 可以查看挂载，使用 <code>docker volume inspect Name</code> 可以查看挂载位置</p>
<ol>
<li><p>匿名挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ test]# docker run -d --name nginx03 -v /etc/nginx nginx</span><br><span class="line">00faee8254a84238b2f464e84b1501198276420cac82ffc2c62fbfd32a103b08</span><br><span class="line"></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;675fde039bc4823c18c279a40099e656cda5f351d18ae1410df561ee07bd591e&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/675fde039bc4823c18c279a40099e656cda5f351d18ae1410df561ee07bd591e/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/etc/nginx&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>


</li>
<li><p>具名挂载</p>
<p>含有名字的挂载</p>
</li>
</ol>
<blockquote>
<ol start="2">
<li>DockerFile</li>
</ol>
</blockquote>
<p>Dockerfile 用来构建 docker 镜像的构建文件</p>
<ol>
<li><p>编写 dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;volume01&quot;</span>, <span class="string">&quot;volume02&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -f ./dockerfile1 -t auggie/centos .</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>创建的两个容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">               &quot;Name&quot;: &quot;e77305721d3246561557da99c7adcfbfdbe25591746ce688bc38c60df2840a8d&quot;,</span><br><span class="line">               &quot;Source&quot;: &quot;/var/lib/docker/volumes/e77305721d3246561557da99c7adcfbfdbe25591746ce688bc38c60df2840a8d/_data&quot;,</span><br><span class="line">               &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">               &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">               &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">               &quot;RW&quot;: true,</span><br><span class="line">               &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">               &quot;Name&quot;: &quot;97203bca5396ef84cc8ed6ae0cce96d019dc2deb5dceae54c2e16fc167f8ea02&quot;,</span><br><span class="line">               &quot;Source&quot;: &quot;/var/lib/docker/volumes/97203bca5396ef84cc8ed6ae0cce96d019dc2deb5dceae54c2e16fc167f8ea02/_data&quot;,</span><br><span class="line">               &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">               &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">               &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">               &quot;RW&quot;: true,</span><br><span class="line">               &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       ],</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile 用于构建一个 docker 镜像</p>
<p>构建过程：</p>
<ol>
<li>编写一个 dockerfile 文件</li>
<li>docker build 构建成为一个<strong>镜像</strong></li>
<li>docker run 将镜像生成<strong>容器</strong></li>
</ol>
<h3 id="dockerfile-的构建过程"><a href="#dockerfile-的构建过程" class="headerlink" title="dockerfile 的构建过程"></a>dockerfile 的构建过程</h3><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><ol>
<li>每一个 keyword 都是大写字母</li>
<li>从上到下构建</li>
<li>每一个指令都会创建提交一个新的镜像层，并提交</li>
</ol>
<p>dockerfile ：用于构建 docker images</p>
<p>docker images 是通过 dockerfile 构建生成的镜像，最终发布和运行的产品</p>
<p>docker container 是通过 docker image 构建的容器</p>
<h3 id="dockerfile-的指令"><a href="#dockerfile-的指令" class="headerlink" title="dockerfile 的指令"></a>dockerfile 的指令</h3><ul>
<li><p>FROM</p>
<ul>
<li>这个镜像的妈妈是谁</li>
<li>指定基础镜像</li>
</ul>
</li>
<li><p>WORKDIR [dir]</p>
<ul>
<li>工作的根目录</li>
</ul>
</li>
<li><p>MAINTAINER</p>
<ul>
<li>指定维护者的信息</li>
</ul>
</li>
<li><p>RUN</p>
<ul>
<li>构建镜像的时候，需要运行的命令</li>
</ul>
</li>
<li><p>ADD</p>
<ul>
<li>添加文件，例如部署 tomcat，则要添加 tomcat 的压缩包</li>
</ul>
</li>
<li><p>COPY</p>
<ul>
<li>类似 ADD，将文件拷贝到镜像中</li>
</ul>
</li>
<li><p>WORKDIR</p>
<ul>
<li>镜像的工作目录</li>
</ul>
</li>
<li><p>VOLUME</p>
<ul>
<li>挂在卷</li>
</ul>
</li>
<li><p>EXPOSE</p>
<ul>
<li>暴露端口</li>
</ul>
</li>
<li><p>CMD</p>
<ul>
<li>指定这个容器启动的时候，需要运行的命令；只有最后一条会生效</li>
</ul>
</li>
<li><p>ENTRYPOINT</p>
<ul>
<li>指定这个容器启动的时候，需要运行的命令；可以追加</li>
</ul>
</li>
<li><p>ENV</p>
<ul>
<li>设置环境变量，用于设置 mysql 的密码</li>
</ul>
</li>
</ul>
<h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><ol>
<li>登陆 <code>docker login -u$user -p$pass</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login -u</span><br><span class="line"></span><br><span class="line">[root@iZuf694tmueqwc1qv0nwwdZ docker_programs]# docker login -uaugg1e</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>发布 <code>dcoker push username/name:[tag]</code><ol>
<li>镜像需要以 username&#x2F;repo 的格式命名</li>
</ol>
</li>
</ol>
<h3 id="发布-springboot-项目"><a href="#发布-springboot-项目" class="headerlink" title="发布 springboot 项目"></a>发布 springboot 项目</h3><ol>
<li><p>向 springboot 项目打包 .jar</p>
</li>
<li><p>编写 Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 jdk11 上面构建</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /auggie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 .jar 文件拷贝到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> docker-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露容器端口，但是需要在 run 的时候，使用 -p 绑定主机端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 build 容器的时候执行</span></span><br><span class="line"><span class="comment"># Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> \</span></span><br><span class="line"><span class="language-bash">	$$ find .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，在 docker 容器 run 的时候 运行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;hello docker&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，类似于 CMD，但是启动容器的时候，可以指定 --entrypoint 覆盖</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将 jar 包和 Dockerfile 发送到服务器</p>
</li>
<li><p><code>docker build -t &quot;name&quot; .</code> 构建镜像</p>
</li>
<li><p><code>docker run name -p 8080:8080</code> 生成容器</p>
</li>
</ol>
<h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2>]]></content>
      <tags>
        <tag>技术</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理 &amp; 文件管理 &amp; IO 管理</title>
    <url>/2022/04/18/os/</url>
    <content><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>&#x3D;&#x3D;问题：缓和 CPU 和磁盘之间的速度矛盾&#x3D;&#x3D;</p>
<p>解决：引入内存</p>
<p>&#x3D;&#x3D;为什么需要内存管理？&#x3D;&#x3D;</p>
<p><strong>为了更好的支持多道程序并发执行</strong>。引入多道程序的并发执行之后，进程之间共享的不仅仅是处理机，还有内存。若不对内存进行管理，容易导致内存数据混乱。限制程序的并发性。</p>
<p><strong>内存管理的主要功能：</strong>内存分配、 内存保护、 地址映射和内存扩充。 </p>
<p><strong>主要任务：</strong></p>
<ul>
<li>内存分配：为每道程序分配内存</li>
<li>内存保护：确保每道用户程序都只能在自己的内存空间里运行，彼此互不干扰。</li>
<li>地址映射：将地址空间的逻辑地址转换为内存空间与相对应的物理地址。</li>
<li>内存扩充：用于实现请求调用功能，置换功能等</li>
</ul>
<h2 id="程序的执行过程"><a href="#程序的执行过程" class="headerlink" title="程序的执行过程"></a>程序的执行过程</h2><p>预处理 -&gt; 编译 -&gt; 汇编 -&gt; <strong>链接（形成完成的逻辑地址）</strong> -&gt; 装入</p>
<blockquote>
<p>装入</p>
</blockquote>
<ul>
<li><p>绝对装入</p>
<p>在<strong>编译</strong>时，直接产生绝对地址</p>
<p>缺点：只适用于单道程序环境</p>
</li>
<li><p>静态重定位 可重定位装入</p>
<p>编译和链接的时候，都是用的是相对地址。在<strong>装入</strong>时，产生绝对地址</p>
<p>缺点：</p>
<ul>
<li>装入内存时，就需要分配程序所要求的全部内存空间。没有足够内存时，不能分配</li>
<li>运行时不能移动</li>
</ul>
</li>
<li><p>动态重定位 动态运行时装入</p>
<p><strong>程序运行</strong>时，产生绝对地址。需要重定位寄存器的支持</p>
<p>优点：允许程序在内存中发生移动，可以实现紧凑</p>
</li>
</ul>
<blockquote>
<p>链接</p>
</blockquote>
<ul>
<li><p>静态链接</p>
<p>在链接程序中，直接完成链接</p>
</li>
<li><p>装入时动态链接</p>
<p>边装入边链接</p>
</li>
<li><p>运行时动态链接</p>
<p>程序执行时动态链接，<strong>以段为基础</strong></p>
</li>
</ul>
<h2 id="内存分配方式"><a href="#内存分配方式" class="headerlink" title="内存分配方式"></a>内存分配方式</h2><ul>
<li>连续分配	<ul>
<li>单一连续分配</li>
<li>固定分区分配</li>
<li>动态分区分配<ul>
<li>首次适应</li>
<li>循环首次适应</li>
<li>最佳适应</li>
<li>最坏适应</li>
<li>快速适应</li>
<li>伙伴系统</li>
</ul>
</li>
</ul>
</li>
<li>对换</li>
<li>离散分配<ul>
<li>基本分页存储管理</li>
<li>基本分段存储管理</li>
<li>请求分页存储管理</li>
<li>请求分段存储管理</li>
</ul>
</li>
</ul>
<h3 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h3><blockquote>
<p>单一连续分配</p>
</blockquote>
<p>内存被分为系统区和用户区。系统区在低地址部分，用户区在高地址部分。</p>
<p>优点：</p>
<ul>
<li><strong>实现简单</strong></li>
<li>无外部碎片</li>
<li><strong>可以采用覆盖技术扩充内存</strong> </li>
<li>不一定需要内存保护</li>
</ul>
<p>缺点：</p>
<ul>
<li>只能用于当用户、单任务操作系统</li>
<li>有内部碎片</li>
<li>存储器利用效率极低</li>
</ul>
<blockquote>
<p>固定分区分配</p>
</blockquote>
<p><strong>一个进程只能选择一个分区</strong></p>
<p>分区方式：</p>
<ul>
<li>分区大小相等：缺乏灵活性</li>
<li>分区大小不等：增加了灵活性，可以满足不同大小进程需求</li>
</ul>
<p>优点：</p>
<ul>
<li>实现简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>当用户程序过大时，可能所有分区都不能满足需求</li>
<li>产生内部碎片，内存利用率低</li>
</ul>
<blockquote>
<p>动态分区分配 PPT P55</p>
</blockquote>
<ul>
<li><p>用什么数据结构记录空闲分区情况</p>
<ul>
<li>空闲分区表</li>
<li>空闲分区链</li>
</ul>
</li>
<li><p>分配算法</p>
<ul>
<li>首次适应<ul>
<li>空闲分区表以<strong>地址递增</strong>的次序排列</li>
<li>优点：优先利用内存低址部分的内存空间,保留了高址部分的大空闲区</li>
<li>缺点：<ul>
<li>低址部分不断划分，产生小碎片（内存碎块、零头）；</li>
<li>每次查找从低址部分开始，增加了查找的开销</li>
</ul>
</li>
</ul>
</li>
<li>循环首次适应<ul>
<li>从上次找到的空闲分区的<strong>下一个空闲分区开始查找</strong></li>
<li>优点：使内存空闲分区分布均匀，减少查找的开销</li>
<li>缺点：缺乏大的空闲分区</li>
</ul>
</li>
<li>最佳适应<ul>
<li>按其容量以<strong>从小到大</strong>的顺序</li>
<li>缺点：产生许多难以利用的小空闲区</li>
</ul>
</li>
<li>最坏适应<ul>
<li>按其容量以<strong>从大到小</strong>的顺序形成一空闲分区链</li>
<li>优点：剩下的空闲区还可以利用，同时查找效率很高。</li>
<li>缺点：缺乏大的空闲分区。</li>
</ul>
</li>
<li>快速适应（基于索引）<ul>
<li>问题：基于顺序搜索的动态分区分配算法，不适用于大型的系统。</li>
<li>引入：索引</li>
<li>根据其容量大小进行分类</li>
<li>优点：查找效率高，也不会产生内存碎片。</li>
<li>缺点：在分区归还主存时算法复杂，系统开销较大。</li>
</ul>
</li>
<li>伙伴系统（基于索引）<ul>
<li>按照 2 的整数幂将空闲分区分类</li>
<li>初始：整一个空间都是一块</li>
<li>分配：<ul>
<li>如果存在空闲分区，则分配</li>
<li>不然，向上查找分区，并且分裂</li>
</ul>
</li>
</ul>
</li>
<li>哈希算法<ul>
<li>通过 hash 实现，快速计算在 hash 表中的位置。</li>
</ul>
</li>
</ul>
<p>总结：</p>
<p><img src="/.com//image-20220419122112789.png" alt="image-20220419122112789"></p>
</li>
<li><p>回收算法</p>
<p>4 种情况</p>
</li>
</ul>
<p>优点：无内部碎片，有外部碎片</p>
<h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>&#x3D;&#x3D;问题：在小的内存空间运行大作业&#x3D;&#x3D;</p>
<p>覆盖是由程序员实现的，操作系统根据程序员提供的覆盖结构来完成<strong>程序段之间的覆盖</strong>。</p>
<p><img src="/.com//SouthEast.png" alt="图示"></p>
<p>子程序 C 运行完成之后，子程序 B 将其覆盖。</p>
<p>优点：扩充内存</p>
<p>缺点：对用户不透明，增加了用户负担。</p>
<h3 id="对换（交换）"><a href="#对换（交换）" class="headerlink" title="对换（交换）"></a>对换（交换）</h3><p>&#x3D;&#x3D;问题：在内存非常小的计算机上运行多道程序&#x3D;&#x3D;</p>
<p>条件：需要 IO 速度较高的外存</p>
<p>将内存中暂时不能运行或者暂时不用的数据和程序换出到外存上面。</p>
<p><strong>类型</strong></p>
<ol>
<li>整体对换：以进程为单位对换</li>
<li>部分对换：以页或者段为单位对换</li>
</ol>
<p>外存划分为：文件区、对换区</p>
<p><img src="/.com//image-20220419123417333.png" alt="image-20220419123417333"></p>
<p>优点：扩充内存</p>
<p><strong>覆盖与对换的区别</strong></p>
<ul>
<li>覆盖可<strong>减少一个进程运行所需的空间</strong>。对换可让整个进程暂存于外存中，<strong>让出内存空间</strong>。</li>
<li>覆盖是由<strong>程序员实现</strong>的，操作系统根据程序员提供的覆盖结构来完成程序段之间的覆盖。对换技术<strong>不要求程序员给出程序段之间的覆盖结构</strong>。</li>
<li>覆盖技术主要在<strong>同一个</strong>作业或进程中进行。对换主要在作业或进程<strong>之间</strong>进行。</li>
</ul>
<h3 id="离散分配"><a href="#离散分配" class="headerlink" title="离散分配"></a>离散分配</h3><h4 id="分页存储管理方式"><a href="#分页存储管理方式" class="headerlink" title="分页存储管理方式"></a>分页存储管理方式</h4><p>&#x3D;&#x3D;问题：固定分区分配会产生内部碎片，动态分区分配会产生外部碎片。对内存的利用率较低。同时希望尽量避免碎片的产生。&#x3D;&#x3D;</p>
<blockquote>
<p>什么是基本分页存储管理方式</p>
</blockquote>
<ul>
<li><p>不具备页面对换功能</p>
</li>
<li><p>不具有支持实现虚拟存储器的功能</p>
</li>
<li><p>要求把每个作业全部装入内存后方能运行</p>
</li>
</ul>
<blockquote>
<p>页面大小的选择</p>
</blockquote>
<p>小：</p>
<ul>
<li>内碎片小，内存利用率高</li>
<li>页表过长，占大量内存，管理开销大</li>
</ul>
<p>大：</p>
<ul>
<li>页表短，管理开销小</li>
<li>内碎片大，内存利用率低</li>
</ul>
<p>页面大小应当<strong>适中</strong></p>
<blockquote>
<p>地址变换机构</p>
</blockquote>
<ol>
<li><p>基本地址变换机构</p>
<p>需要页表寄存器 PTR</p>
<ol>
<li>判断页号是否越界</li>
<li>计算实际物理地址</li>
</ol>
<p>通过硬件自动完成</p>
<p>缺点：</p>
<ol>
<li>每次访存都需要进行地址变换（查询页表），降低速度 -&gt; TLB</li>
<li>每个进程引入页表，页表不能太大 -&gt; 多级页表</li>
</ol>
</li>
<li><p>具有快表的变换机构</p>
<p>需要快表（联想寄存器）</p>
<p>原理：程序的局部性</p>
</li>
<li><p>两级页表</p>
<p>&#x3D;&#x3D;问题：大页表占用大的连续存储空间&#x3D;&#x3D;</p>
<p>顶级页表 &#x3D; 页目录表 &#x3D; 外层页表</p>
<p>&#x3D;&#x3D;问题：没有必要让整个页表常驻内存，因为进程在一段时 间内可能只需要访问某几个特定的页面。&#x3D;&#x3D;</p>
<p>解决：类似于虚拟存储器，增加一位，是否在内存中。</p>
</li>
</ol>
<blockquote>
<p>优缺点</p>
</blockquote>
<p>优点：分页从根本上克服了外零头（地址空间、物理空间都分割）。<strong>内存利用率提高</strong>。</p>
<p>缺点：逻辑完整的信息分到不同的页面，<strong>执行速度降低</strong></p>
<h4 id="分段存储器"><a href="#分段存储器" class="headerlink" title="分段存储器"></a>分段存储器</h4><p>问题：克服分页的缺点</p>
<p>目的：满足用户的需求</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>便于编程</p>
<p><strong>用户</strong>常把自己的作业按逻辑关系划分成若干个段，每段都有自己的名字，且都从零开始编址。</p>
</li>
<li><p>信息共享</p>
<p>两个作业的段表项指向同一个共享的段。<strong>可重入代码</strong>可以共享（不属于临界资源）。</p>
</li>
<li><p>分段保护</p>
<ul>
<li>存取控制保护</li>
<li>地址越界保护</li>
</ul>
</li>
<li><p>动态链接</p>
</li>
<li><p>动态增长</p>
</li>
</ul>
<blockquote>
<p>特点</p>
</blockquote>
<p>段式的地址空间是二维的，因为没有办法给出一个整数便确定对应的物理地址。而<strong>需要显示的给出（段号，段内偏移量）</strong></p>
<blockquote>
<p>分段与分页的主要区别</p>
</blockquote>
<p>相同点：</p>
<ul>
<li>采用离散分配方式，通过地址映射机构实现地址变换</li>
</ul>
<p>不同点：</p>
<ul>
<li><strong>页是信息的物理单位</strong>，分页是为了满足系统的需要；<strong>段是信息的逻辑单位</strong>，含有意义相对完整的信息，是为了满足用户的需要。</li>
<li><strong>页的大小固定且由系统确定</strong>，由系统把逻辑地址分为页号和页内地址，由<strong>机器硬件实现</strong>；<strong>段的长度不固定</strong>，取决于用户程序，<strong>编译程序</strong>对源程序编译时根据信息的性质划分。</li>
<li>分页的作业地址空间是<strong>一维</strong>的；分段的作业地址空间是<strong>二维</strong>的,需要给出段名和段内地址。</li>
</ul>
<h4 id="段页式存储器"><a href="#段页式存储器" class="headerlink" title="段页式存储器"></a>段页式存储器</h4><blockquote>
<p>特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>分散存储，内存利用率较高</li>
<li>很好的满足用户需求，便于代码或数据共享，支持动态链接等</li>
</ul>
<p>缺点：</p>
<ul>
<li>一次访问转换成了三次访问</li>
</ul>
<p><img src="/.com//image-20220419145201131.png" alt="image-20220419145201131"></p>
<h3 id="虚拟存储器"><a href="#虚拟存储器" class="headerlink" title="虚拟存储器"></a>虚拟存储器</h3><blockquote>
<p>传统分配方式的特点</p>
</blockquote>
<ul>
<li>一次性：作业必须一次性全部装入内存后才能开始运行<ul>
<li>作业很大的时候，没有办法装入内存 -&gt; 覆盖</li>
<li>大量作业要求运行时，无法容纳所有作业，因此只有少量作业能运行，导致<strong>多道程序并发度下降</strong>。 -&gt; 对换</li>
</ul>
</li>
<li>驻留性：一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。<strong>浪费内存资源</strong></li>
</ul>
<blockquote>
<p>思想 – 局部性原理</p>
</blockquote>
<p>TLB，cache 的思想</p>
<ul>
<li>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行</li>
<li>空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。</li>
</ul>
<blockquote>
<p>虚拟存储器</p>
</blockquote>
<p>定义：指具有<strong>请求调入</strong>（不在内存中）功能和<strong>置换</strong>（内存满了）功能，能从逻辑上对内存容量加以扩充的一种存储器系统。 -&gt; 建立在<strong>离散分配</strong>的基础上</p>
<p><strong>特点</strong>：</p>
<ul>
<li>多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。</li>
<li>对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入、换出。 </li>
<li>虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大 于实际的容量。</li>
</ul>
<p><strong>容量</strong></p>
<ul>
<li>虚拟内存的<strong>最大容量</strong>是由计算机的<strong>地址结构</strong>（CPU寻址范围）确定的</li>
<li>虚拟内存的<strong>实际容量</strong> &#x3D;min（内存 + 外存，CPU寻址范围）</li>
</ul>
<blockquote>
<p>硬件支持 P168 PPT P14</p>
</blockquote>
<ol>
<li><p>表机制</p>
<p><img src="/.com//image-20220419150330112.png" alt="image-20220419150330112"></p>
<p><img src="/.com//image-20220419153632043.png" alt="image-20220419153632043"></p>
<p>段式具有<strong>增补位</strong>，用于表示该段是否动态增长。</p>
</li>
<li><p>缺页&#x2F;段中断机构</p>
</li>
<li><p>地址变换机构</p>
</li>
<li><p>段的共享与保护 PPT P70</p>
<ol>
<li><p>共享：类似于索引节点的 DAG 图</p>
</li>
<li><p>保护</p>
<ol>
<li><p>越界检查</p>
</li>
<li><p>存取控制检查</p>
</li>
<li><p>环保护机构</p>
<p>OS 位于 0 环</p>
<p><img src="/.com//image-20220419154843734.png" alt="image-20220419154843734"></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>内存分配策略 P171</p>
</blockquote>
<ul>
<li><p><strong>最小物理块数的确定</strong>：保证进程正常运行所需的最小物理块数</p>
</li>
<li><p><strong>物理块分配策略</strong>：</p>
<ul>
<li><p>固定分配局部置换</p>
<p>为进程分配的物理块数在整个运行期间都<strong>不再改变</strong>。</p>
<p>缺点：难以确定每个进程分配的物理块数，太少导致频繁缺页中断；太多，导致资源利用率下降</p>
</li>
<li><p>可变分配全局置换</p>
<p>当进程发生缺页，若系统中有 空闲的物理块，则分配一个物理块并装入缺页；</p>
<p>优点：可以动态增加物理块数</p>
<p>缺点：盲目增加物理块，导致并发能力下降；被选中的进程缺页率增加</p>
</li>
<li><p>可变分配局部置换</p>
<p>若某个进程发生缺页，则只能将自己的某个内存页换出。OS <strong>根据缺页率</strong>进行物理块分配的调整</p>
</li>
</ul>
</li>
<li><p><strong>物理块的分配算法</strong>：</p>
<ul>
<li>平均分配算法<ul>
<li>将系统中所有可供分配的物理块，平均分配给各个进程。</li>
<li>缺点: <strong>未考虑各进程本身的大小</strong></li>
</ul>
</li>
<li>按比例分配算法<ul>
<li>根据<strong>进程的大小</strong>按比例分配物理块。</li>
</ul>
</li>
<li>考虑优先权的分配算法<ul>
<li>在实际应用中，为了<strong>照顾重要的、急迫的作业</strong>尽快完成，应为它<strong>分配较多</strong>的内存空间</li>
<li>算法：<ul>
<li>一部分按比例分配给各进程；</li>
<li>一部分则根据各进程的优先权，适当地增加其相应份额，分配给各进程</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>页面调入策略</p>
</blockquote>
<p><strong>何时调入页面</strong></p>
<ul>
<li>预调页策略<ul>
<li>主要用于进程的<strong>首次调入</strong>时，由<strong>程序员指出</strong>应该先调入哪些页。</li>
</ul>
</li>
<li>请求调页策略<ul>
<li>当程序在运行中需要访问某部分程序和数据时，若发现其所在的页面不在内存，便立即提出请求</li>
<li>优点：由请求调页策略所确定调入的页，<strong>一定会被访问</strong>；请求调页策略比较<strong>容易实现</strong></li>
<li>缺点：每次<strong>仅调入一页</strong>，需花费<strong>较大的系统开销</strong>，增加了磁盘 I&#x2F;O的启动频率。</li>
</ul>
</li>
</ul>
<p><strong>何处调入页面</strong></p>
<ul>
<li><p>系统拥有足够的对换区空间：可以<strong>全部从对换区调入所需页面</strong>，以提高调页速度</p>
<p><img src="/.com//image-20220419152036780.png" alt="image-20220419152036780"></p>
</li>
<li><p>系统缺少足够的对换区空间：</p>
<ul>
<li><strong>不会被修改的文件（不放入对换区）</strong>，直接从文件区调入；当换出这些页面时，因为未修改不用换出，再调入时仍从文件区调入。</li>
<li><strong>可能被修改的部分（放入对换区）</strong>，换出时需调到对换区，换入时从对换区调入；</li>
</ul>
<p><img src="/.com//image-20220419152050064.png" alt="image-20220419152050064"></p>
</li>
<li><p>UNIX 方式：</p>
<ul>
<li>第一次从文件区调入</li>
<li>再次使用的时候，从对换区调入</li>
</ul>
<p><img src="/.com//image-20220419152252225.png" alt="image-20220419152252225"></p>
</li>
</ul>
<blockquote>
<p>页面置换算法</p>
</blockquote>
<ul>
<li>OPT	<ul>
<li><strong>算法无法实现，但可评价其他算法</strong></li>
<li>优点：保证获得最低的缺页率</li>
<li>缺点：无法预知一个进程在内存的若干个页面，哪个在未来最长时间内不再被访问。</li>
</ul>
</li>
<li>FIFO<ul>
<li>Belady 异常——当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</li>
<li>只有 FIFO 会产生 Belady 异常</li>
</ul>
</li>
<li>LRU<ul>
<li>硬件实现：寄存器（最小值）、栈（栈顶）</li>
</ul>
</li>
<li>CLOCK<ul>
<li>最近未用算法（NRU，Not Recently Used）</li>
<li>算法：扫描访问位</li>
<li>操作系统还应考虑<strong>页面有没有被修改过</strong>。在其他条件都相同时，应<strong>优先淘汰没有修改过的页面</strong>，<strong>避免I&#x2F;O操作。</strong></li>
</ul>
</li>
</ul>
<p><img src="/.com//image-20220419152938106.png" alt="image-20220419152938106"></p>
<blockquote>
<p>抖动 &amp; 工作集 P184 PPT P60</p>
</blockquote>
<p><strong>定义</strong>：刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动，或颠簸。</p>
<p><strong>原因</strong>：进程频繁访问的页面数目高于可用的物理块数（<strong>分配给进程的物理块不够</strong>）</p>
<p><strong>预防方法</strong></p>
<ul>
<li>采取可变分配局部置换</li>
<li>把工作集算法融入到处理机调度中</li>
<li>利用“L&#x3D;S”准则调节缺页率</li>
<li>选择暂停的进程</li>
</ul>
<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>文件系统的主要功能：</p>
<ul>
<li>对文件的基本操作</li>
<li>文件共享</li>
<li>文件保护</li>
<li>管理与磁盘的信息交换</li>
<li>完成逻辑结构 -&gt; 物理结构的转变</li>
</ul>
<p>文件系统结构：</p>
<p><img src="/.com//image-20220420105935784.png" alt="image-20220420105935784"></p>
<h2 id="文件系统的基本概念"><a href="#文件系统的基本概念" class="headerlink" title="文件系统的基本概念"></a>文件系统的基本概念</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件是存储在硬盘上的信息集合</p>
<blockquote>
<p>文件的组成：</p>
</blockquote>
<ul>
<li>数据项<ul>
<li>基本数据项</li>
<li>组合数据项</li>
</ul>
</li>
<li>记录：数据项的集合</li>
<li>文件：<ul>
<li>记录式文件：由相似的记录组成</li>
<li>流式文件：字符流文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>文件的属性</p>
</blockquote>
<ol>
<li>文件名</li>
<li>标识符</li>
<li>类型</li>
<li>位置</li>
</ol>
<blockquote>
<p>文件操作</p>
</blockquote>
<ol>
<li><p>文件的打开和关闭</p>
<p>将该文件的属性从外存拷贝到内存<strong>打开文件表</strong>的一个表目中，并将该表目的编号返回给用户。当用户需要操作的时候，可以利用系统返回的索引号向系统提出操作请求。关闭即关闭文件描述符</p>
</li>
<li><p>read write delete create</p>
</li>
</ol>
<h4 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h4><blockquote>
<p>无结构文件（流式文件）</p>
</blockquote>
<p>只能通过穷举搜索的方式。对基本信息单位操作不多的文件较适用于采用无结构文件。源程序文件、目标代码文件。</p>
<blockquote>
<p>有结构文件（记录式文件）</p>
</blockquote>
<ol>
<li><p>顺序文件</p>
<p>记录定长，顺序排列</p>
<ol>
<li>存储方式：顺序存储、链式存储</li>
<li>结构：串结构、顺序结构（排序）</li>
</ol>
</li>
<li><p>索引文件</p>
<p>解决：顺序文件存储可变长记录效率低的文件</p>
</li>
<li><p>索引顺序文件</p>
<p>解决：索引文件中一个记录对应一个表项，占用过多的额外空间</p>
<p>改进为：一个索引对应一组记录</p>
<p>可以优化查询效率</p>
</li>
<li><p>多级索引顺序文件</p>
</li>
</ol>
<h4 id="文件的物理结构"><a href="#文件的物理结构" class="headerlink" title="文件的物理结构"></a>文件的物理结构</h4><h5 id="文件分配方式（磁盘非空闲区的管理）"><a href="#文件分配方式（磁盘非空闲区的管理）" class="headerlink" title="文件分配方式（磁盘非空闲区的管理）"></a>文件分配方式（磁盘非空闲区的管理）</h5><blockquote>
<p>连续分配</p>
</blockquote>
<p>优点：1. 实现简单 2. 存取速度快</p>
<p>缺点：1. 文件长度不宜动态增长 2. 产生外部碎片</p>
<blockquote>
<p>链接分配</p>
</blockquote>
<p>&#x3D;&#x3D;问题：外部碎片和文件大小&#x3D;&#x3D;</p>
<ul>
<li><p>隐式链接：</p>
<ul>
<li>优点：方便文件的拓展，不会出现外部碎片。外存利用率高。</li>
<li>缺点：只支持顺序访问，<strong>不支持随机访问</strong>，查找效率低</li>
</ul>
</li>
<li><p>显式链接</p>
<ul>
<li>问题1：需要将物理块读入内存，查找效率低</li>
<li>解决1：引入 <code>FAT</code>，一个磁盘只有一个 FAT，开机的时候读入 FAT，常驻内存</li>
<li>问题2：指针需要消耗内存</li>
<li>解决2：将多个块并在一起，形成一个<code>簇</code></li>
<li>缺点：文件分配表需要消耗一定的内存</li>
<li>优点：支持随机访问和顺序访问。</li>
</ul>
</li>
</ul>
<blockquote>
<p>索引分配</p>
</blockquote>
<p>问题：</p>
<ul>
<li>不能支持高效的随机存取，需要在 FAT 中顺序查找</li>
<li>FAT 需要占用较大的内存空间</li>
</ul>
<p>优点：支持随机访问，文件拓展容易实现</p>
<p>缺点：索引表需要占用比较多的空间</p>
<ol>
<li>单级索引分配</li>
<li>多级索引分配<ol>
<li>解决：单级索引分配索引表过大的问题</li>
</ol>
</li>
<li>混合索引分配</li>
</ol>
<h5 id="文件存储空间管理（磁盘空闲区的管理）"><a href="#文件存储空间管理（磁盘空闲区的管理）" class="headerlink" title="文件存储空间管理（磁盘空闲区的管理）"></a>文件存储空间管理（磁盘空闲区的管理）</h5><ul>
<li><p>空闲表法</p>
</li>
<li><p>空闲链表法</p>
<ul>
<li>空闲盘块法</li>
<li>空闲盘区法</li>
</ul>
</li>
<li><p>位示图法</p>
</li>
<li><p>成组链接法</p>
<p>问题：空闲表法、空闲链表法不适用于大型文件系统。</p>
<p>解决：引入超级块</p>
<ul>
<li>需要读入内存，并且保持数据一致性</li>
</ul>
</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>解决：对文件实施有效的管理</p>
<ul>
<li><strong>实现 “按名存取” 基本功能</strong></li>
<li>提高对目录的检索速度</li>
<li>文件共享</li>
<li>允许文件重名</li>
</ul>
<blockquote>
<p>文件控制块 FDB</p>
</blockquote>
<p>用于描述和控制文件的数据结构。</p>
<p>描述了文件的文件名、物理地址、逻辑结构和物理结构。存取控制信息、使用信息</p>
<blockquote>
<p>目录结构</p>
</blockquote>
<ol>
<li><p>单级目录结构</p>
<p>优点：实现按名存取</p>
<p>缺点：不适用于多用户操作系统、查找速度慢、不允许重名</p>
</li>
<li><p>两级目录结构</p>
<p>优点：提高检索目录的速度、不同的用户目录中文件可以同名</p>
<p>缺点：无法文件共享</p>
</li>
<li><p>树形目录结构</p>
<p>引入相对路径的概念，减少了磁盘 IO 的次数</p>
<p>优点：可以很方便地对文件进行分类，层次结构清晰， 也能够更有效地进行文件的管理和保护。</p>
<p>缺点：不能实现文件共享</p>
</li>
<li><p>无环图目录结构</p>
<p>方面用户共享</p>
</li>
</ol>
<blockquote>
<p>索引节点</p>
</blockquote>
<p>问题：文件很多的时候，目录文件占用盘块</p>
<p>解决：文件名 + 文件描述信息，文件描述信息单独构成索引节点</p>
<p>使用 <code>stat filename</code> 或者 <code>ls -i</code> 可以查看索引节点</p>
<h2 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h2><ul>
<li><p>基于索引节点的共享方式（硬链接）</p>
</li>
<li><p>基于符号链的共享方式（软连接）</p>
</li>
</ul>
<h2 id="文件保护"><a href="#文件保护" class="headerlink" title="文件保护"></a>文件保护</h2><ul>
<li>口令保护：设置密码</li>
<li>加密保护：对文件加密，eg：异或加密</li>
<li>访问控制：chmod</li>
</ul>
<h2 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h2><ul>
<li>磁盘、磁道、扇区（块）</li>
<li>盘面、柱面(相对位置相同的磁道)</li>
</ul>
<p>磁盘读写时间 &#x3D; 寻道时间 + 延迟时间 + 传输时间</p>
<ul>
<li>寻道时间 &#x3D; 启动磁头时间 + 移动磁头的时间 （<strong>时间最长</strong>）</li>
<li>延迟时间 &#x3D; $\frac{1}{2r} &#x3D; \frac{T}{2}$</li>
<li>传出时间 &#x3D; $\frac{b}{N} \times \frac{1}{r}$</li>
</ul>
<ol>
<li><p>先来先服务 FCFS</p>
<p>优点：公平</p>
<p>缺点：FCFS 的性能很差</p>
</li>
<li><p>最短寻找时间优先 SSTF</p>
<p>优点：性能较好，平均寻道时间短</p>
<p>缺点：可能产生饥饿现象</p>
</li>
<li><p>扫描算法 SCAN 电梯算法</p>
<p>优点：性能较好，平均寻道时间较短，不会产生饥饿。</p>
<p>缺点：1. 只有到达需要访问的边界才能改变方向 2. <strong>对各个位置响应的频率不平均</strong></p>
</li>
<li><p>循环扫描算法 C-SCAN</p>
<p>优点：解决响应不平均的问题</p>
<p>缺点：平均寻道时间更长</p>
</li>
</ol>
<h2 id="文件系统维护命令"><a href="#文件系统维护命令" class="headerlink" title="文件系统维护命令"></a>文件系统维护命令</h2><ul>
<li><code>du</code>: 查看文件磁盘使用情况 <code>du [FILE]</code></li>
<li><code>df</code>: 查看文件所在磁盘剩余情况，<code>df [FILE]</code></li>
<li><code>free</code>: 查看系统的物理村内和虚拟内存的使用情况</li>
</ul>
<h1 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h1><h2 id="IO-系统"><a href="#IO-系统" class="headerlink" title="IO 系统"></a>IO 系统</h2><p>IO 设备：可以将数据输入到计算机，或者可以接受计算机输出数据的外部设备，属于计算机中的硬件部件</p>
<p>UNIX 将外部设备抽象成文件，用户可以使用与文件操作相同的方式对外部设备进行操作</p>
<ul>
<li>write：向外部设备写出数据</li>
<li>read：向外部设备读入数据</li>
</ul>
<p><strong>IO 系统的基本功能</strong></p>
<ul>
<li>隐藏物理设备的细节</li>
<li>与设备的无关性</li>
<li>提高处理及和 IO 设备的利用率</li>
<li>对 IO 设备进行控制：驱动</li>
<li>确保对设备的正确共享：独占设备（一段时间内一个）、共享设备（一个时刻一个）</li>
<li>错误处理</li>
</ul>
<p><strong>IO 软件的层次</strong></p>
<ol>
<li>用户层软件：实现与用户交互的接口</li>
<li>设备独立性软件：用户程序和驱动程序的统一接口</li>
<li>设备驱动程序：实现环境对设备发出指令</li>
<li>终端处理程序：保存 CPU 环境，装入中断处理</li>
</ol>
<blockquote>
<p>其中 2，3，4 属于操作系统的<strong>内核部分</strong>，即 IO 系统</p>
</blockquote>
<p><img src="/.com//image-20220418152350079.png" alt="image-20220418152350079"></p>
<blockquote>
<p>用户层软件</p>
</blockquote>
<p>功能：实现了与用户交互的接口（<strong>库函数</strong>），然后翻译成等价的<strong>系统调用</strong></p>
<blockquote>
<p>设备独立性软件</p>
</blockquote>
<p>功能：与硬件特性无关的功能几乎都在这一层实现</p>
<ul>
<li>向上提供统一的<strong>系统调用</strong>接口</li>
<li>设备保护：设置对设备文件的访问权限</li>
<li>差错处理：对设备的错误进行处理</li>
<li>设备的分配和回收</li>
<li>数据缓冲区管理</li>
<li>建立逻辑设备名到物理设备名的映射关系：逻辑设备表 LUT<ul>
<li>整个系统只设置一张 LUT，只适用与单用户操作系统，各个用户的逻辑设备名不能重复</li>
<li>为<strong>每个用户</strong>设置一张 LUT，存放在用户管理进程的 pcb 中，逻辑设备名可以重复</li>
<li>作用：记忆化进程使用的设备的映射关系</li>
</ul>
</li>
</ul>
<blockquote>
<p>驱动程序</p>
</blockquote>
<p>功能：将设备独立性软件的系统调用转化为具体操作</p>
<blockquote>
<p>中断处理程序</p>
</blockquote>
<p>计组中的中断处理程序</p>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>设备管理：设备独立性软件</li>
<li>涉及硬件的具体细节：设备驱动程序</li>
</ul>
<p><strong>设备与 CPU 之间的接口 – IO 控制器</strong></p>
<ul>
<li>与 CPU：数据、地址、控制线</li>
<li>与 设备：数据、状态、控制</li>
</ul>
<blockquote>
<p>功能 P197</p>
</blockquote>
<blockquote>
<p>组成：</p>
</blockquote>
<ul>
<li>与 CPU、设备的接口</li>
<li>数据寄存器：存储数据 <ul>
<li>CPU -&gt; 设备时，存储 CPU 的数据</li>
<li>设备 -&gt; CPU时，存储设备的数据</li>
</ul>
</li>
<li>控制寄存器：存储 CPU 发来的指令</li>
<li>状态寄存器</li>
<li>IO 逻辑：负责接受和识别 CPU 各种命令，对设备发出命令</li>
</ul>
<p><strong>内存映像IO</strong></p>
<p>问题：实现 CPU 和<strong>控制器</strong>交互</p>
<blockquote>
<p>利用特定的 IO 指令 （寄存器独立编址）</p>
</blockquote>
<p>使用不同的指令来对控制器操作</p>
<p>缺点：需要设置专门的 IO 指令来对控制器编址</p>
<blockquote>
<p>内存映像 IO （统一编址）</p>
</blockquote>
<p>将控制器和内存统一编址</p>
<p>优点：简化了指令。可以采用对进行操作的指令来对控制器操作</p>
<p><strong>IO 通道</strong></p>
<blockquote>
<p>什么是通道</p>
</blockquote>
<p>问题：虽然出现了控制器，但是 CPU 的负担依然很重</p>
<p>工作方式：CPU 向通道发送 IO 命令，通道执行通道程序，完成 IO 之后向 CPU 发出中断</p>
<p>与 CPU 的不同点：</p>
<ul>
<li>命令类型单一，仅能执行 IO 命令</li>
<li>没有自己的内存，通道程序存放在主存中</li>
</ul>
<blockquote>
<p>类型 P201</p>
</blockquote>
<ul>
<li><p>字节多路通道（字节传输）：是一种字节交叉方式工作的通道，采用多路分时复用 – 按时间片轮转方式共享主通道</p>
</li>
<li><p>数组选择通道（数组传输）：</p>
<ul>
<li>问题：字节多路通道不适用于连接高速设备</li>
<li>瓶颈：只有一个 IO 子通道，但是可以实现块传输</li>
<li>缺点：容易被一台设备独占，利用率低</li>
</ul>
</li>
<li><p>数组多路通道（数组传输）：</p>
<p>将上述两个技术结合在一起。使用于中高速的 IO 设备</p>
</li>
</ul>
<blockquote>
<p>瓶颈</p>
</blockquote>
<p>问题：由于<strong>通道价格昂贵</strong>，致使数量较少，使它成为I&#x2F;O系统的瓶颈 ，进而造成系统吞吐量的下降</p>
<p>解决：<strong>增加设备到主机间的通路</strong>而不增加通道</p>
<p><img src="/.com//image-20220418162042131.png" alt="image-20220418162042131"></p>
<h2 id="IO-控制方式"><a href="#IO-控制方式" class="headerlink" title="IO 控制方式"></a>IO 控制方式</h2><p>问题：如何告诉设备，CPU 需要设备做什么</p>
<blockquote>
<p>使用轮询的可编程 IO 方式</p>
</blockquote>
<p>优点：实现简单</p>
<p>缺点：CPU 和 IO 设备只能串行工作，CPU 需要一直轮询检查长期处于忙等状态，CPU 利用率低。</p>
<blockquote>
<p>中断驱动方式</p>
</blockquote>
<p>解决：引入中断机制</p>
<p>优点：CPU 和 IO 设备可以并行工作</p>
<p>缺点：频繁的中断处理会消耗较多的 CPU 时间</p>
<blockquote>
<p>DMA 方式 P211</p>
</blockquote>
<p>解决：引入 DMA 控制器</p>
<p><img src="/.com//image-20220418163200754.png" alt="image-20220418163200754"></p>
<p>优点：数据以块传输。CPU 和 IO 设备的并行得到提高</p>
<p>缺点：CPU 每发出一条 IO 指令，只能读写一个或多个<strong>连续</strong>的数据块。如果需要读取离散的数据块，则需要多条 IO 指令</p>
<blockquote>
<p>通道控制方式</p>
</blockquote>
<p>优点：每次读&#x2F;写<strong>一组</strong>数据块；CPU、通道、I&#x2F;O设备可并行工作，资源利用率很高</p>
<p>缺点：实现复杂，需要专门的通道硬件支持</p>
<p>指令格式：</p>
<p><img src="/.com//image-20220418163605709.png" alt="image-20220418163605709"></p>
<ul>
<li>操作码 </li>
<li>内存地址 &amp; 计数</li>
<li>通道<strong>程序</strong>结束位 P：1 表示这是<strong>最后一条</strong>指令</li>
<li><strong>记录</strong>结束标志位 R：1 表示这是处理某记录的最后一条指令</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p><img src="/.com//image-20220418163928895.png" alt="image-20220418163928895"></p>
<blockquote>
<p>SPOOLing 技术</p>
</blockquote>
<p>需要多道程序技术的支持，</p>
<p>问题：独占设备 -&gt; 共享设备，缓和 CPU 和 IO 速度的不匹配</p>
<p>思想：空间换时间</p>
<p><strong>脱机技术</strong>：纸带机 -&gt; 外围控制机 -&gt; 磁带机 -&gt; CPU -&gt; 磁带机 -&gt; 外围控制机 -&gt; 纸带机</p>
<p>假脱机技术：输入设备 -&gt; 输入进程 -&gt; 输入井         输出井 -&gt; 输出进程 -&gt; 输出设备</p>
<ul>
<li>输入输出井 &#x3D; 磁盘</li>
<li>输入输出进程 &#x3D; 外围控制机</li>
<li>缓冲区用于暂存数据</li>
</ul>
<p><strong>模拟打印机</strong></p>
<ol>
<li>在<strong>输出井</strong>中开辟一段空间，用于存放数据</li>
<li>申请一张<strong>打印请求表</strong>（用于说明文件存放的位置），挂在文件队列上</li>
<li>输出进程根据表上的信息，将数据从外存 -&gt; 内存 -&gt; 打印机</li>
</ol>
<p><strong>特点</strong></p>
<ol>
<li>提高了 IO 速度：将 IO 操作变为对输入输出井的操作，提高了 IO 速度；缓和 CPU 和 IO 速度的不匹配</li>
<li>将独占设备改造成了共享设备</li>
<li>实现了虚拟设备功能</li>
</ol>
<h2 id="设备分配（设备独立性软件）"><a href="#设备分配（设备独立性软件）" class="headerlink" title="设备分配（设备独立性软件）"></a>设备分配（设备独立性软件）</h2><blockquote>
<p>设备的分配和回收</p>
</blockquote>
<p>问题：应用程序直接使用设备与系统中的物理设备直接相关，导致不灵活，给用户带来不便</p>
<p>解决：引入逻辑设备名</p>
<p>好处：</p>
<ul>
<li>逻辑设备是抽象的设备名</li>
<li>可实现 IO 重定向</li>
</ul>
<p><strong>逻辑设备名到物理设备名的映射 – 逻辑设备表</strong></p>
<ul>
<li>逻辑设备名</li>
<li>物理设备名</li>
<li>驱动程序入口地址</li>
</ul>
<blockquote>
<p>设备的固有属性</p>
</blockquote>
<ul>
<li>独占设备</li>
<li>共享设备</li>
<li>虚拟设备：采用 spooling 技术将独占设备改造成共享设备</li>
</ul>
<blockquote>
<p>设备分配算法</p>
</blockquote>
<ul>
<li>先来先服务</li>
<li>优先级高者优先</li>
<li>短任务优先</li>
</ul>
<blockquote>
<p>分配的安全性 PPT P79</p>
</blockquote>
<ul>
<li>安全分配方式：为进程分配一个设备之后，将进程阻塞，本次 IO 完成之后将进程唤醒<ul>
<li>优点：不会死锁，破坏 请求和保持 条件</li>
<li>缺点：串行工作</li>
</ul>
</li>
<li>不安全分配方式：进程发出 IO 请求之后，可以继续执行<ul>
<li>优点：并行工作</li>
<li>缺点：可能死锁</li>
</ul>
</li>
</ul>
<blockquote>
<p>分配方式</p>
</blockquote>
<ul>
<li><p>静态分配：开始就得到全部资源</p>
<p>破坏请求和保持条件，不会死锁</p>
</li>
<li><p>动态分配：动态申请</p>
</li>
</ul>
<blockquote>
<p>分配管理中的数据结构</p>
</blockquote>
<p>设备控制表 DCT：</p>
<ul>
<li>属性：类型、标识符、状态、指向控制器表的<strong>指针</strong></li>
<li>运行相关：重复执行次数、设备任务队列的队首 PCB 指针</li>
</ul>
<p>控制器控制表 COCT：</p>
<ul>
<li>属性：控制器标识符、状态、指向通道表的指针</li>
<li>运行相关：等待控制器的队首和队尾 PCB 指针</li>
</ul>
<p>通道控制表 CHCT：</p>
<ul>
<li>属性：标识符、状态、指向 COCT 的指针</li>
<li>运行相关：等待控制器的队首和队尾 PCB 指针</li>
</ul>
<p>系统设备表 SDT：</p>
<ul>
<li>包含系统中<strong>全部</strong>的<strong>设备</strong>情况<ul>
<li>设备类型、标识符、驱动程序入口</li>
<li>DCT</li>
</ul>
</li>
</ul>
<blockquote>
<p>设备分配步骤</p>
</blockquote>
<ol>
<li>根据进程请求的物理设备名查找 <strong>SDT</strong></li>
<li>根据 SDT 找到 DCT，<ol>
<li>忙碌：挂载进程 PCB 到设备等待队列</li>
<li>空闲：将设备分配给进程</li>
</ol>
</li>
<li>根据 DCT 找到 COCT，分配与上面相同</li>
<li>根据 COCT 找到 CHCT，分配与上面相同</li>
</ol>
<p>只有设备、控制器、通道三者都分配成功时，这次设备分配才算成功</p>
<p><strong>缺点 &amp; 问题</strong></p>
<ol>
<li>需要提供物理设备名，底层细节对用户不透明，不方便编程</li>
<li>程序不方便移植</li>
<li>同类型的设备利用率低</li>
</ol>
<p><strong>解决</strong></p>
<p><strong>引入逻辑设备名到物理设备名的映射</strong>。</p>
<ol>
<li><p>根据进程请求的<strong>逻辑设备名</strong>查找 <strong>SDT</strong></p>
</li>
<li><p>根据 SDT 找到 DCT，<strong>找到用户进程指定类型的、并且空闲的设备</strong>，将其分配给该进程。操作系统<strong>在逻辑设备表（LUT）中新增一个表项</strong>。</p>
<p>之后用户进程再次通过<strong>相同</strong>的逻辑设备名请求使用设备，则操作系统通过 LUT 表即可知道用户进程实际要使用的是哪个物理设备了，并且也能知道该设备的驱动程序入口地址</p>
<ol>
<li>忙碌：挂载进程 PCB 到设备等待队列</li>
<li>空闲：将设备分配给进程</li>
</ol>
</li>
<li><p>根据 DCT 找到 COCT，分配与上面相同</p>
</li>
<li><p>根据 COCT 找到 CHCT，分配与上面相同</p>
</li>
</ol>
<h2 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a>缓冲区管理</h2><p><strong>作用</strong></p>
<ol>
<li><strong>缓和 CPU 和 IO 设备之间速度不匹配的矛盾</strong></li>
<li><strong>减少对 CPU 的中断频率</strong>，放宽对 CPU 中断对应时间的限制</li>
<li>解决数据粒度不匹配的问题，CPU 一块一块输出，IO 设备一个字符输出</li>
<li>提高 CPU 和 IO 设备之间的并行性</li>
</ol>
<h3 id="缓冲区管理策略"><a href="#缓冲区管理策略" class="headerlink" title="缓冲区管理策略"></a>缓冲区管理策略</h3><p><strong>缓冲区特性</strong>：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为 空时，可以往缓冲区传入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</p>
<p>掌握计算处理一块数据的平均时间</p>
<p>C: CPU 处理时间</p>
<p>M：IO 设备 -&gt; CPU 传送时间</p>
<p>T：IO 设备输入时间</p>
<blockquote>
<p>单缓冲区</p>
</blockquote>
<ul>
<li>T &gt; C</li>
</ul>
<p><img src="/.com//image-20220418212440750.png" alt="image-20220418212440750"></p>
<ul>
<li>T &lt; C</li>
</ul>
<p><img src="/.com//image-20220418212454284.png" alt="image-20220418212454284"></p>
<p>结论：max(C, T) + M</p>
<blockquote>
<p>双缓冲区</p>
</blockquote>
<ul>
<li>T &gt; M + C</li>
</ul>
<p><img src="/.com//image-20220418212825686.png" alt="image-20220418212825686"></p>
<ul>
<li><p>T &lt; M + C</p>
<p><img src="/.com//image-20220418212918197.png" alt="image-20220418212918197"></p>
</li>
</ul>
<p>结论：max(T, M + C)</p>
<blockquote>
<p>使用单双缓冲区在通信时的区别</p>
</blockquote>
<p>单缓冲区：半双工通信</p>
<p>双缓冲区：全双工通信</p>
<blockquote>
<p>循环缓冲区</p>
</blockquote>
<p>问题：当输入和输出的速度相差很大时，双缓冲效果不理想，但可增加缓冲 区的数量，改善情况</p>
<p>解决：引入循环队列逻辑结构的缓冲区</p>
<blockquote>
<p>缓冲池</p>
</blockquote>
<p>通过<strong>一系列缓冲区</strong>组成</p>
<p><img src="/.com//image-20220418214143500.png" alt="image-20220418214143500"></p>
<p><strong>缓冲区使用状况分类</strong></p>
<ul>
<li>空缓冲队列</li>
<li>输入队列</li>
<li>输出队列</li>
</ul>
<p><strong>缓冲区功能分类</strong></p>
<ul>
<li>用于<strong>收容输入</strong>数据的工作缓冲区（hin）</li>
<li>用于<strong>提取输入</strong>数据的工作缓冲区（sin）</li>
<li>用于<strong>收容输出</strong>数据的工作缓冲区（hout）</li>
<li>用于<strong>提取输出</strong>数据的工作缓冲区（sout）</li>
</ul>
]]></content>
      <tags>
        <tag>技术</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/2022/10/28/python/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>入职字节已经小半年了，对业务已经轻车熟路。导致可以有很多时间在工位上学习，由于岗位是 python，所以打算来一个 python 进阶。</p>
<p>最近学习了一些 golang 的特性，所以先学学 python 对 golang 特性的一些实现。</p>
<h2 id="协程-amp-装饰器"><a href="#协程-amp-装饰器" class="headerlink" title="协程 &amp; 装饰器"></a>协程 &amp; 装饰器</h2><p>goroutine 的实现是非常方便和优雅的。虽然 python coroutine 实现繁琐了一点，但是还是有的。</p>
<p>协程对于IO密集型的程序的提速还是非常明显的。</p>
<p>使用 <code>async</code> 关键字可以定义协程函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>协程函数不能像普通函数一样直接 func() 调用，这样只会得到一个协程对象 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;coroutine object main at 0x1032987b0&gt;</span><br></pre></td></tr></table></figure>

<p>协程函数需要运行的时候，需要注册到<strong>事件循环</strong>中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loop = asyncio.get_event_loop() <span class="comment"># 获取事件循环</span></span><br></pre></td></tr></table></figure>

<p>可以使用 <code>await</code> 关键字调用其他的协程函数。</p>
<ul>
<li>await + 可等待对象（协程对象，Future，Task对象（IO等待））</li>
<li><code>等待到对象的返回结果</code>，才会继续执行后续代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">await</span> asyncio.gather(*[add(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)])</span><br></pre></td></tr></table></figure>

<p>全部代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">await</span> f(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(time.time() - start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    r = <span class="keyword">await</span> asyncio.gather(*[add(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)])</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure>

<p>一个控制 coroutine 并发量的装饰器👇</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">concurrency_limit</span>(<span class="params">limit</span>):</span><br><span class="line">    sem = asyncio.Semaphore(limit)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">executor</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> sem:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">await</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> executor</span><br></pre></td></tr></table></figure>

<h2 id="asyncio"><a href="#asyncio" class="headerlink" title="asyncio"></a>asyncio</h2><p><a class="link" href="https://docs.python.org/zh-cn/3/library/asyncio.html">asyncio<i class="fas fa-external-link-alt"></i></a></p>
<p>python 异步 IO</p>
<p>asyncio 是用来编写 <strong>并发</strong> 代码的库，使用 <strong>async&#x2F;await</strong> 语法。</p>
<p>asyncio 被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。</p>
<p>asyncio 往往是构建 IO 密集型和高层级 <strong>结构化</strong> 网络代码的最佳选择。</p>
<h2 id="pytest"><a href="#pytest" class="headerlink" title="pytest"></a>pytest</h2><p>python 的一个第三方自动化测试框架，功能十分强大，类似于 <code>go test</code></p>
<p>pytest 框架的约束：</p>
<ul>
<li>所有的单测文件名都需要满足<strong>test_*.py</strong>格式或***_test.py**格式。</li>
<li>在单测文件中，测试类以<strong>Test</strong>开头，并且不能带有 init 方法(注意：定义class时，需要以T开头，不然pytest是不会去运行该class的)</li>
<li>在单测类中，可以包含一个或多个test_开头的函数。</li>
<li>在执行pytest命令时，会自动从当<strong>前目录及子目录中寻找</strong>符合上述约束的测试函数来执行。</li>
</ul>
<blockquote>
<p>-s 显示测试函数中的 print</p>
<p>-vv 查看详细 test</p>
<p>-q 查看简略 test</p>
<p>-pdb 失败时跳转到 pdb</p>
<p>–html 生成错误报告</p>
</blockquote>
<p>指定测试函数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pytest test_mod.py::test_func</span><br><span class="line">pytest test_mod.py::TestClass::test_method</span><br></pre></td></tr></table></figure>



<h3 id="setup-和-teardown"><a href="#setup-和-teardown" class="headerlink" title="setup 和 teardown"></a>setup 和 teardown</h3><p><a class="link" href="https://blog.csdn.net/m0_59868866/article/details/125064367">pytest setup &amp; teardown<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>setup_method，teardown_method 在测试类的每一个<strong>测试方法</strong>前后都执行一遍</li>
<li>setup_class，teardown_class 在<strong>测试类</strong>的前后都执行一遍</li>
<li>setup_function，teardown_function 在<strong>测试函数</strong>的前后执行一遍，不会影响测试类</li>
<li>setup_module，teardown_module 模块级测试</li>
</ul>
<h3 id="pytest-ini"><a href="#pytest-ini" class="headerlink" title="pytest.ini"></a>pytest.ini</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[pytest]</span></span><br><span class="line"><span class="comment"># test路径</span></span><br><span class="line"><span class="attr">testpaths</span> = .</span><br><span class="line"><span class="comment"># 命令行参数</span></span><br><span class="line"><span class="attr">addopts</span> = -s --html=./report.html -vv</span><br><span class="line"><span class="comment"># 搜索文件名</span></span><br><span class="line"><span class="attr">python_files</span> = test_*.py</span><br><span class="line"><span class="comment"># 搜索的类名</span></span><br><span class="line"><span class="attr">python_classes</span> = Test_*</span><br><span class="line"><span class="comment">#搜索的函数名</span></span><br><span class="line"><span class="attr">python_functions</span> = test_*</span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="attr">markers</span> = </span><br><span class="line">    g1: group1</span><br><span class="line">    g2: group2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一些好用的 pytest 插件</span></span><br><span class="line">pip install pytest-html</span><br><span class="line">pip install pytest-sugar</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳过测试函数</span></span><br><span class="line"><span class="meta">@pytest.mark.skipif(<span class="params">func(<span class="params"></span>) == <span class="number">1</span>,reason = <span class="string">&quot;跳过该函数&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记为预期失败</span></span><br><span class="line"><span class="meta">@pytest.mark.xfail(<span class="params">func(<span class="params"></span>) == <span class="number">1</span>, reason=<span class="string">&quot;标注为预期失败&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数参数赋值</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>,[(<span class="params"><span class="number">1</span>,<span class="number">2</span></span>),(<span class="params"><span class="number">0</span>,<span class="number">3</span></span>)]</span>) </span><span class="comment"># 参数a,b均被赋予两个值，函数会运行两遍</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_a</span>(<span class="params">self,a,b</span>): <span class="comment"># 参数必须和parametrize里面的参数一致</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test data:a=%d,b=%d&quot;</span>%(a,b))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 或者使用函数返回值的形式</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;a,b&quot;</span>,return_test_data(<span class="params"></span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="meta">@pytest.mark.组名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组测试</span></span><br><span class="line">pytest -m 组名</span><br></pre></td></tr></table></figure>

<p><a class="link" href="https://blog.csdn.net/lovedingd/article/details/98952868?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166694241916782417085479%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166694241916782417085479&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-98952868-null-null.142%5Ev62%5Epc_search_tree,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=pytest&spm=1018.2226.3001.4187">pytest blog 1<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/weixin_44867493/article/details/123062129?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166694241916782417085479%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166694241916782417085479&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-123062129-null-null.142%5Ev62%5Epc_search_tree,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=pytest&spm=1018.2226.3001.4187">pytest blog 2<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="locust"><a href="#locust" class="headerlink" title="locust"></a>locust</h2><p>轻量级 python 压测框架</p>
<p><code>on_site()</code> 方法，用于对每一个 user 进行初始化。</p>
<p><code>wait_time</code> 成员，让一个用户在执行完上一个 task 之后等待一段时间</p>
<ul>
<li><code>between(start, end)</code> 等待一个随机值</li>
<li><code>constant(second)</code> 等待一个固定值</li>
</ul>
<p><code>task</code> 装饰器</p>
<p><code>tag</code> 装饰器，用于标识每一个 task 的 tag，可以指定 <code>--tags [tag]</code> 用于载入测试，或者 <code>--exclude-tags tag3 tag4</code> 排斥 tag3 tag4.</p>
<h3 id="验证-response-的正确性"><a href="#验证-response-的正确性" class="headerlink" title="验证 response 的正确性"></a>验证 response 的正确性</h3><p>使用 <code>catch_response</code> 参数和 <code>success() &amp; failure(msg=&quot;&quot;)</code> 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> self.client.get(<span class="string">&quot;/&quot;</span>, catch_response=<span class="literal">True</span>) <span class="keyword">as</span> response:</span><br><span class="line">    <span class="keyword">if</span> response.text != <span class="string">&quot;Success&quot;</span>:</span><br><span class="line">        response.failure(<span class="string">&quot;Got wrong response&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> response.elapsed.total_seconds() &gt; <span class="number">0.5</span>:</span><br><span class="line">        response.failure(<span class="string">&quot;Request took too long&quot;</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, between, task, TaskSet, events</span><br><span class="line"></span><br><span class="line"><span class="meta">@events.test_start.add_listener</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_test_start</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@events.test_stop.add_listener</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_test_stop</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(<span class="title class_ inherited__">TaskSet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_start</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;user start&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;user stop&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">&#x27;/api/v1/tts?reqid=$4f1d09bc-5b6a-11ed-9b4c-0a8d64818ea5&#x27;</span></span><br><span class="line">        data = <span class="string">&#x27;&#123;&quot;app&quot;: &#123;&quot;appid&quot;: &quot;sa_tts&quot;, &quot;token&quot;: &quot;access_token&quot;&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> self.client.post(url=url, data=data, catch_response=<span class="literal">True</span>) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="keyword">if</span> response.text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                response.success()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                response.failure(<span class="string">&quot;text is none&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebsiteUser</span>(<span class="title class_ inherited__">HttpUser</span>):</span><br><span class="line">    wait_time = between(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    tasks = [Test]</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locust -f locustfile.py --host=http://speech.byted.org</span><br></pre></td></tr></table></figure>



<h2 id="networkx"><a href="#networkx" class="headerlink" title="networkx"></a>networkx</h2><p><a class="link" href="https://blog.csdn.net/BetaRun/article/details/51168259?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166778766316782429767041%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166778766316782429767041&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-51168259-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=A%20Faster%20Algorithm%20for%20Betweenness%20Centrality&spm=1018.2226.3001.4187">网络介数中心性计算<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://networkx.org/documentation/stable/tutorial.html#using-the-graph-constructors">networkx tutorial<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/u012856866/article/details/116458059?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166778950316782427490151%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166778950316782427490151&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116458059-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Econtrol_2,213%5Ev1%5Econtrol&utm_term=networkx&spm=1018.2226.3001.4187">CSDN networkx<i class="fas fa-external-link-alt"></i></a></p>
<p>创建图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G = nx.Graph()          <span class="comment"># 无向图</span></span><br><span class="line">G = nx.DiGraph()        <span class="comment"># 有向图</span></span><br><span class="line">G = nx.MultiGraph()     <span class="comment"># 多重无向图</span></span><br><span class="line">G = nx.MultiDigraph()   <span class="comment"># 多重有向图</span></span><br><span class="line">G.clear()               <span class="comment"># 清空图</span></span><br></pre></td></tr></table></figure>



<p>加点</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G.add_node(<span class="number">1</span>)</span><br><span class="line">G.add_nodes_from([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># add attribute (node, node_attribute_dict)</span></span><br><span class="line">G.add_nodes_from([</span><br><span class="line">    (<span class="number">4</span>, &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;),</span><br><span class="line">    (<span class="number">5</span>, &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;),</span><br><span class="line">])</span><br></pre></td></tr></table></figure>





<p>加边</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G.add_edge(<span class="number">1</span>, <span class="number">2</span>)             <span class="comment"># default edge data=1</span></span><br><span class="line">G.add_edge(<span class="number">2</span>, <span class="number">3</span>, weight=<span class="number">0.9</span>) <span class="comment"># specify edge data</span></span><br><span class="line"> </span><br><span class="line">elist = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">2</span>)]</span><br><span class="line">G.add_edges_from(elist)</span><br><span class="line">elist = [(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">5.0</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">3.0</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">1.0</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="number">7.3</span>)]</span><br><span class="line">G.add_weighted_edges_from(elist)</span><br></pre></td></tr></table></figure>



<p>基本信息获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj.nodes</span><br><span class="line">obj.edges</span><br><span class="line">obj.degree</span><br><span class="line"></span><br><span class="line">obj.degree([<span class="number">2</span>, <span class="number">4</span>]) <span class="comment"># 查看 2，4 节点的度</span></span><br></pre></td></tr></table></figure>



<p>绘图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">nx.draw(G)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<script>
  console.log("https://kops.uni-konstanz.de/bitstream/handle/123456789/5739/algorithm.pdf")
</script>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM 退役总结</title>
    <url>/2022/04/17/retire-from-acm/</url>
    <content><![CDATA[<h1 id="ACM-退役总结"><a href="#ACM-退役总结" class="headerlink" title="ACM 退役总结"></a>ACM 退役总结</h1><p>在开学后得知没有安排我参加昆明之后，我也算正式告别了 XCPC 的赛场。</p>
<p>经过连续几周的面试，我也拿到了比较心仪的实习 offer，在和面试官交流的过程中也学到了很多计算机在生活中的应用。</p>
<p>我渐渐发现之前那种只用考虑这一道题如何解决的时期已经过去了，所以在这一篇文章中纪念我的 acm 生涯。</p>
<p>ACM 生涯中一共参加了 4 场 XCPC 的比赛，两铁一铜一银。这里要感谢陪伴我的队友 @xjw, @lyy, @zzy。感谢队友在这两年的陪伴。</p>
<h4 id="第-45-届-icpc-昆明"><a href="#第-45-届-icpc-昆明" class="headerlink" title="第 45 届 icpc 昆明"></a>第 45 届 icpc 昆明</h4><p>当时寒假刚参加 acm 集训队，在一个寒假中勉强学会了一些板子题。莫名其妙的被 sj 拉着参加了延期的昆明。当时赛前勉强学会了一些算法的板子并不会，对算法的理解也不全面。导致比赛我全程宕机。最后拿了一个铁牌。</p>
<p><img src="/images/image-20220417143814047.png" alt="image-20220417143814047"></p>
<p>不过第一次参加比赛就拿到 ACM 生涯中第一个，也是唯一一个一血。还是有一点意外的。</p>
<h4 id="第-45-届-icpc-银川"><a href="#第-45-届-icpc-银川" class="headerlink" title="第 45 届 icpc 银川"></a>第 45 届 icpc 银川</h4><p>有了第一次比赛打铁的经验之后，我们自费参加了 45 届 icpc 银川。就是那个被 acmer 喷烂的比赛。</p>
<p>当时比赛之前进行了比较充分的准备，但是还是没有防住银川的航模空格。好歹也报一个 PE 吧，老是来 WA 谁顶的住啊。</p>
<p>最后还是打了铁。还是银川打铁，对我的心态影响属实不小。</p>
<p>由于赛方没有公开 rk 数据，这里就不放排名了。</p>
<p><a href="https://blog.csdn.net/myvanilla1/article/details/116903422">CSDN ICPC银川总结</a> 这里放一个当时打完比赛写的小作文。</p>
<h4 id="第-7-届-CCPC-广州"><a href="#第-7-届-CCPC-广州" class="headerlink" title="第 7 届 CCPC 广州"></a>第 7 届 CCPC 广州</h4><p>经过了一个暑假的训练，以及队伍重组之后，我们参加了新赛季的第一场比赛。当时的我已经能够熟练的使用各种维护区间的数据架构了，同时对图论也有少量的了解。无奈前两次打铁，使我不敢放松。最后在比赛中获得了银。</p>
<p>虽然这场比赛比较离谱，和我学过的算法并没有关系，全都是思维题。作为全队唯一一个没有脑子的选手，我化身码农狂写代码。最后的银牌打表题感谢队友 @xjw 的数据，当时我已经接近宕机并不是很想继续写题了。可能是老天爷的帮助，让我刚好看到了数据，也一眼看出了是斐波那契数列。最后拿下了银牌，不然真就从银牌区掉到了铜牌区。</p>
<p><img src="/images/image-20220417145957207.png" alt="image-20220417145957207"></p>
<h4 id="第-46-届-icpc-沈阳"><a href="#第-46-届-icpc-沈阳" class="headerlink" title="第 46 届 icpc 沈阳"></a>第 46 届 icpc 沈阳</h4><p>拿到银之后，整个人都变成快乐人了。我们队也没有很认真的训练了。最后在欢声笑语中拿下一块铜牌。</p>
<p>这里再次感谢 @xjw 的打表 idea。我愿称 @xjw 为打表的神。</p>
<p><img src="/images/image-20220417150404479.png" alt="image-20220417150404479"></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>在 hr 面中，hr 问我为什么参加 xcpc 竞赛。当时我笑着说 <code>just for fun</code>。</p>
<p>记得我第一次打算法竞赛是在分流之后，学校安排的一场夏季联赛，虽然当时连数据读入都不会，但是就被这个比赛深深的吸引住了。</p>
<p>虽然当时也是出于之后好找工作，好保研的目的参加了这个竞赛。当时，退役之后回想起来 xcpc 给我带来的远不止这一些。它改变了我的思维方式，也使得我可以使用更加优雅的方式实现实际问题的求解。</p>
<p>感谢你耐心的看完了我的流水账，下面我想给想参加 xcpc 的朋友一些建议：</p>
<ol>
<li>首先得了解你参加比赛所使用的语言，有利于你使用语言的特性优雅的低常数实现。</li>
<li>熟悉至少一个编辑器的快捷键，可以让代码的编写跟的上脑子</li>
<li>代码尽量规范，让代码看上去至少不会让你感到恶心</li>
<li>尽早在 cf 和 atcoder 上面刷题，可以活跃你的思维。</li>
<li>平时一定要好好补题，不要老学我天天搁那刷傻逼题。</li>
</ol>
<h4 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h4><p>感谢和我一起打过比赛的队友</p>
<p>感谢实验室的朋友一路的陪伴</p>
<p>感谢所有因为 acm 而相识的朋友</p>
<p>退役，既是告别，也是开始</p>
<p>愿今后：</p>
<p>被打击时，记起你的珍贵</p>
<p>迷茫时，坚信你的珍贵</p>
<p>爱你所爱，行你所行</p>
<p>听从你心，无问西东</p>
<p>2022&#x2F;4&#x2F;17 (正好是第 46 届 icpc 昆明的比赛时间)</p>
<p><img src="/images/image-20220417153331430.png" alt="image-20220417153331430"></p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>spark</title>
    <url>/2022/11/09/spark/</url>
    <content><![CDATA[<p><a class="link" href="https://ihainan.gitbooks.io/spark-source-code/content/index.html">apache spark 源码阅读<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://dblab.xmu.edu.cn/blog/924/">spark 入门教程<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://spark.apache.org/">apache spark<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h3><blockquote>
<p>ssh免密码登陆</p>
</blockquote>
<ol>
<li>在mac的<strong>系统偏好设置–&gt;共享</strong>中打开远程登录</li>
<li><code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li>
<li><code>ssh localhost</code></li>
</ol>
<blockquote>
<p>hadoop</p>
</blockquote>
<p><a class="link" href="https://blog.csdn.net/pgs1004151212/article/details/104391391">hadoop mac 配置<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install hadoop</span><br></pre></td></tr></table></figure>

<p>Hadoop 伪分布式配置：</p>
<ol>
<li><code>/opt/homebrew/Cellar/hadoop/3.3.4/libexec/etc/hadoop/core-site.xml</code> 配置如下信息：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/homebrew/Cellar/hadoop/3.3.4/libexec/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>/opt/homebrew/Cellar/hadoop/3.3.4/libexec/etc/hadoop/hdfs-site.xml</code> 配置信息如下：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/homebrew/Cellar/hadoop/3.3.4/libexec/tmp/dfs/nam    e<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/homebrew/Cellar/hadoop/3.3.4/libexec/tmp/dfs/dat    a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Env 配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CLASSPAHT=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">149 export HADOOP_HOME=/opt/homebrew/Cellar/hadoop/3.3.4/libexec</span><br><span class="line">150 export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line">151 export PATH=$JAVA_HOME/bin:$PATH:$HADOOP_HOME/bin:/opt//homebrew/Cellar/scala/bin</span><br></pre></td></tr></table></figure>



<blockquote>
<p>运行 hadoop 程序</p>
</blockquote>
<ol>
<li><p>初始化：hdfs namenode -format </p>
</li>
<li><p><code>start-dfs.sh</code></p>
<p><a class="link" href="https://stackoverflow.com/questions/44009058/even-though-jre-8-is-installed-on-my-mac-no-java-runtime-present-requesting-t">找不到 JRE<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  ~ start-dfs.sh</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">localhost: WARNING: /opt/homebrew/Cellar/hadoop/3.3.4/libexec/logs does not exist. Creating.</span><br><span class="line">Starting datanodes</span><br><span class="line">Starting secondary namenodes [Y3Y54Q72DR]</span><br><span class="line">Y3Y54Q72DR: ssh: Could not resolve hostname y3y54q72dr: nodename nor servname provided, or not known</span><br><span class="line">2022-11-09 16:17:23,985 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否启动 <code>jps</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  ~ jps</span><br><span class="line">86881</span><br><span class="line">56226 Jps</span><br><span class="line">22195</span><br><span class="line">55683 NameNode</span><br><span class="line">39907 NailgunRunner</span><br><span class="line">55786 DataNode</span><br><span class="line">43003 Launcher</span><br><span class="line">23211 Application</span><br><span class="line">30365</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 namenode， <a class="link" href="http://localhost:9870/dfshealth.html#tab-overview">http://localhost:9870/dfshealth.html#tab-overview<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>修改 <code>yarn</code> 配置文件。<code>/opt/homebrew/Cellar/hadoop/3.3.4/libexec/etc/hadoop/mapred-site.xml</code> 添加内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name</span><br><span class="line">        <span class="tag">&lt;/<span class="name">name</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>/opt/homebrew/Cellar/hadoop/3.3.4/libexec/etc/hadoop/yarn-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 <code>yarn</code>，<code>start-yarn.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  hadoop git:(stable) start-yarn.sh</span><br><span class="line">Starting resourcemanager</span><br><span class="line">Starting nodemanagers</span><br></pre></td></tr></table></figure>

<p>浏览器中打开：<a class="link" href="http://localhost:8088/cluster">http://localhost:8088/cluster<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>运行 Hadoop 自带的 wordcount 程序</p>
<ul>
<li><code>hadoop fs -mkdir /input</code> 创建文件夹</li>
<li><code>hadoop fs -ls /</code> 查看文件夹</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  hadoop git:(stable) hadoop fs -mkdir /input</span><br><span class="line">2022-11-09 16:27:09,642 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">(base) ➜  hadoop git:(stable) hadoop fs -ls /</span><br><span class="line">2022-11-09 16:27:30,749 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Found 1 items</span><br><span class="line">drwxr-xr-x   - bytedance supergroup          0 2022-11-09 16:27 /input</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行程序 <code>hadoop jar /opt/homebrew/Cellar/hadoop/3.3.4/libexec/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.4.jar   wordcount /input /output</code></p>
</li>
</ol>
<h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>太麻烦了（</p>
<p><a class="link" href="https://www.yiibai.com/hive/hive_installation.html">Hive install<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://www.jianshu.com/p/3fef90437a9c">Hive install<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HIVE_HOME=/usr/local/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line">export CLASSPATH=$CLASSPATH:/usr/local/Hadoop/lib/*:.</span><br><span class="line">export CLASSPATH=$CLASSPATH:/usr/local/hive/lib/*:.</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HADOOP_HOME=/opt/homebrew/Cellar/hadoop/3.3.4/libexec</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hive Configuration Directory can be controlled by:</span></span><br><span class="line">export HIVE_CONF_DIR=/usr/local/hive/conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Folder containing extra libraries required <span class="keyword">for</span> hive compilation/    execution can be controlled by:</span></span><br><span class="line">export HIVE_AUX_JARS_PATH=/usr/local/hive/lib</span><br></pre></td></tr></table></figure>



<p><code>hive-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020/data/hive/temp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020/data/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020/data/hive/log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;!—该配置是关闭hive元数据版本认证，否则会在启动spark程序时报错--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h3><p><a class="link" href="https://blog.csdn.net/vbirdbest/article/details/104499826">csdn spark<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://dblab.xmu.edu.cn/blog/1307/">xmu spark<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li><p>安装 <code>scala</code>，必须安装 spark 指定的版本，不然 spark 会报错</p>
</li>
<li><p>下载 <code>spark</code>，<a class="link" href="https://spark.apache.org/downloads.html">spark官网<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>安装 配置 <code>spark</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxf ~/下载/spark-2.1.0-bin-without-hadoop.tgz -C /usr/local/cd /usr/local</span><br><span class="line">sudo <span class="built_in">mv</span> ./spark-2.1.0-bin-without-hadoop/ ./spark</span><br><span class="line">sudo <span class="built_in">chown</span> -R hadoop:hadoop ./spark          <span class="comment"># 此处的 hadoop 为你的用户名</span></span><br></pre></td></tr></table></figure>

<p>安装后，还需要修改Spark的配置文件spark-env.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$SPARK_HOME</span></span><br><span class="line"><span class="built_in">cp</span> ./conf/spark-env.sh.template ./conf/spark-env.sh</span><br></pre></td></tr></table></figure>

<p>编辑spark-env.sh文件(vim .&#x2F;conf&#x2F;spark-env.sh)，在第一行添加以下配置信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$(/opt/homebrew/bin/hadoop classpath)</span><br></pre></td></tr></table></figure>

<p>有了上面的配置信息以后，Spark就可以把数据存储到Hadoop分布式文件系统HDFS中，也可以从HDFS中读取数据。如果没有配置上面信息，Spark就只能读写本地数据，无法读写HDFS数据。</p>
</li>
<li><p>验证安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is&quot;</span><br><span class="line"></span><br><span class="line">(base) ➜  spark-3.3.1-bin-hadoop3 git:(stable) bin/run-example SparkPi 2&gt;&amp;1 | grep &quot;Pi is&quot;</span><br><span class="line">Pi is roughly 3.1459757298786495</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 spark</p>
<p><a class="link" href="https://blog.csdn.net/weixin_43042683/article/details/105397046">localhost: namenode running as process 2896. Stop it first.<i class="fas fa-external-link-alt"></i></a></p>
<p>不要启动到 <code>hadoop</code> 的 <code>start_all.sh</code> 了😇</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  ~ cd $SPARK_HOME/sbin</span><br><span class="line">(base) ➜  sbin git:(stable) ./start-all.sh</span><br><span class="line">starting org.apache.spark.deploy.master.Master, logging to /opt/homebrew/Cellar/spark-3.3.1-bin-hadoop3/logs/spark-bytedance-org.apache.spark.deploy.master.Master-1-Y3Y54Q72DR.out</span><br><span class="line">localhost: starting org.apache.spark.deploy.worker.Worker, logging to /opt/homebrew/Cellar/spark-3.3.1-bin-hadoop3/logs/spark-bytedance-org.apache.spark.deploy.worker.Worker-1-Y3Y54Q72DR.out</span><br><span class="line">(base) ➜  sbin git:(stable) jps</span><br><span class="line">86881</span><br><span class="line">67523 Master</span><br><span class="line">22195</span><br><span class="line">67634 Worker</span><br><span class="line">67669 Jps</span><br><span class="line">66823 NameNode</span><br><span class="line">43003 Launcher</span><br><span class="line">23211 Application</span><br><span class="line">67197 ResourceManager</span><br><span class="line">30365</span><br><span class="line">66927 DataNode</span><br></pre></td></tr></table></figure>

<p><a class="link" href="http://localhost:8080/">spark 本地地址<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>启动 <code>spark shell</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spark-shell --master &lt;master-url&gt;</span><br><span class="line"></span><br><span class="line">* local 使用一个Worker线程本地化运行SPARK(完全不并行)</span><br><span class="line">* local[*] 使用逻辑CPU个数数量的线程来本地化运行Spark</span><br><span class="line">* local[K] 使用K个Worker线程本地化运行Spark（理想情况下，K应该根据运行机器的CPU核数设定）</span><br><span class="line">* spark://HOST:PORT 连接到指定的Spark standalone master。默认端口是7077.</span><br><span class="line">* yarn-client 以客户端模式连接YARN集群。集群的位置可以在HADOOP_CONF_DIR 环境变量中找到。</span><br><span class="line">* yarn-cluster 以集群模式连接YARN集群。集群的位置可以在HADOOP_CONF_DIR 环境变量中找到。</span><br><span class="line">* mesos://HOST:PORT 连接到指定的Mesos集群。默认接口是5050。</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $SPARK_HOME/bin</span><br><span class="line">./spark-shell --master local</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &#x27;_/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version 3.3.1</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Scala version 2.12.15 (OpenJDK 64-Bit Server VM, Java 1.8.0_292)</span><br><span class="line">Type in expressions to have them evaluated.</span><br><span class="line">Type :help for more information.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">scala&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Spark-独立应用程序编程"><a href="#Spark-独立应用程序编程" class="headerlink" title="Spark 独立应用程序编程"></a>Spark 独立应用程序编程</h3><h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><ul>
<li><p>路径问题：</p>
<p>spark 应该会从 hdfs 上面查找文件。如果需要查找本地文件的话，需要使用 <code>file:</code> 开头，例如：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> logFile = <span class="string">&quot;file:/Users/bytedance/resource/fyy/log.log&quot;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>找不到 class 的问题：</p>
<ul>
<li><p>首先包含 <code>main</code> 方法的类名要和 <code>--class</code> 输入的类名保持一致。</p>
</li>
<li><p>使用 idea 会报错，不知道为什么。之后还是用 vscode 吧😇</p>
<p>如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Error: Failed to load class SimpleApp.</span><br><span class="line">22/11/10 11:22:42 INFO ShutdownHookManager: Shutdown hook called</span><br><span class="line">22/11/10 11:22:42 INFO ShutdownHookManager: Deleting directory /private/var/folders/b1/0fd1b6hs7lz0fm_mh346lybm0000gn/T/spark-533682ae-17f9-4229-a3d0-a621fe441511</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> logFile = <span class="string">&quot;file:/Users/bytedance/resource/fyy/log.log&quot;</span> <span class="comment">// Should be some file on your system</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder.appName(<span class="string">&quot;Simple Application&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> logData = spark.read.textFile(logFile).cache()</span><br><span class="line">    <span class="keyword">val</span> numAs = logData.filter(line =&gt; line.contains(<span class="string">&quot;a&quot;</span>)).count()</span><br><span class="line">    <span class="keyword">val</span> numBs = logData.filter(line =&gt; line.contains(<span class="string">&quot;b&quot;</span>)).count()</span><br><span class="line">    println(<span class="string">s&quot;Lines with a: <span class="subst">$numAs</span>, Lines with b: <span class="subst">$numBs</span>&quot;</span>)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="string">&quot;Simple App&quot;</span></span><br><span class="line"></span><br><span class="line">version := <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">scalaVersion := <span class="string">&quot;2.13.10&quot;</span></span><br><span class="line"></span><br><span class="line">libraryDependencies += <span class="string">&quot;org.apache.spark&quot;</span> %% <span class="string">&quot;spark-sql&quot;</span> % <span class="string">&quot;3.3.1&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="两种-sparkcontext-姿势"><a href="#两种-sparkcontext-姿势" class="headerlink" title="两种 sparkcontext 姿势"></a>两种 sparkcontext 姿势</h4><p><a class="link" href="https://blog.csdn.net/qq_35235032/article/details/109222246">sparkcontext 配置 hdfs<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span>._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;SimpleApp&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> filename = <span class="string">&quot;hdfs://localhost:8020/user/spark/word.txt&quot;</span></span><br><span class="line">    <span class="keyword">val</span> txt = sc.textFile(filename)</span><br><span class="line">    <span class="keyword">val</span> res = txt.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).filter(_.size &gt; <span class="number">0</span>).map(word =&gt; (word -&gt; <span class="number">1</span>))</span><br><span class="line">    .reduceByKey(_ + _).collect()</span><br><span class="line">    res.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(<span class="string">&quot;spark.master&quot;</span>, <span class="string">&quot;local&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">val</span> sc = spark.sparkContext</span><br><span class="line">    <span class="keyword">val</span> filename = <span class="string">&quot;hdfs://localhost:8020/user/spark/word.txt&quot;</span></span><br><span class="line">    <span class="keyword">val</span> txt = sc.textFile(filename)</span><br><span class="line">    <span class="keyword">val</span> res = txt.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).filter(_.size &gt; <span class="number">0</span>).map(word =&gt; (word -&gt; <span class="number">1</span>))</span><br><span class="line">    .reduceByKey(_ + _).collect()</span><br><span class="line">    res.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) ➜  sparkapp $SPARK_HOME/bin/spark-submit \</span><br><span class="line">--class &quot;SimpleApp&quot; \</span><br><span class="line">--master local \</span><br><span class="line">./target/scala-2.13/simple-app_2.13-1.0.jar 2&amp;&gt;1 | grep &quot;Line&quot;</span><br><span class="line">Lines with a: 16, Lines with b: 15</span><br></pre></td></tr></table></figure>

<h4 id="wordCount"><a href="#wordCount" class="headerlink" title="wordCount"></a>wordCount</h4><blockquote>
<p>一些常用的函数</p>
</blockquote>
<p>文件读写：</p>
<ul>
<li>读写本地文件</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取文件	如果是本地文件 必须用 file:// 开头，用于区分 hdfs</span></span><br><span class="line"><span class="keyword">val</span> file = sc.textFile(filepath)</span><br><span class="line"></span><br><span class="line"><span class="comment">// spark 懒加载，加载文件的第一行</span></span><br><span class="line">file.first()</span><br><span class="line"></span><br><span class="line"><span class="comment">// textFile 写会</span></span><br><span class="line">file.saveasTextFile(filepath)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>读写 hdfs 文件</li>
</ul>
<p>hdfs 常用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir hdfspath</span><br><span class="line"></span><br><span class="line">hdfs dfs -ls hdfspath</span><br><span class="line"></span><br><span class="line">hdfs dfs -put localpath hfdspath</span><br><span class="line"></span><br><span class="line">hdfs dfs -cat hdfsfile</span><br><span class="line"></span><br><span class="line">hdfs dfs -get</span><br><span class="line"></span><br><span class="line">hdfs getconf -confKey fs.default.name # 获取本地 hdfs 端口号</span><br></pre></td></tr></table></figure>

<p>spark 读取 hdfs 路径：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> textFile = sc.textFile(<span class="string">&quot;hdfs://localhost:8020/user/spark/word.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上可以省略不写</span></span><br><span class="line"><span class="keyword">val</span> textFile = sc.textFile(<span class="string">&quot;/user/spark/word.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读写操作和本地文件类似</span></span><br></pre></td></tr></table></figure>



<p>词频统计：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">textFile.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; (word, <span class="number">1</span>)).reduceByKey((a, b) =&gt; a + b).foreach(println)</span><br></pre></td></tr></table></figure>



<h3 id="配置-vscode-scala-spark-环境"><a href="#配置-vscode-scala-spark-环境" class="headerlink" title="配置 vscode scala spark 环境"></a>配置 vscode scala spark 环境</h3><p><a class="link" href="https://blog.csdn.net/lyd882/article/details/111638953">vscode scala<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="vscode-配置-scalafmt-寄了，建议用-idea"><a href="#vscode-配置-scalafmt-寄了，建议用-idea" class="headerlink" title="vscode 配置 scalafmt (寄了，建议用 idea)"></a>vscode 配置 scalafmt (寄了，建议用 idea)</h4><p><a class="link" href="https://scalameta.org/scalafmt/docs/installation.html#metals">vscode scalafmt<i class="fas fa-external-link-alt"></i></a></p>
<p>在 <code>project</code> 中添加 <code>plugins.sbt</code> 文件</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In project/plugins.sbt. Note, does not support sbt 0.13, only sbt 1.x.</span></span><br><span class="line">addSbtPlugin(<span class="string">&quot;org.scalameta&quot;</span> % <span class="string">&quot;sbt-scalafmt&quot;</span> % <span class="type">SBT_PLUGIN_VERSION</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// idea</span></span><br><span class="line">addSbtPlugin(<span class="string">&quot;org.jetbrains.scala&quot;</span> % <span class="string">&quot;sbt-ide-settings&quot;</span> % <span class="string">&quot;1.1.1&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>添加 <code>.scalafmt.config</code> 文件</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">version = <span class="number">2.7</span><span class="number">.5</span></span><br></pre></td></tr></table></figure>



<h2 id="Spark-运行流程"><a href="#Spark-运行流程" class="headerlink" title="Spark 运行流程"></a>Spark 运行流程</h2><p><a class="link" href="https://www.cnblogs.com/frankdeng/p/9301485.html">spark 运行流程<i class="fas fa-external-link-alt"></i></a></p>
<p><img src="https://images2018.cnblogs.com/blog/1228818/201804/1228818-20180425170820868-121220770.png" alt="spark-process"></p>
<ol>
<li>Spark 应用程序被提交，任务控制节点(Driver)创建一个 SparkContext。SparkContext会向资源管理器(Cluster Manager)注册并申请运行Executor的资源。</li>
<li>Cluster Manager 为 Executor 分配资源，启动 executor 进程，executor运行情况将随着“心跳”发送到资源管理器上。</li>
<li>RDD -&gt; DAG -&gt; task set(stage) -&gt; executor</li>
<li>任务在Executor上运行，把执行结果反馈给任务调度器，然后反馈给DAG调度器，运行完毕后写入数据并释放所有资源。</li>
</ol>
<p>一个任务创建在一个 worker 上面创建一个 exector</p>
<h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><p>一个RDD就是一个<strong>分布式对象集合</strong>，本质上是一个<strong>只读</strong>的分区记录集合，每个RDD可以分成多个分区，每个分区就是一个数据集片段，并且一个RDD的<strong>不同分区可以被保存到集群中不同的节点上，从而可以在集群中的不同节点上进行并行计算。</strong></p>
<ul>
<li><p>容错：通过 RDD 的 DAG 实现容错</p>
</li>
<li><p>中间结果持久化到内存</p>
</li>
<li><p>存放数据可以是 Java obj</p>
</li>
<li><p>Narrow：一对一，多对一</p>
</li>
<li><p>Wild：一对多</p>
</li>
</ul>
<p><img src="https://dblab.xmu.edu.cn/blog/wp-content/uploads/2016/11/%E5%9B%BE9-10-%E7%AA%84%E4%BE%9D%E8%B5%96%E4%B8%8E%E5%AE%BD%E4%BE%9D%E8%B5%96%E7%9A%84%E5%8C%BA%E5%88%AB.jpg" alt="narrow &amp; wild"></p>
<blockquote>
<p>阶段划分</p>
</blockquote>
<p>在DAG中进行反向解析，<strong>遇到宽依赖就断开</strong>，<strong>遇到窄依赖就把当前的RDD加入到当前的阶段中</strong>；将窄依赖尽量划分在同一个阶段中，可以实现流水线计算。</p>
<p><img src="https://dblab.xmu.edu.cn/blog/wp-content/uploads/2016/11/%E5%9B%BE9-11-%E6%A0%B9%E6%8D%AERDD%E5%88%86%E5%8C%BA%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E5%88%92%E5%88%86%E9%98%B6%E6%AE%B5.jpg" alt="划分"></p>
<blockquote>
<p>运行过程</p>
</blockquote>
<ul>
<li>创建 RDD，sparkContext 解析依赖关系，生成 DAG</li>
<li>DAGScheduler 将 DAG 拆成多个 stage。</li>
<li>每个阶段中包含了多个任务，每个任务会被任务调度器分发给各个工作节点（Worker Node）上的Executor去执行。</li>
</ul>
<p><img src="https://dblab.xmu.edu.cn/blog/wp-content/uploads/2016/11/%E5%9B%BE9-12-RDD%E5%9C%A8Spark%E4%B8%AD%E7%9A%84%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.jpg" alt="process"></p>
<h3 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h3><ul>
<li><p>读取外部数据集，HDFS，LOCAL，Kafka</p>
<p>如果使用了本地文件系统的路径，那么，<strong>必须要保证在所有的worker节点上，也都能够采用相同的路径访问到该文件，</strong>比如，可以把该文件拷贝到每个worker节点上，或者也可以使用网络挂载共享文件系统。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> lines = sc.textFile(<span class="string">&quot;file:///usr/local/spark/mycode/rdd/word.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> lines = sc.textFile(<span class="string">&quot;hdfs://localhost:9000/user/hadoop/word.txt&quot;</span>)</span><br></pre></td></tr></table></figure>


</li>
<li><p>调用 SparkContext 的 parallelize 方法，在已有的集合上面创建一个 RDD</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line"><span class="keyword">val</span> array = (<span class="number">1</span> to <span class="number">10</span>).toArray</span><br><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(list)</span><br><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(array)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="RDD操作"><a href="#RDD操作" class="headerlink" title="RDD操作"></a>RDD操作</h3><p>RDD 创建之后，在后续过程中一般只会发生两种操作：</p>
<ul>
<li>transformation：RDD &#x3D;&gt; newRDD</li>
<li>Action: 在数据集上运算，返回结果</li>
</ul>
<h4 id="transformation"><a href="#transformation" class="headerlink" title="transformation"></a>transformation</h4><ul>
<li>filter(func)</li>
<li>map(func)</li>
<li>flatMap(func)</li>
<li>groupByKey()</li>
<li>reduceByKey(func)</li>
</ul>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><ul>
<li>count() </li>
<li>collect() 以数组的形式返回数据集中的所有元素</li>
<li>first() </li>
<li>take(n)</li>
<li>reduce(func)</li>
<li>foreach(func)</li>
</ul>
<h3 id="RDD持久化"><a href="#RDD持久化" class="headerlink" title="RDD持久化"></a>RDD持久化</h3><p>RDD采用惰性求值的机制，每次遇到行动操作，<strong>都会从头开始执行计算</strong>。</p>
<p>在一些情形下，我们需要多次调用不同的行动操作，这就意味着，每次调用行动操作，都会触发一次从头开始的计算。</p>
<p>通过持久化机制避免这种重复计算的开销。可以使用persist()方法对一个RDD标记为持久化，之所以说“标记为持久化”，是因为出现persist()语句的地方，<strong>并不会马上计算生成RDD并把它持久化，而是要等到遇到第一个行动操作触发真正计算以后</strong>，才会把计算结果进行持久化，持久化后的RDD将会被保留在计算节点的内存中被后面的行动操作重复使用。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> mp = textFile.map(line =&gt; line.split(<span class="string">&quot; &quot;</span>).size)</span><br><span class="line">mp: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">Int</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">48</span>] at map at &lt;console&gt;:<span class="number">23</span></span><br><span class="line"></span><br><span class="line">scala&gt; mp.cache() <span class="comment">// 不会缓存 mp，因为 mp 还没有计算生成</span></span><br><span class="line">res32: mp.<span class="keyword">type</span> = <span class="type">MapPartitionsRDD</span>[<span class="number">48</span>] at map at &lt;console&gt;:<span class="number">23</span></span><br><span class="line"></span><br><span class="line">scala&gt; mp.count() <span class="comment">// 计算 mp，并且缓存</span></span><br><span class="line">res33: <span class="type">Long</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">scala&gt; mp.collect() <span class="comment">// 重复使用 cache 的 mp</span></span><br><span class="line">res34: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">7</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<p>如果使用集群模式打印 RDD 的话，不能使用  <code>rdd.foreach(println)</code> 或者<code>rdd.map(println)</code>，而是 <code>rdd.collect().foreach(println)</code> 或者<code>rdd.collect().toke(100).foreach(println)</code></p>
<h3 id="键值对-RDD"><a href="#键值对-RDD" class="headerlink" title="键值对 RDD"></a>键值对 RDD</h3><p>通过 map 函数创建 kvRDD</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> pairRDD = lines.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>)).map(word =&gt; (word,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>



<p>transformation:</p>
<ul>
<li><p>reduceByKey</p>
</li>
<li><p>groupByKey</p>
</li>
<li><p>sortByKey</p>
</li>
<li><p>mapValues(func): 作用于 (k, v) 的 value 的函数</p>
</li>
<li><p>join:  (k, v1), (k, v2) &#x3D;&gt; (k, (v1, v2))</p>
</li>
<li><p>keys</p>
</li>
<li><p>values</p>
</li>
</ul>
<p>demo：统计 kv 的平均值</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="type">Array</span>((<span class="string">&quot;spark&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;hadoop&quot;</span>,<span class="number">6</span>),(<span class="string">&quot;hadoop&quot;</span>,<span class="number">4</span>),(<span class="string">&quot;spark&quot;</span>,<span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line">rdd.mapValues(x =&gt; (x, <span class="number">1</span>)).reduceByKey((x, y) =&gt; (x._1 + y._1, x._2 + y._2)).mapValues(x =&gt; x._1 / x._2).collect()</span><br></pre></td></tr></table></figure>





<ul>
<li><p>API</p>
<ul>
<li><p>Transformations &#x3D;&gt; another RDD</p>
<ul>
<li>map, filter, union</li>
<li>groupByKey, reduceByKey, repartition</li>
</ul>
</li>
<li><p>Actions &#x3D;&gt; Lineage 中断</p>
<ul>
<li>count, collect, saveAsTextFile</li>
<li>foreach</li>
</ul>
</li>
<li><p>parallelize</p>
</li>
</ul>
</li>
<li><p>Source</p>
<ul>
<li><p>from storage</p>
<ul>
<li><p>HDFS <code>words = sc.textFile(&quot;hdfs://...&quot;)</code></p>
</li>
<li><p>local:</p>
</li>
<li><p>Kafka</p>
</li>
</ul>
</li>
<li><p>from another RDD</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">res = words.map(word =&gt; (word, <span class="number">1</span>)).reduceByKey((a, b) =&gt; a + b)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>提交作业：</p>
<ul>
<li><p><code>spark-shell</code></p>
</li>
<li><p><code>Spark-submit</code></p>
</li>
<li><p>narrow(pipeline): e.g. map</p>
</li>
<li><p>wide(shuffle): e.g. reduceByKey</p>
</li>
</ul>
<h2 id="共享变量"><a href="#共享变量" class="headerlink" title="共享变量"></a>共享变量</h2><p>当Spark在集群的多个不同节点的多个任务上并行运行一个函数时，它会把函数中涉及到的<strong>每个变量</strong>，在每个任务上都生成一个<strong>副本</strong>。</p>
<p>问题：有时候，需要在多个任务之间共享变量。</p>
<p>解决：引入 广播变量，累加器</p>
<h3 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h3><blockquote>
<p><strong>序列化</strong>是 Java对象 &#x3D;&gt; 字节序列 的过程。</p>
<p><strong>反序列化</strong>是 字节序列 &#x3D;&gt; Java对象 的过程。</p>
<p>主要用于两个 java 进程进行通信，传输 java 对象传送。</p>
<p>好处：</p>
<ul>
<li>数据持久化</li>
<li>序列化实现远程通信</li>
</ul>
<p><a class="link" href="https://juejin.cn/post/7064942360106369054">序列化 &amp; 反序列化<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>在每个机器上<strong>缓存</strong>一个<strong>只读</strong>的变量，<strong>而不是</strong>为机器上的每个任务都生成一个副本。</p>
<p>显式创建广播变量的场景：当跨越多个阶段的那些任务需要相同的数据。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> broadcastVar = sc.broadcast(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">broadcastVar.value</span><br></pre></td></tr></table></figure>

<p>SparkContext.broadcast(v) 之后，集群的函数都需要使用 广播变量 的值，而不是原值。</p>
<h3 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h3><p>一个数值型的累加器，可以通过调用SparkContext.longAccumulator()或者SparkContext.doubleAccumulator()来创建。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> accum = sc.longAccumulator(<span class="string">&quot;My Accumulator&quot;</span>)</span><br><span class="line"></span><br><span class="line">sc.parallelize(<span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)).foreach(x =&gt; accum.add(x))</span><br><span class="line"></span><br><span class="line">accum.value</span><br></pre></td></tr></table></figure>



<h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><p>DataFrame 和 RDD 的区别：</p>
<ul>
<li>RDD 是分布式 Java 对象集合，对象内部结构对于 RDD 不可知。</li>
<li>DataFrame 是以 RDD 为基础的分布式数据集(分布式 Row 对象集合)，提供详细的结构信息</li>
</ul>
<p>同时：</p>
<p>DataFrame 也采用惰性机制，和 RDD 的处理逻辑一样。</p>
<h3 id="DF-创建-amp-保存"><a href="#DF-创建-amp-保存" class="headerlink" title="DF 创建 &amp; 保存"></a>DF 创建 &amp; 保存</h3><blockquote>
<p>创建</p>
</blockquote>
<ul>
<li>读取文件</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> peopleDF = spark.read.format(<span class="string">&quot;json&quot;</span>).load(<span class="string">&quot;file:///people.json&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 rdd 创建 df</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> filename = <span class="string">&quot;hdfs://localhost:8020/user/spark/people.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> peopleRDD = spark.sparkContext.textFile(filename)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The schema is encoded in a string</span></span><br><span class="line">    <span class="keyword">val</span> schemaString = <span class="string">&quot;name age&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the schema based on the string of schema</span></span><br><span class="line">    <span class="keyword">val</span> fields = schemaString.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      .map(fieldName =&gt; <span class="type">StructField</span>(fieldName, <span class="type">StringType</span>, nullable = <span class="literal">true</span>))</span><br><span class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(fields)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Convert records of the RDD (people) to Rows</span></span><br><span class="line">    <span class="keyword">val</span> rowRDD = peopleRDD</span><br><span class="line">      .map(_.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">      .map(attributes =&gt; <span class="type">Row</span>(attributes(<span class="number">0</span>), attributes(<span class="number">1</span>).trim))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Apply the schema to the RDD</span></span><br><span class="line">    <span class="keyword">val</span> peopleDF = spark.createDataFrame(rowRDD, schema)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Creates a temporary view using the DataFrame</span></span><br><span class="line">    peopleDF.createOrReplaceTempView(<span class="string">&quot;people&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SQL can be run over a temporary view created using DataFrames</span></span><br><span class="line">    <span class="keyword">val</span> results = spark.sql(<span class="string">&quot;SELECT name FROM people&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The results of SQL queries are DataFrames and support all the normal RDD operations</span></span><br><span class="line">    <span class="comment">// The columns of a row in the result can be accessed by field index or by field name</span></span><br><span class="line">    results.map(attributes =&gt; <span class="string">&quot;Name: &quot;</span> + attributes(<span class="number">0</span>)).show()</span><br></pre></td></tr></table></figure>

<ol>
<li>读取 rdd &#x3D;&gt; rowRDD</li>
<li>创建 schema</li>
<li>创建 df</li>
</ol>
<blockquote>
<p>保存</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">peopleDF.select(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>).write.format(<span class="string">&quot;csv&quot;</span>).save(<span class="string">&quot;file:///newpeople.csv&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>write.format()支持输出 json,parquet, jdbc, orc, libsvm, csv, text等格式文件，如果要输出文本文件，可以采用write.format(“text”)，但是，需要注意，只有select()中只存在一个列时，才允许保存成文本文件，如果存在两个列，比如select(“name”, “age”)，就不能保存成文本文件。</p>
<h3 id="获取-mysql-数据"><a href="#获取-mysql-数据" class="headerlink" title="获取 mysql 数据"></a>获取 mysql 数据</h3><p><a class="link" href="https://blog.csdn.net/hjw199089/article/details/53522554">shell &amp; 程序方法使用 JDBC 读取 mysql 数据<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>安装 JDBC</p>
</li>
<li><p>启动 shell 的时候指定 jdbc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spark-shell \</span><br><span class="line">--jars $SPARK_HOME/jars/mysql-connector-j-8.0.31/mysql-connector-j-8.0.31.jar \</span><br><span class="line">--driver-class-path $SPARK_HOME/jars/mysql-connector-j-8.0.31/mysql-connector-j-8.0.31.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取 mysql 数据</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> jdbcDF = spark.read.format(<span class="string">&quot;jdbc&quot;</span>).option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://localhost:3306/spark&quot;</span>).option(<span class="string">&quot;driver&quot;</span>,<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>).option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;student&quot;</span>).option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>).option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>).load()</span><br><span class="line">jdbcDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [id: int, name: string ... <span class="number">2</span> more fields]</span><br><span class="line"></span><br><span class="line">scala&gt; jdbcDF.show()</span><br><span class="line">+---+--------+------+---+</span><br><span class="line">| id|    name|gender|age|</span><br><span class="line">+---+--------+------+---+</span><br><span class="line">|  <span class="number">1</span>| <span class="type">Xueqian</span>|     <span class="type">F</span>| <span class="number">23</span>|</span><br><span class="line">|  <span class="number">2</span>|<span class="type">Weiliang</span>|     <span class="type">M</span>| <span class="number">24</span>|</span><br><span class="line">+---+--------+------+---+</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h2><p><img src="https://spark.apache.org/docs/latest/img/streaming-flow.png"></p>
<p>将输入流按照时间片进行拆分（秒级），然后进过 spark 引擎批处理。</p>
<p>DStream（Discretized Stream，离散化数据流），表示连续不断的数据流。</p>
<h2 id="数据分区器-rdd如何存储"><a href="#数据分区器-rdd如何存储" class="headerlink" title="数据分区器 rdd如何存储"></a>数据分区器 rdd如何存储</h2><h2 id="Spark-源码阅读"><a href="#Spark-源码阅读" class="headerlink" title="Spark 源码阅读"></a>Spark 源码阅读</h2><h3 id="RDD-1"><a href="#RDD-1" class="headerlink" title="RDD"></a>RDD</h3><ul>
<li>partitions 列表</li>
<li>dependencies 列表</li>
<li>一些函数，e.g. map</li>
</ul>
<h4 id="RDD-分区"><a href="#RDD-分区" class="headerlink" title="RDD 分区"></a>RDD 分区</h4><p>分区接口定义，实现 <code>Serializable</code> 可以实现序列化操作。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Partition</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the partition&#x27;s index within its parent RDD</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// A better default implementation of HashCode</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">hashCode</span></span>(): <span class="type">Int</span> = index</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">equals</span></span>(other: <span class="type">Any</span>): <span class="type">Boolean</span> = <span class="keyword">super</span>.equals(other)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>RDD：</p>
<ul>
<li>包含一个 <code>partitions</code> 的 list，外界只能通过 <code>partitions</code> 方法来访问，子类需要重写 <code>getPartitions</code> 方法</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@transient</span> <span class="keyword">private</span> <span class="keyword">var</span> partitions_ : <span class="type">Array</span>[<span class="type">Partition</span>] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Implemented by subclasses to return the set of partitions in this RDD. This method will only</span></span><br><span class="line"><span class="comment">   * be called once, so it is safe to implement a time-consuming computation in it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartitions</span></span>: <span class="type">Array</span>[<span class="type">Partition</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the array of partitions of this RDD, taking into account whether the</span></span><br><span class="line"><span class="comment">   * RDD is checkpointed or not.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">final</span> <span class="function"><span class="keyword">def</span> <span class="title">partitions</span></span>: <span class="type">Array</span>[<span class="type">Partition</span>] = &#123;</span><br><span class="line">    checkpointRDD.map(_.partitions).getOrElse &#123;</span><br><span class="line">      <span class="keyword">if</span> (partitions_ == <span class="literal">null</span>) &#123;</span><br><span class="line">        partitions_ = getPartitions</span><br><span class="line">      &#125;</span><br><span class="line">      partitions_</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h5 id="RDD-分区个数分配原则"><a href="#RDD-分区个数分配原则" class="headerlink" title="RDD 分区个数分配原则"></a>RDD 分区个数分配原则</h5><p>尽可能使得分区的个数，等于集群核心数目。</p>
<p><strong>转换操作</strong>得到的 RDD 的分区个数：</p>
<ul>
<li>narrow：子 RDD 由<strong>父 RDD 分区个数</strong>决定</li>
<li>Shuffle：依赖由子 RDD <strong>分区器</strong>决定</li>
</ul>
<p><code>parallelize</code> 方法，通过 <code>defaultParallelism</code> 参数来决定分区大小。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parallelize</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](</span><br><span class="line">    seq: <span class="type">Seq</span>[<span class="type">T</span>],</span><br><span class="line">    numSlices: <span class="type">Int</span> = defaultParallelism): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  assertNotStopped()</span><br><span class="line">  <span class="keyword">new</span> <span class="type">ParallelCollectionRDD</span>[<span class="type">T</span>](<span class="keyword">this</span>, seq, numSlices, <span class="type">Map</span>[<span class="type">Int</span>, <span class="type">Seq</span>[<span class="type">String</span>]]())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>defaultParallelism</code> 参数由 spark 不同的模式来确定，例如 <code>SingleCoreMockBackend</code> 只有一个 <code>core</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">class</span> <span class="title">SingleCoreMockBackend</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">  conf: <span class="type">SparkConf</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">  taskScheduler: <span class="type">TaskSchedulerImpl</span></span>) <span class="keyword">extends</span> <span class="title">MockBackend</span>(<span class="params">conf, taskScheduler</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> cores = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">defaultParallelism</span></span>(): <span class="type">Int</span> = conf.getInt(<span class="string">&quot;spark.default.parallelism&quot;</span>, cores)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>textFile</code> 方法，最小是 2</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">textFile</span></span>(</span><br><span class="line">    path: <span class="type">String</span>,</span><br><span class="line">    minPartitions: <span class="type">Int</span> = defaultMinPartitions): <span class="type">RDD</span>[<span class="type">String</span>] = withScope &#123;</span><br><span class="line">  assertNotStopped()</span><br><span class="line">  hadoopFile(path, classOf[<span class="type">TextInputFormat</span>], classOf[<span class="type">LongWritable</span>], classOf[<span class="type">Text</span>],</span><br><span class="line">    minPartitions).map(pair =&gt; pair._2.toString).setName(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">defaultMinPartitions</span></span>: <span class="type">Int</span> = math.min(defaultParallelism, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>





<h5 id="RDD-分区内记录个数"><a href="#RDD-分区内记录个数" class="headerlink" title="RDD 分区内记录个数"></a>RDD 分区内记录个数</h5><p>尽可能使同一 RDD 不同分区内的记录的数量一致。</p>
<ul>
<li>narrow：依赖于<strong>父 RDD 中相同编号分区</strong>是如何进行数据分配的</li>
<li>shuffle：依赖于选择的<strong>分区器</strong>，哈希分区器无法保证数据被平均分配到各个分区，而范围分区器则能做到这一点。</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">object</span> <span class="title">ParallelCollectionRDD</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Slice a collection into numSlices sub-collections. One extra thing we do here is to treat Range</span></span><br><span class="line"><span class="comment">   * collections specially, encoding the slices as other Ranges to minimize memory cost. This makes</span></span><br><span class="line"><span class="comment">   * it efficient to run Spark over RDDs representing large sets of numbers. And if the collection</span></span><br><span class="line"><span class="comment">   * is an inclusive Range, we use inclusive range for the last slice.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">slice</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](seq: <span class="type">Seq</span>[<span class="type">T</span>], numSlices: <span class="type">Int</span>): <span class="type">Seq</span>[<span class="type">Seq</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (numSlices &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">&quot;Positive number of partitions required&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sequences need to be sliced at the same set of index positions for operations</span></span><br><span class="line">    <span class="comment">// like RDD.zip() to behave as expected</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">positions</span></span>(length: <span class="type">Long</span>, numSlices: <span class="type">Int</span>): <span class="type">Iterator</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = &#123;</span><br><span class="line">      (<span class="number">0</span> until numSlices).iterator.map &#123; i =&gt;</span><br><span class="line">        <span class="keyword">val</span> start = ((i * length) / numSlices).toInt</span><br><span class="line">        <span class="keyword">val</span> end = (((i + <span class="number">1</span>) * length) / numSlices).toInt</span><br><span class="line">        (start, end)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    seq <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> r: <span class="type">Range</span> =&gt;</span><br><span class="line">        positions(r.length, numSlices).zipWithIndex.map &#123; <span class="keyword">case</span> ((start, end), index) =&gt;</span><br><span class="line">          <span class="comment">// If the range is inclusive, use inclusive range for the last slice</span></span><br><span class="line">          <span class="keyword">if</span> (r.isInclusive &amp;&amp; index == numSlices - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="type">Range</span>.<span class="type">Inclusive</span>(r.start + start * r.step, r.end, r.step)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="type">Range</span>.<span class="type">Inclusive</span>(r.start + start * r.step, r.start + (end - <span class="number">1</span>) * r.step, r.step)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;.toSeq.asInstanceOf[<span class="type">Seq</span>[<span class="type">Seq</span>[<span class="type">T</span>]]]</span><br><span class="line">      <span class="keyword">case</span> nr: <span class="type">NumericRange</span>[<span class="type">T</span>] =&gt;</span><br><span class="line">        <span class="comment">// For ranges of Long, Double, BigInteger, etc</span></span><br><span class="line">        <span class="keyword">val</span> slices = <span class="keyword">new</span> <span class="type">ArrayBuffer</span>[<span class="type">Seq</span>[<span class="type">T</span>]](numSlices)</span><br><span class="line">        <span class="keyword">var</span> r = nr</span><br><span class="line">        <span class="keyword">for</span> ((start, end) &lt;- positions(nr.length, numSlices)) &#123;</span><br><span class="line">          <span class="keyword">val</span> sliceSize = end - start</span><br><span class="line">          slices += r.take(sliceSize).asInstanceOf[<span class="type">Seq</span>[<span class="type">T</span>]]</span><br><span class="line">          r = r.drop(sliceSize)</span><br><span class="line">        &#125;</span><br><span class="line">        slices.toSeq</span><br><span class="line">      <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        <span class="keyword">val</span> array = seq.toArray <span class="comment">// To prevent O(n^2) operations for List etc</span></span><br><span class="line">        positions(array.length, numSlices).map &#123; <span class="keyword">case</span> (start, end) =&gt;</span><br><span class="line">            array.slice(start, end).toSeq</span><br><span class="line">        &#125;.toSeq</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是构造等长的分区。</p>
<h4 id="RDD-依赖"><a href="#RDD-依赖" class="headerlink" title="RDD 依赖"></a>RDD 依赖</h4><p>在外部通常把记录的信息成为血缘关系。在内部记录则是 RDD 之间的依赖 Dependancy。</p>
<p>依赖只保存在<strong>父 RDD</strong> 中。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dependency</span>[<span class="type">T</span>] <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rdd</span></span>: <span class="type">RDD</span>[<span class="type">T</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>依赖的分类</p>
</blockquote>
<p>依赖关系指两个 RDD 之间的依赖关系。如果一次转换中包含多个父依赖，则<strong>可能同时存在 narrow 和 wild</strong></p>
<p><img src="https://ihainan.gitbooks.io/spark-source-code/content/media/images/section1/RDDDependencies/ComplexDependencies.png"></p>
<h5 id="narrow"><a href="#narrow" class="headerlink" title="narrow"></a>narrow</h5><p>Narrow 实现在 <code>NarrowDependency</code> 中。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NarrowDependency</span>[<span class="type">T</span>](<span class="params">_rdd: <span class="type">RDD</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">Dependency</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the parent partitions for a child partition.</span></span><br><span class="line"><span class="comment">   * 用于获取分区来源于父 RDD 中的哪一个分区，只会返回一个元素</span></span><br><span class="line"><span class="comment">   * @param partitionId a partition of the child RDD</span></span><br><span class="line"><span class="comment">   * @return the partitions of the parent RDD that the child partition depends upon</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getParents</span></span>(partitionId: <span class="type">Int</span>): <span class="type">Seq</span>[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">rdd</span></span>: <span class="type">RDD</span>[<span class="type">T</span>] = _rdd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>narrow 可以进一步分为 <strong>一对一依赖</strong> 和 <strong>范围依赖</strong></p>
<blockquote>
<p>一对一依赖</p>
</blockquote>
<p>一对一依赖表示子 RDD 分区的编号与父 RDD 分区的编号完全一致的情况。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneToOneDependency</span>[<span class="type">T</span>](<span class="params">rdd: <span class="type">RDD</span>[<span class="type">T</span>]</span>) <span class="keyword">extends</span> <span class="title">NarrowDependency</span>[<span class="type">T</span>](<span class="params">rdd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getParents</span></span>(partitionId: <span class="type">Int</span>) = <span class="type">List</span>(partitionId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>范围依赖</p>
</blockquote>
<p>范围依赖是子 RDD 有父 RDD，但是分区信息还是一对一的。如图：</p>
<p><img src="https://ihainan.gitbooks.io/spark-source-code/content/media/images/section1/RDDDependencies/RangeDependencyExample.png"></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment"> * Represents a one-to-one dependency between ranges of partitions in the parent and child RDDs.</span></span><br><span class="line"><span class="comment"> * @param rdd the parent RDD</span></span><br><span class="line"><span class="comment"> * @param inStart the start of the range in the parent RDD</span></span><br><span class="line"><span class="comment"> * @param outStart the start of the range in the child RDD</span></span><br><span class="line"><span class="comment"> * @param length the length of the range</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">RangeDependency</span>[<span class="type">T</span>](<span class="params">rdd: <span class="type">RDD</span>[<span class="type">T</span>], inStart: <span class="type">Int</span>, outStart: <span class="type">Int</span>, length: <span class="type">Int</span></span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">NarrowDependency</span>[<span class="type">T</span>](rdd) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getParents</span></span>(partitionId: <span class="type">Int</span>) = &#123;</span><br><span class="line">      <span class="comment">// 如果在子分区中，返回对应父分区</span></span><br><span class="line">    <span class="keyword">if</span> (partitionId &gt;= outStart &amp;&amp; partitionId &lt; outStart + length) &#123;</span><br><span class="line">      <span class="type">List</span>(partitionId - outStart + inStart)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则是 Nil</span></span><br><span class="line">      <span class="type">Nil</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment"> * Represents a dependency on the output of a shuffle stage. Note that in the case of shuffle,</span></span><br><span class="line"><span class="comment"> * the RDD is transient since we don&#x27;t need it on the executor side.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param _rdd the parent RDD</span></span><br><span class="line"><span class="comment"> * @param partitioner partitioner used to partition the shuffle output</span></span><br><span class="line"><span class="comment"> * @param serializer [[org.apache.spark.serializer.Serializer Serializer]] to use. If set to None,</span></span><br><span class="line"><span class="comment"> *                   the default serializer, as specified by `spark.serializer` config option, will</span></span><br><span class="line"><span class="comment"> *                   be used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShuffleDependency</span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">C</span>](<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="class">    @transient _rdd: <span class="type">RDD</span>[_ &lt;: <span class="type">Product2</span>[<span class="type">K</span>, <span class="type">V</span>]],</span></span></span><br><span class="line"><span class="params"><span class="class">val partitioner: <span class="type">Partitioner</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">val serializer: <span class="type">Option</span>[<span class="type">Serializer</span>] = <span class="type">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val keyOrdering: <span class="type">Option</span>[<span class="type">Ordering</span>[<span class="type">K</span>]] = <span class="type">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val aggregator: <span class="type">Option</span>[<span class="type">Aggregator</span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">C</span>]] = <span class="type">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="class">    val mapSideCombine: <span class="type">Boolean</span> = false</span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">Dependency</span>[<span class="type">Product2</span>[<span class="type">K</span>, <span class="type">V</span>]] &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">rdd</span> </span>= _rdd.asInstanceOf[<span class="type">RDD</span>[<span class="type">Product2</span>[<span class="type">K</span>, <span class="type">V</span>]]]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> shuffleId: <span class="type">Int</span> = _rdd.context.newShuffleId()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> shuffleHandle: <span class="type">ShuffleHandle</span> = _rdd.context.env.shuffleManager.registerShuffle(</span><br><span class="line">      shuffleId, _rdd.partitions.size, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  _rdd.sparkContext.cleaner.foreach(_.registerShuffleForCleanup(<span class="keyword">this</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="RDD-持久化"><a href="#RDD-持久化" class="headerlink" title="RDD 持久化"></a>RDD 持久化</h4><p>Spark 速度非常快的原因之一，就是在不同操作中<strong>可以在内存中持久化或缓存个数据集</strong>。</p>
<p>缓存是 Spark 构建 <code>迭代式算法</code> 和 <code>快速交互式查询</code> 的关键。</p>
<p>如果一个有持久化数据的节点<strong>发生故障</strong>，Spark 会在需要<strong>用到缓存的数据时重算丢失的数据分区</strong>。如果希望节点故障的情况不会拖累我们的执行速度，也可以把数据<strong>备份到多个节点</strong>上。</p>
<p>两种持久化操作：</p>
<ul>
<li>persist(StorageLevel)</li>
<li>cache， cache 就相当于 MEMORY_ONLY 的 persist</li>
</ul>
<h5 id="RDD-缓存方式"><a href="#RDD-缓存方式" class="headerlink" title="RDD 缓存方式"></a>RDD 缓存方式</h5><p>[[内存管理]] 可以查看 on-heap 和 off-heap 内存的优缺点。</p>
<p>默认情况下 <code>persist()</code> 会把数据以序列化的形式缓存在 JVM 的堆空间中。</p>
<p>这两个方法并<strong>不是被调用时立即缓存</strong>，而是触发后面的 <strong>action</strong> 时，该 RDD 将会被缓存在计算节点的内存中，并供后面重用。</p>
<p>在存储级别的末尾加上 <code>_2</code> 来把持久化数据存为两份。例如 <code>DISK_ONLY_2</code></p>
<p><img src="https://s2.ax1x.com/2019/04/26/Enf9Nn.png" alt="storage level"></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StorageLevel</span> </span>&#123;  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">NONE</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY_3</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">3</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)  </span><br><span class="line">  <span class="keyword">val</span> <span class="type">OFF_HEAP</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="persist-cache-unpersist"><a href="#persist-cache-unpersist" class="headerlink" title="persist, cache, unpersist"></a>persist, cache, unpersist</h5><blockquote>
<p>persist and cache</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cache() 等同于 persist() 等同于 persist(StorageLevel.MEMORY_ONLY) ，也就是仅缓存于存储内存中。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cache</span></span>(): <span class="keyword">this</span>.<span class="keyword">type</span> = persist()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">persist</span></span>(): <span class="keyword">this</span>.<span class="keyword">type</span> = persist(<span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存级别，由5个参数组成</span></span><br><span class="line"><span class="keyword">new</span> <span class="type">StorageLevel</span>(useDisk, useMemory, useOffHeap, deserialized, replication))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">persist</span></span>(newLevel: <span class="type">StorageLevel</span>): <span class="keyword">this</span>.<span class="keyword">type</span> = &#123;</span><br><span class="line">  <span class="comment">// isLocallyCheckpointed 方法 判断该RDD是否已经标记为 checkpoint，注意不是cache</span></span><br><span class="line">  <span class="keyword">if</span> (isLocallyCheckpointed) &#123;</span><br><span class="line">    persist(<span class="type">LocalRDDCheckpointData</span>.transformStorageLevel(newLevel), allowOverride = <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    persist(newLevel, allowOverride = <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">persist</span></span>(newLevel: <span class="type">StorageLevel</span>, allowOverride: <span class="type">Boolean</span>): <span class="keyword">this</span>.<span class="keyword">type</span> = &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Handle changes of StorageLevel</span></span><br><span class="line">    <span class="keyword">if</span> (storageLevel != <span class="type">StorageLevel</span>.<span class="type">NONE</span> &amp;&amp; newLevel != storageLevel &amp;&amp; !allowOverride) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">SparkCoreErrors</span>.cannotChangeStorageLevelError()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If this is the first time this RDD is marked for persisting, register it</span></span><br><span class="line">    <span class="comment">// with the SparkContext for cleanups and accounting. Do this only once.</span></span><br><span class="line">    <span class="keyword">if</span> (storageLevel == <span class="type">StorageLevel</span>.<span class="type">NONE</span>) &#123;</span><br><span class="line">        sc.cleaner.foreach(_.registerRDDForCleanup(<span class="keyword">this</span>))</span><br><span class="line">        sc.persistRDD(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改 rdd 的存储级别</span></span><br><span class="line">    storageLevel = newLevel</span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register an RDD to be persisted in memory and/or disk storage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span>[spark] <span class="function"><span class="keyword">def</span> <span class="title">persistRDD</span></span>(rdd: <span class="type">RDD</span>[_]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 相当于打一个标记，真正触发 rdd storage 的地方是在 iterator 的时候</span></span><br><span class="line">    persistentRdds(rdd.id) = rdd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>unpersist</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpersist</span></span>(blocking: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="keyword">this</span>.<span class="keyword">type</span> = &#123;</span><br><span class="line">    logInfo(<span class="string">s&quot;Removing RDD <span class="subst">$id</span> from persistence list&quot;</span>)</span><br><span class="line">    sc.unpersistRDD(id, blocking)</span><br><span class="line">    storageLevel = <span class="type">StorageLevel</span>.<span class="type">NONE</span></span><br><span class="line">    <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>[spark] <span class="function"><span class="keyword">def</span> <span class="title">unpersistRDD</span></span>(rddId: <span class="type">Int</span>, blocking: <span class="type">Boolean</span> = <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 通知blockManager删掉属于该RDD的全部block</span></span><br><span class="line">    env.blockManager.master.removeRdd(rddId, blocking)</span><br><span class="line">    <span class="comment">// 从map中移掉它</span></span><br><span class="line">    persistentRdds.remove(rddId)</span><br><span class="line">    listenerBus.post(<span class="type">SparkListenerUnpersistRDD</span>(rddId))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>获取 persistent RDD 的方法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> rdds = sc.getPersistentRDDs</span><br><span class="line">rdds: scala.collection.<span class="type">Map</span>[<span class="type">Int</span>,org.apache.spark.rdd.<span class="type">RDD</span>[_]] = <span class="type">Map</span>(<span class="number">5</span> -&gt; <span class="type">ShuffledRDD</span>[<span class="number">5</span>] at partitionBy at &lt;console&gt;:<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; rdds.foreach(println)</span><br><span class="line">(<span class="number">5</span>,<span class="type">ShuffledRDD</span>[<span class="number">5</span>] at partitionBy at &lt;console&gt;:<span class="number">28</span>)</span><br></pre></td></tr></table></figure>

<h5 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h5><p><a class="link" href="https://www.runoob.com/scala/currying-functions.html">scala curring function<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://zhuanlan.zhihu.com/p/541508600">RDD缓存的实现逻辑分析<i class="fas fa-external-link-alt"></i></a></p>
<p>iterator 是真正触发存储的地方</p>
<ol>
<li><p><code>iterator</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">def</span> <span class="title">iterator</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">if</span> (storageLevel != <span class="type">StorageLevel</span>.<span class="type">NONE</span>) &#123;</span><br><span class="line">       	<span class="comment">// 如果存储等级存在的话，调用</span></span><br><span class="line">        getOrCompute(split, context)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// compute or 读取 checkpoint</span></span><br><span class="line">        computeOrReadCheckpoint(split, context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>getOrComput</code> </p>
</li>
<li><ul>
<li>通过 cache 或者 checkpoint 读取数据</li>
<li>否则 comput，然后<strong>存储</strong></li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="function"><span class="keyword">def</span> <span class="title">getOrCompute</span></span>(partition: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> blockId = <span class="type">RDDBlockId</span>(id, partition.index)</span><br><span class="line">    <span class="keyword">var</span> readCachedBlock = <span class="literal">true</span></span><br><span class="line">    <span class="type">SparkEnv</span>.get.blockManager.getOrElseUpdate(blockId, storageLevel, elementClassTag, () =&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义了如果 rdd 没有存储，计算的过程</span></span><br><span class="line">        readCachedBlock = <span class="literal">false</span></span><br><span class="line">        computeOrReadCheckpoint(partition, context)</span><br><span class="line">    &#125;) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="comment">// Block hit. 通过 comput 或者 存储 获取到数据</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Left</span>(blockResult) =&gt;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Need to compute the block. 只有不够存储的时候才会出发这个 comput</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Right</span>(iter) =&gt;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">InterruptibleIterator</span>(context, iter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>[spark] <span class="function"><span class="keyword">def</span> <span class="title">computeOrReadCheckpoint</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isCheckpointedAndMaterialized) &#123;</span><br><span class="line">        <span class="comment">// 如果有 checkpoint，TODO</span></span><br><span class="line">        firstParent[<span class="type">T</span>].iterator(split, context)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则计算</span></span><br><span class="line">        compute(split, context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">   * :: DeveloperApi ::</span></span><br><span class="line"><span class="comment">   * Implemented by subclasses to compute a given partition.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@DeveloperApi</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[<span class="type">T</span>]</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>getOrElseUpdate</code></p>
<ul>
<li>命中，读取 storage</li>
<li>不命中，comput and storage</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOrElseUpdate</span></span>[<span class="type">T</span>](</span><br><span class="line">    blockId: <span class="type">BlockId</span>,</span><br><span class="line">    level: <span class="type">StorageLevel</span>,</span><br><span class="line">    classTag: <span class="type">ClassTag</span>[<span class="type">T</span>],</span><br><span class="line">    makeIterator: () =&gt; <span class="type">Iterator</span>[<span class="type">T</span>]): <span class="type">Either</span>[<span class="type">BlockResult</span>, <span class="type">Iterator</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">    <span class="comment">// hit local or remote storage, retrun ans</span></span><br><span class="line">    get[<span class="type">T</span>](blockId)(classTag) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(block) =&gt;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Left</span>(block)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        <span class="comment">// Need to compute the block.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Initially we hold no locks on this block.</span></span><br><span class="line">    doPutIterator(blockId, makeIterator, level, classTag, keepReadLock = <span class="literal">true</span>) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span> =&gt;</span><br><span class="line">        <span class="comment">// SUCCESS the block already existed or was successfully stored</span></span><br><span class="line">        <span class="type">Left</span>(blockResult)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(iter) =&gt;</span><br><span class="line">        <span class="comment">// FAILED</span></span><br><span class="line">        <span class="comment">// The put failed, likely because the data was too large to fit in memory and could not be</span></span><br><span class="line">        <span class="comment">// dropped to disk. Therefore, we need to pass the input iterator back to the caller so</span></span><br><span class="line">        <span class="comment">// that they can decide what to do with the values (e.g. process them without caching).</span></span><br><span class="line">        <span class="type">Right</span>(iter)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>doPutIterator</code></p>
<ol>
<li>优先使用 memory<ol>
<li>可以序列化 <code>memoryStore.putIteratorAsBytes</code></li>
<li>不能序列化 <code>memoryStore.putIteratorAsValues</code></li>
<li>使用 disk <code>diskStore.put</code></li>
</ol>
</li>
<li>使用 disk <code>diskStore.put</code></li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">doPutIterator</span></span>[<span class="type">T</span>](</span><br><span class="line">    blockId: <span class="type">BlockId</span>,</span><br><span class="line">    iterator: () =&gt; <span class="type">Iterator</span>[<span class="type">T</span>],</span><br><span class="line">    level: <span class="type">StorageLevel</span>,</span><br><span class="line">    classTag: <span class="type">ClassTag</span>[<span class="type">T</span>],</span><br><span class="line">    tellMaster: <span class="type">Boolean</span> = <span class="literal">true</span>,</span><br><span class="line">    keepReadLock: <span class="type">Boolean</span> = <span class="literal">false</span>): <span class="type">Option</span>[<span class="type">PartiallyUnrolledIterator</span>[<span class="type">T</span>]] = &#123;</span><br><span class="line">    doPut(blockId, level, classTag, tellMaster = tellMaster, keepReadLock = keepReadLock) &#123; info =&gt;</span><br><span class="line">        <span class="keyword">val</span> startTimeNs = <span class="type">System</span>.nanoTime()</span><br><span class="line">        <span class="keyword">var</span> iteratorFromFailedMemoryStorePut: <span class="type">Option</span>[<span class="type">PartiallyUnrolledIterator</span>[<span class="type">T</span>]] = <span class="type">None</span></span><br><span class="line">        <span class="comment">// Size of the block in bytes</span></span><br><span class="line">        <span class="keyword">var</span> size = <span class="number">0</span>L</span><br><span class="line">        <span class="keyword">if</span> (level.useMemory) &#123;</span><br><span class="line">            <span class="comment">// 优先使用内存</span></span><br><span class="line">            <span class="comment">// Put it in memory first, even if it also has useDisk set to true;</span></span><br><span class="line">            <span class="comment">// We will drop it to disk later if the memory store can&#x27;t hold it.</span></span><br><span class="line">            <span class="keyword">if</span> (level.deserialized) &#123;</span><br><span class="line">                <span class="comment">// 不能序列化，iterator() 需要启动 executor 先进行计算，得到 res，存储</span></span><br><span class="line">                memoryStore.putIteratorAsValues(blockId, iterator(), level.memoryMode, classTag) <span class="keyword">match</span> &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="type">Right</span>(s) =&gt;</span><br><span class="line">                    size = s</span><br><span class="line">                    <span class="keyword">case</span> <span class="type">Left</span>(iter) =&gt;</span><br><span class="line">                    <span class="comment">// Not enough space to unroll this block; drop to disk if applicable</span></span><br><span class="line">                    <span class="keyword">if</span> (level.useDisk) &#123;</span><br><span class="line">                        <span class="comment">// 使用 disk 存储</span></span><br><span class="line">                        diskStore.put(blockId) &#123; channel =&gt;</span><br><span class="line">                            <span class="keyword">val</span> out = <span class="type">Channels</span>.newOutputStream(channel)</span><br><span class="line">                            serializerManager.dataSerializeStream(blockId, out, iter)(classTag)</span><br><span class="line">                        &#125;</span><br><span class="line">                        size = diskStore.getSize(blockId)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        iteratorFromFailedMemoryStorePut = <span class="type">Some</span>(iter)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// !level.deserialized</span></span><br><span class="line">                <span class="comment">// 可以序列化，iterator() 需要启动 executor 先进行计算，得到 res，存储</span></span><br><span class="line">                memoryStore.putIteratorAsBytes(blockId, iterator(), classTag, level.memoryMode) <span class="keyword">match</span> &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="type">Right</span>(s) =&gt;</span><br><span class="line">                    size = s</span><br><span class="line">                    <span class="keyword">case</span> <span class="type">Left</span>(partiallySerializedValues) =&gt;</span><br><span class="line">                    <span class="comment">// Not enough space to unroll this block; drop to disk if applicable</span></span><br><span class="line">                    <span class="keyword">if</span> (level.useDisk) &#123;</span><br><span class="line">                        <span class="comment">// 使用 disk</span></span><br><span class="line">                        logWarning(<span class="string">s&quot;Persisting block <span class="subst">$blockId</span> to disk instead.&quot;</span>)</span><br><span class="line">                        diskStore.put(blockId) &#123; channel =&gt;</span><br><span class="line">                            <span class="keyword">val</span> out = <span class="type">Channels</span>.newOutputStream(channel)</span><br><span class="line">                            partiallySerializedValues.finishWritingToStream(out)</span><br><span class="line">                        &#125;</span><br><span class="line">                        size = diskStore.getSize(blockId)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        iteratorFromFailedMemoryStorePut = <span class="type">Some</span>(partiallySerializedValues.valuesIterator)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (level.useDisk) &#123;</span><br><span class="line">            <span class="comment">// 使用 disk</span></span><br><span class="line">            diskStore.put(blockId) &#123; channel =&gt;</span><br><span class="line">                <span class="keyword">val</span> out = <span class="type">Channels</span>.newOutputStream(channel)</span><br><span class="line">                serializerManager.dataSerializeStream(blockId, out, iterator())(classTag)</span><br><span class="line">            &#125;</span><br><span class="line">            size = diskStore.getSize(blockId)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>memory 底层存储的本质是调用 <code>putIterator</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">putIterator</span></span>[<span class="type">T</span>](</span><br><span class="line">    blockId: <span class="type">BlockId</span>,</span><br><span class="line">    values: <span class="type">Iterator</span>[<span class="type">T</span>],</span><br><span class="line">    classTag: <span class="type">ClassTag</span>[<span class="type">T</span>],</span><br><span class="line">    memoryMode: <span class="type">MemoryMode</span>,</span><br><span class="line">    valuesHolder: <span class="type">ValuesHolder</span>[<span class="type">T</span>]): <span class="type">Either</span>[<span class="type">Long</span>, <span class="type">Long</span>] = &#123;</span><br><span class="line">    require(!contains(blockId), <span class="string">s&quot;Block <span class="subst">$blockId</span> is already present in the MemoryStore&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of elements unrolled so far ｜ 当前需要存储的 elem 数量</span></span><br><span class="line">    <span class="keyword">var</span> elementsUnrolled = <span class="number">0</span></span><br><span class="line">    <span class="comment">// Whether there is still enough memory for us to continue unrolling this block ｜ 是否需要继续 rolling</span></span><br><span class="line">    <span class="keyword">var</span> keepUnrolling = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// Initial per-task memory to request for unrolling blocks (bytes). ｜ 初始化申请 memo 的大小 default 1M</span></span><br><span class="line">    <span class="keyword">val</span> initialMemoryThreshold = unrollMemoryThreshold</span><br><span class="line">    <span class="comment">// How often to check whether we need to request more memory ｜ unrolling 多少个 elem 进行一次 memo 大小检查 default 16</span></span><br><span class="line">    <span class="keyword">val</span> memoryCheckPeriod = conf.get(<span class="type">UNROLL_MEMORY_CHECK_PERIOD</span>)</span><br><span class="line">    <span class="comment">// Memory currently reserved by this task for this particular unrolling operation ｜ 当前占用 memo 的大小</span></span><br><span class="line">    <span class="keyword">var</span> memoryThreshold = initialMemoryThreshold</span><br><span class="line">    <span class="comment">// Memory to request as a multiple of current vector size ｜ vector 扩容的 frac default 1.5</span></span><br><span class="line">    <span class="keyword">val</span> memoryGrowthFactor = conf.get(<span class="type">UNROLL_MEMORY_GROWTH_FACTOR</span>)</span><br><span class="line">    <span class="comment">// Keep track of unroll memory used by this particular block / putIterator() operation</span></span><br><span class="line">    <span class="keyword">var</span> unrollMemoryUsedByThisBlock = <span class="number">0</span>L</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Request enough memory to begin unrolling ｜ 申请初始化 memo</span></span><br><span class="line">    keepUnrolling =</span><br><span class="line">    reserveUnrollMemoryForThisTask(blockId, initialMemoryThreshold, memoryMode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!keepUnrolling) &#123;</span><br><span class="line">        logWarning(<span class="string">s&quot;Failed to reserve initial memory threshold of &quot;</span> +</span><br><span class="line">                   <span class="string">s&quot;<span class="subst">$&#123;Utils.bytesToString(initialMemoryThreshold)&#125;</span> for computing block <span class="subst">$blockId</span> in memory.&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        unrollMemoryUsedByThisBlock += initialMemoryThreshold</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unroll this block safely, checking whether we have exceeded our threshold periodically</span></span><br><span class="line">    <span class="keyword">while</span> (values.hasNext &amp;&amp; keepUnrolling) &#123;</span><br><span class="line">        <span class="comment">// 将当前元素加入 vector</span></span><br><span class="line">        valuesHolder.storeValue(values.next())</span><br><span class="line">        <span class="comment">// 如果到了一个 period，则进行一个 memo 容量检查</span></span><br><span class="line">        <span class="keyword">if</span> (elementsUnrolled % memoryCheckPeriod == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 估算当前 vector 的存储容量</span></span><br><span class="line">            <span class="keyword">val</span> currentSize = valuesHolder.estimatedSize()</span><br><span class="line">            <span class="comment">// If our vector&#x27;s size has exceeded the threshold, request more memory ｜ 超过容量需要 memo 扩容</span></span><br><span class="line">            <span class="keyword">if</span> (currentSize &gt;= memoryThreshold) &#123;</span><br><span class="line">                <span class="keyword">val</span> amountToRequest = (currentSize * memoryGrowthFactor - memoryThreshold).toLong</span><br><span class="line">                keepUnrolling =</span><br><span class="line">                reserveUnrollMemoryForThisTask(blockId, amountToRequest, memoryMode)</span><br><span class="line">                <span class="keyword">if</span> (keepUnrolling) &#123;</span><br><span class="line">                    unrollMemoryUsedByThisBlock += amountToRequest</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// New threshold is currentSize * memoryGrowthFactor</span></span><br><span class="line">                memoryThreshold += amountToRequest</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        elementsUnrolled += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure that we have enough memory to store the block. By this point, it is possible that</span></span><br><span class="line">    <span class="comment">// the block&#x27;s actual memory usage has exceeded the unroll memory by a small amount, so we</span></span><br><span class="line">    <span class="comment">// perform one final call to attempt to allocate additional memory if necessary.</span></span><br><span class="line">    <span class="keyword">if</span> (keepUnrolling) &#123;</span><br><span class="line">        <span class="keyword">val</span> entry = entryBuilder.build()</span><br><span class="line">        <span class="comment">// Synchronize so that transfer is atomic ｜ 进行一个 memo 的存储</span></span><br><span class="line">        entries.synchronized &#123;</span><br><span class="line">            entries.put(blockId, entry)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        logInfo(<span class="string">&quot;Block %s stored as values in memory (estimated size %s, free %s)&quot;</span>.format(blockId,</span><br><span class="line">                                                                                          <span class="type">Utils</span>.bytesToString(entry.size), 																						      <span class="type">Utils</span>.bytesToString(maxMemory - blocksMemoryUsed)))</span><br><span class="line">        <span class="type">Right</span>(entry.size)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We ran out of space while unrolling the values for this block</span></span><br><span class="line">        logUnrollFailureMessage(blockId, valuesHolder.estimatedSize())</span><br><span class="line">        <span class="type">Left</span>(unrollMemoryUsedByThisBlock)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="checkpoint"><a href="#checkpoint" class="headerlink" title="checkpoint"></a>checkpoint</h5><p>cache 和 persist 将数据持久化到 memory 或者 disk，而且保存了血缘关系。如果出现 node crash 的情况还是可以重新计算的。</p>
<p>chechpoint 是直接将数据持久化到 hdfs 中，因为 hdfs 的高可靠性，所以所以阶段之前的血缘关系。</p>
<blockquote>
<p>checkpoint saves the RDD to an HDFS file and actually forgets the lineage completely. This is allows long lineages to be truncated and the data to be saved reliably in HDFS</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 checkpoint 的保存路径</span></span><br><span class="line">sc.setCheckpointDir(<span class="string">&quot;ckp&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>分析 <code>spark-shubmit</code> 的执行流程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">SPARK_HOME/bin/spark-submit \</span></span><br><span class="line"><span class="language-bash">--class <span class="string">&quot;SimpleApp&quot;</span> \</span></span><br><span class="line"><span class="language-bash">--master <span class="built_in">local</span> \ <span class="comment"># 5.3 构建 app 对象 （STANDALONE_CLUSTER_SUBMIT_CLASS）</span></span></span><br><span class="line">./target/scala-2.13/simple-app_2.13-1.0.jar</span><br></pre></td></tr></table></figure>


<ol>
<li><p>调用 spark-submit 脚本会执行 <code>java org.apache.deploy.SparkSubmit</code> 对象。</p>
</li>
<li><p>创建 SparkSubmit 对象调用 doSubmit 方法</p>
</li>
<li><p>解析命令行参数，默认 <code>action</code> 为 <code>SUBMIT</code>, <code>action = Option(action).getOrElse(SUBMIT)</code></p>
</li>
<li><p>调用 submit 方法，&#x3D;&gt; 调用 runMain 方法。</p>
</li>
<li><p>runMain 方法</p>
</li>
<li><p>解析命令行参数 &#x3D;&gt; master &#x3D;&#x3D; ‘local’ &#x3D;&gt; LOCAL</p>
</li>
<li><p>获取 childMainClass</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[deploy] <span class="keyword">val</span> <span class="type">YARN_CLUSTER_SUBMIT_CLASS</span> =</span><br><span class="line"><span class="string">&quot;org.apache.spark.deploy.yarn.YarnClusterApplication&quot;</span></span><br><span class="line"><span class="keyword">private</span>[deploy] <span class="keyword">val</span> <span class="type">REST_CLUSTER_SUBMIT_CLASS</span> = classOf[<span class="type">RestSubmissionClientApp</span>].getName()</span><br><span class="line"><span class="keyword">private</span>[deploy] <span class="keyword">val</span> <span class="type">STANDALONE_CLUSTER_SUBMIT_CLASS</span> = classOf[<span class="type">ClientApp</span>].getName()</span><br><span class="line"><span class="keyword">private</span>[deploy] <span class="keyword">val</span> <span class="type">KUBERNETES_CLUSTER_SUBMIT_CLASS</span> =</span><br><span class="line"><span class="string">&quot;org.apache.spark.deploy.k8s.submit.KubernetesClientApplication&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过 mainClass 反射创建 app，（反射：通过 classname 动态加载和构造对象），并调用 start 方法，开始运行用户的代码</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">mainClass = <span class="type">Utils</span>.classForName(childMainClass)</span><br><span class="line"><span class="keyword">val</span> app: <span class="type">SparkApplication</span> = <span class="keyword">if</span> (classOf[<span class="type">SparkApplication</span>].isAssignableFrom(mainClass)) &#123;</span><br><span class="line">    mainClass.getConstructor().newInstance().asInstanceOf[<span class="type">SparkApplication</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">JavaMainApplication</span>(mainClass)</span><br><span class="line">&#125;</span><br><span class="line">app.start(childArgs.toArray, sparkConf)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Driver 首先创建 sparkContext 对象的创建</p>
</li>
<li><p>当 sparkContext 初始化之后，会等待 system 资源创建完成，调用 Hook 函数等待。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Post init</span></span><br><span class="line">_taskScheduler.postStartHook()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoked after system has successfully initialized (typically in spark context).</span></span><br><span class="line"><span class="comment">// Yarn uses this to bootstrap allocation of resources based on preferred locations,</span></span><br><span class="line"><span class="comment">// wait for executor registrations, etc.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postStartHook</span></span>(): <span class="type">Unit</span> = &#123; &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建完成之后，继续执行用户的代码，读写文件或者操作 rdd。</p>
</li>
</ol>
<p><img src="https://img-blog.csdn.net/20180813202155856?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1bWluZ3podTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="spark-process"></p>
<p><a class="link" href="https://blog.csdn.net/yumingzhu1/article/details/81636408?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-81636408-blog-81703467.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-81636408-blog-81703467.pc_relevant_recovery_v2&utm_relevant_index=3">standalone process<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="sparkcontext"><a href="#sparkcontext" class="headerlink" title="sparkcontext"></a>sparkcontext</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在Spark框架中，应用程序的提交离不开<code>Spark Driver</code>，而<code>Spark Driver</code>的初始化始终围绕<code>SparkContext</code>的初始化，可以说<code>SparkContext</code>是<code>Spark</code>程序的发动机引擎，有了它程序才能跑起来，在<code>spark-core</code>中，<code>SparkContext</code>重中之重，它提供了很多能力，比如生成<code>RDD</code>，比如生成广播变量等，所以学习<code>SparkContext</code>的组件和启动流程有助于剖析整个<code>Spark</code>内核的架构。</p>
<h4 id="SparkContext组件概览"><a href="#SparkContext组件概览" class="headerlink" title="SparkContext组件概览"></a>SparkContext组件概览</h4><p>在SparkContext中包含了整个框架中很重要的几部分：</p>
<ul>
<li>SparkEnv：Spark的运行环境，Executor会依赖它去执行分配的task，不光Executor中有，同时为了保证本地模式任务也能跑起来，Driver中也有</li>
<li>SparkUI：Spark作业的监控页面，底层并没有采用前端技术，纯后端实现，用以对当前SparkJob的监控和调优，可以从页面观察到目前的Executor的jvm信息，每个job的stage划分和task划分，同时还可以观察到每个task处理的数据，用以发现数据是否倾斜</li>
<li>DAGScheduler：DAG调度器，是SparkJob调度系统的重要组件之一，负责创建job，根据RDD依赖情况划分stage，提交stage，将作业划分成一个有向无环图</li>
<li>TaskScheduler：任务调度器，是SparkJob调度系统的重要组件之一，负责按照调度算法将DAGScheduler创建的task分发至Executor，DAGScheduler是它的前置调度</li>
<li>SparkStatusTracker：提供对作业、Stage的监控</li>
<li>ConsoleProcessBar：利用SparkStatusTracker提供监控信息，将任务进度以日志的形式打印到终端中</li>
<li>HearbeatReceiver：心跳接收器，所有Executor都会定期向它发送心跳信息，用以统计存活的Executor，此信息会一直同步给TaskScheduler，用以保证TaskScheduler去分发task的时候会挑选合适的Executor</li>
<li>ContextCleaner：上下文清理器，用异步的方式去清理那些超出应用作用域范围的RDD、ShuffleDependency和Broadcast</li>
<li>LiveListenerBus：SparkContext中的事件总线，可以接收各个组件的事件，并且通过异步的方式对事件进行匹配并调用不同的回调方法</li>
<li>ShutdownHookManager：关闭时的钩子管理器，用以做一些清理工作，比如资源释放等</li>
<li>AppStatusStore：存储Application状态数据，在2.3.0之后的版本引入</li>
<li>EventLoggingListener（可选）：将事件持久化到存储的监听器，通过<code>spark.eventLog.enabled</code> 进行控制</li>
<li>ExecutorAllocationManager（可选）：Executor动态分配管理器，根据工作负载状态动态调整Executor的数量，通过属性<code>spark.dynamicAllocation.enabled</code> 和<code>spark.dynamicAllocation.testing</code> 进行控制</li>
</ul>
<h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p><img src="https://oss-emcsprod-public.modb.pro/wechatSpider/modb_20220704_70bbb896-fb8b-11ec-a026-fa163eb4f6be.png" alt="process"></p>
<h4 id="Action-触发-Job-submit-到-DAGScheduler-eventProcessLoop"><a href="#Action-触发-Job-submit-到-DAGScheduler-eventProcessLoop" class="headerlink" title="Action 触发 Job submit 到 DAGScheduler eventProcessLoop"></a>Action 触发 Job submit 到 DAGScheduler eventProcessLoop</h4><ol>
<li><p>使用 RDD 的 collect 方法可以出发 action，导致作业提交。</p>
<p>runJob with param <code>rdd</code> <code>func</code> <code>partitions</code></p>
</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect</span></span>(): <span class="type">Array</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">    <span class="keyword">val</span> results = sc.runJob(<span class="keyword">this</span>, (iter: <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; iter.toArray)</span><br><span class="line">    <span class="type">Array</span>.concat(results: _*)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>通过 <code>dagScheduler</code> 进行作业提交</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">dagScheduler.runJob(rdd, cleanedFunc, partitions, callSite, resultHandler, localProperties.get)</span><br></pre></td></tr></table></figure>

<p>然后通过 <code>submitJob</code> 将作业提交。并等待作业返回。</p>
</li>
<li><p><code>submitJob</code> 将 Job 加入到 dagScheduler 的事件循环中，等待 Job 被调度。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="keyword">val</span> eventProcessLoop = <span class="keyword">new</span> <span class="type">DAGSchedulerEventProcessLoop</span>(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">eventProcessLoop.post(<span class="type">JobSubmitted</span>(</span><br><span class="line">      jobId, rdd, func2, partitions.toArray, callSite, waiter,</span><br><span class="line">      <span class="type">Utils</span>.cloneProperties(properties)))</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="DAGScheduler-对-Job-进行-Stage-划分，并且提交-Task-到-TaskScheduler"><a href="#DAGScheduler-对-Job-进行-Stage-划分，并且提交-Task-到-TaskScheduler" class="headerlink" title="DAGScheduler 对 Job 进行 Stage 划分，并且提交 Task 到 TaskScheduler"></a>DAGScheduler 对 Job 进行 Stage 划分，并且提交 Task 到 TaskScheduler</h4><ol>
<li><p>dagScheduler eventProcessLoop 通过 onReceive 方法处理事件。然后调用 <code>dagScheduler.handleJobSubmitted</code> 来处理之前 Job 的提交。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The main event loop of the DAG scheduler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onReceive</span></span>(event: <span class="type">DAGSchedulerEvent</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> timerContext = timer.time()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        doOnReceive(event)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        timerContext.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">doOnReceive</span></span>(event: <span class="type">DAGSchedulerEvent</span>): <span class="type">Unit</span> = event <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">JobSubmitted</span>(jobId, rdd, func, partitions, callSite, listener, properties) =&gt;</span><br><span class="line">    dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="type">MapStageSubmitted</span>(jobId, dependency, callSite, listener, properties) =&gt;</span><br><span class="line">    dagScheduler.handleMapStageSubmitted(jobId, dependency, callSite, listener, properties)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在 <code>handleJobSubmitted</code> 中，会进行 stage 的划分，并且将所有的 stage 包括 parent stage and ancient stage 全部提交，通过 DFS 的方式</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 调用创建 ResultStage 的方法</span></span><br><span class="line">finalStage = createResultStage(finalRDD, func, partitions, jobId, callSite)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1 首先会获取 trigger action rdd 的所有 shuffleDeps，然后使用 shuffleDeps 创建当前 rdd 的所有 parent（不包括 parent 的 parent），最后创建 resultStage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 shuffleDeps 的方法就是 BFS</span></span><br><span class="line"><span class="keyword">val</span> (shuffleDeps, resourceProfiles) = getShuffleDependenciesAndResourceProfiles(rdd)</span><br><span class="line"><span class="keyword">val</span> parents = getOrCreateParentStages(shuffleDeps, jobId)</span><br><span class="line"><span class="keyword">val</span> stage = <span class="keyword">new</span> <span class="type">ResultStage</span>(id, rdd, func, partitions, parents, jobId,</span><br><span class="line">                            callSite, resourceProfile.id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提交 stage，这里的 finalStage 就是 resultStage</span></span><br><span class="line">submitStage(finalStage)</span><br></pre></td></tr></table></figure>



<p><code>getShuffleDependenciesAndResourceProfiles</code> 方法（BFS）：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[scheduler] <span class="function"><span class="keyword">def</span> <span class="title">getShuffleDependenciesAndResourceProfiles</span></span>(</span><br><span class="line">    rdd: <span class="type">RDD</span>[_]): (<span class="type">HashSet</span>[<span class="type">ShuffleDependency</span>[_, _, _]], <span class="type">HashSet</span>[<span class="type">ResourceProfile</span>]) = &#123;</span><br><span class="line">    <span class="comment">// rdd 全部 parent 列表</span></span><br><span class="line">    <span class="keyword">val</span> parents = <span class="keyword">new</span> <span class="type">HashSet</span>[<span class="type">ShuffleDependency</span>[_, _, _]]</span><br><span class="line">	<span class="comment">// 记忆化</span></span><br><span class="line">    <span class="keyword">val</span> visited = <span class="keyword">new</span> <span class="type">HashSet</span>[<span class="type">RDD</span>[_]]</span><br><span class="line">    <span class="comment">// queue</span></span><br><span class="line">    <span class="keyword">val</span> waitingForVisit = <span class="keyword">new</span> <span class="type">ListBuffer</span>[<span class="type">RDD</span>[_]]</span><br><span class="line">    waitingForVisit += rdd</span><br><span class="line">    <span class="keyword">while</span> (waitingForVisit.nonEmpty) &#123;</span><br><span class="line">        <span class="keyword">val</span> toVisit = waitingForVisit.remove(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> (!visited(toVisit)) &#123;</span><br><span class="line">            visited += toVisit</span><br><span class="line">            <span class="type">Option</span>(toVisit.getResourceProfile).foreach(resourceProfiles += _)</span><br><span class="line">            toVisit.dependencies.foreach &#123;</span><br><span class="line">                <span class="comment">// 如果是 shuffleDeps 将它加入 parent 中，stage 会从这个地方断开</span></span><br><span class="line">                <span class="keyword">case</span> shuffleDep: <span class="type">ShuffleDependency</span>[_, _, _] =&gt;</span><br><span class="line">                parents += shuffleDep</span><br><span class="line">                <span class="comment">// 如果是 narrowDeps，则将它加入 queue 进行 BFS</span></span><br><span class="line">                <span class="keyword">case</span> dependency =&gt;</span><br><span class="line">                waitingForVisit.prepend(dependency.rdd)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (parents, resourceProfiles)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Submits stage, but first recursively submits any missing parents. */</span></span><br><span class="line"><span class="comment">// 提交 resultStage 和 shuffleMapStage recursively 通过 submitStage</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">submitStage</span></span>(stage: <span class="type">Stage</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> jobId = activeJobForStage(stage)</span><br><span class="line">    <span class="keyword">if</span> (jobId.isDefined) &#123;</span><br><span class="line">        logDebug(<span class="string">s&quot;submitStage(<span class="subst">$stage</span> (name=<span class="subst">$&#123;stage.name&#125;</span>;&quot;</span> +</span><br><span class="line">                 <span class="string">s&quot;jobs=<span class="subst">$&#123;stage.jobIds.toSeq.sorted.mkString(&quot;,&quot;)&#125;</span>))&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> (!waitingStages(stage) &amp;&amp; !runningStages(stage) &amp;&amp; !failedStages(stage)) &#123;</span><br><span class="line">            <span class="keyword">val</span> missing = getMissingParentStages(stage).sortBy(_.id)</span><br><span class="line">            logDebug(<span class="string">&quot;missing: &quot;</span> + missing)</span><br><span class="line">            <span class="keyword">if</span> (missing.isEmpty) &#123;</span><br><span class="line">                logInfo(<span class="string">&quot;Submitting &quot;</span> + stage + <span class="string">&quot; (&quot;</span> + stage.rdd + <span class="string">&quot;), which has no missing parents&quot;</span>)</span><br><span class="line">                <span class="comment">// 如果没有 missing 的 parent stage 就会提交当前阶段</span></span><br><span class="line">                submitMissingTasks(stage, jobId.get)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (parent &lt;- missing) &#123;</span><br><span class="line">                    <span class="comment">// 不然先提交 parent stage</span></span><br><span class="line">                    submitStage(parent)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后将当前 stage 加入到 waitingStage 中</span></span><br><span class="line">                waitingStages += stage</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        abortStage(stage, <span class="string">&quot;No active job for stage &quot;</span> + stage.id, <span class="type">None</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// submitMissingTasks 中会根据当前 stage 类型，然后通过 partition，rdd 创建对应的 Tasks。rdd 中有多少个分区就会创建多少个 Tasks</span></span><br><span class="line"><span class="keyword">val</span> tasks: <span class="type">Seq</span>[<span class="type">Task</span>[_]] = <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> serializedTaskMetrics = closureSerializer.serialize(stage.latestInfo.taskMetrics).array()</span><br><span class="line">    stage <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> stage: <span class="type">ShuffleMapStage</span> =&gt;</span><br><span class="line">        stage.pendingPartitions.clear()</span><br><span class="line">        partitionsToCompute.map &#123; id =&gt;</span><br><span class="line">            <span class="keyword">val</span> locs = taskIdToLocations(id)</span><br><span class="line">            <span class="keyword">val</span> part = partitions(id)</span><br><span class="line">            stage.pendingPartitions += id</span><br><span class="line">            <span class="keyword">new</span> <span class="type">ShuffleMapTask</span>(stage.id, stage.latestInfo.attemptNumber,</span><br><span class="line">                               taskBinary, part, locs, properties, serializedTaskMetrics, <span class="type">Option</span>(jobId),</span><br><span class="line">                               <span class="type">Option</span>(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> stage: <span class="type">ResultStage</span> =&gt;</span><br><span class="line">        partitionsToCompute.map &#123; id =&gt;</span><br><span class="line">            <span class="keyword">val</span> p: <span class="type">Int</span> = stage.partitions(id)</span><br><span class="line">            <span class="keyword">val</span> part = partitions(p)</span><br><span class="line">            <span class="keyword">val</span> locs = taskIdToLocations(id)</span><br><span class="line">            <span class="keyword">new</span> <span class="type">ResultTask</span>(stage.id, stage.latestInfo.attemptNumber,</span><br><span class="line">                           taskBinary, part, locs, id, properties, serializedTaskMetrics,</span><br><span class="line">                           <span class="type">Option</span>(jobId), <span class="type">Option</span>(sc.applicationId), sc.applicationAttemptId,</span><br><span class="line">                           stage.rdd.isBarrier())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">NonFatal</span>(e) =&gt;</span><br><span class="line">    abortStage(stage, <span class="string">s&quot;Task creation failed: <span class="subst">$e</span>\n<span class="subst">$&#123;Utils.exceptionString(e)&#125;</span>&quot;</span>, <span class="type">Some</span>(e))</span><br><span class="line">    runningStages -= stage</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后在 taskScheduler 中提交 TaskSet</span></span><br><span class="line">taskScheduler.submitTasks(<span class="keyword">new</span> <span class="type">TaskSet</span>(</span><br><span class="line">    tasks.toArray, stage.id, stage.latestInfo.attemptNumber, jobId, properties,</span><br><span class="line">    stage.resourceProfileId))</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="TaskScheduler-将-TaskSet-通过-backend-的调度分发到不同的-executor-上面"><a href="#TaskScheduler-将-TaskSet-通过-backend-的调度分发到不同的-executor-上面" class="headerlink" title="TaskScheduler 将 TaskSet 通过 backend 的调度分发到不同的 executor 上面"></a>TaskScheduler 将 TaskSet 通过 backend 的调度分发到不同的 executor 上面</h4><p><code>TaskScheduler</code> 将 TaskSet 进一步包装成 TaskSetManager。然后提交到 <code>schedulableBuilder</code> 中。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 通过 TaskSet 创建 TaskSetManager 对象</span></span><br><span class="line"><span class="keyword">val</span> manager = createTaskSetManager(taskSet, maxTaskFailures)</span><br><span class="line"><span class="comment">// 2. 将 TaskSetManager 提交到任务调度器 SchedulerBuilder</span></span><br><span class="line">schedulableBuilder.addTaskSetManager(manager, manager.taskSet.properties)</span><br><span class="line"><span class="comment">// 3. 调用 scheduler backend 处理 Task</span></span><br><span class="line">backend.reviveOffers()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.1 LocalSchedulerBackend 会向 localEndPoint 发送一个 ReviveOffers 信号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> localEndpoint: <span class="type">RpcEndpointRef</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reviveOffers</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    localEndpoint.send(<span class="type">ReviveOffers</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 localEndPoint 收到消息后会通过 recevie 来判断消息，并且调用对应的函数</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Unit</span>] = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ReviveOffers</span> =&gt;</span><br><span class="line">    reviveOffers()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="type">KillTask</span>(taskId, interruptThread, reason) =&gt;</span><br><span class="line">    executor.killTask(taskId, interruptThread, reason)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reviveOffers</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// local mode doesn&#x27;t support extra resources like GPUs right now</span></span><br><span class="line">    <span class="keyword">val</span> offers = <span class="type">IndexedSeq</span>(<span class="keyword">new</span> <span class="type">WorkerOffer</span>(localExecutorId, localExecutorHostname, freeCores,</span><br><span class="line">                                            <span class="type">Some</span>(rpcEnv.address.hostPort)))</span><br><span class="line">    <span class="comment">// 首先通过 scheduler 进行一个 Task 的调度。将任务放到最合适的位置</span></span><br><span class="line">    <span class="keyword">for</span> (task &lt;- scheduler.resourceOffers(offers, <span class="literal">true</span>).flatten) &#123;</span><br><span class="line">        freeCores -= scheduler.<span class="type">CPUS_PER_TASK</span></span><br><span class="line">        <span class="comment">// 然后向 executor 发送一个 launchTask 的消息</span></span><br><span class="line">        executor.launchTask(executorBackend, task)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2.1 scheduler 任务调度，通过 scheduler 的调度算法进行控制</span></span><br><span class="line"><span class="keyword">val</span> sortedTaskSets = rootPool.getSortedTaskSetQueue</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sortedSchedulableQueue = schedulableQueue.asScala.toSeq.sortWith(taskSetSchedulingAlgorithm.comparator)</span><br><span class="line"></span><br><span class="line"><span class="comment">// taskSetSchedulingAlgorithm 可以是 FIFO 或者 Fair</span></span><br></pre></td></tr></table></figure>

<p><code>SchedulerBuilder</code> 是 Spark 的任务调度器，提供两种调度方式：</p>
<ul>
<li>FIFOSchedulableBuilder</li>
<li>FairSchedulableBuilder</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">trait</span> <span class="title">SchedulableBuilder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rootPool</span></span>: <span class="type">Pool</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">buildPools</span></span>(): <span class="type">Unit</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">addTaskSetManager</span></span>(manager: <span class="type">Schedulable</span>, properties: <span class="type">Properties</span>): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">class</span> <span class="title">FIFOSchedulableBuilder</span>(<span class="params">val rootPool: <span class="type">Pool</span></span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">SchedulableBuilder</span> <span class="keyword">with</span> <span class="type">Logging</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>[spark] <span class="class"><span class="keyword">class</span> <span class="title">FairSchedulableBuilder</span>(<span class="params">val rootPool: <span class="type">Pool</span>, sc: <span class="type">SparkContext</span></span>)</span></span><br><span class="line">  <span class="keyword">extends</span> <span class="type">SchedulableBuilder</span> <span class="keyword">with</span> <span class="type">Logging</span></span><br></pre></td></tr></table></figure>



<p>之后 exector 使用一个 Thread 执行对应的 Task</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">launchTask</span></span>(context: <span class="type">ExecutorBackend</span>, taskDescription: <span class="type">TaskDescription</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> taskId = taskDescription.taskId</span><br><span class="line">    <span class="keyword">val</span> tr = createTaskRunner(context, taskDescription)</span><br><span class="line">    runningTasks.put(taskId, tr)</span><br><span class="line">    <span class="keyword">val</span> killMark = killMarks.get(taskId)</span><br><span class="line">    <span class="keyword">if</span> (killMark != <span class="literal">null</span>) &#123;</span><br><span class="line">        tr.kill(killMark._1, killMark._2)</span><br><span class="line">        killMarks.remove(taskId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从线程池中取出一个线程执行 Task</span></span><br><span class="line">    threadPool.execute(tr)</span><br><span class="line">    <span class="keyword">if</span> (decommissioned) &#123;</span><br><span class="line">        log.error(<span class="string">s&quot;Launching a task while in decommissioned state.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="shuffle-1"><a href="#shuffle-1" class="headerlink" title="shuffle"></a>shuffle</h3><p>shuffle 一定会落盘</p>
<ul>
<li>减少落盘数据量</li>
</ul>
<p><a class="link" href="https://www.jianshu.com/p/542b243d24e9">shuffle 原理和演进<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://blog.csdn.net/Winner941112/article/details/82900353">预聚合<i class="fas fa-external-link-alt"></i></a>：</p>
<p>map-side预聚合之后，每个节点本地就<strong>只会有一条相同的key</strong>，因为多条相同的key都被聚合起来了。其它节点在拉取所有节点上的相同key时，就会大大减少需要拉取的数据数量，从而也就减少了磁盘IO以及网络传输开销。</p>
<ul>
<li>reduceByKey和aggregateByKey算子都会使用用户自定义的函数对每个节点本地的相同key进行预聚合。</li>
<li>groupByKey算子是不会进行预聚合的，全量的数据会在集群的各个节点之间分发和传输，性能相对来说比较差。</li>
</ul>
<h4 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h4><ol>
<li><p>DAGScheduler 中生成 task 的时候，会根据 stage 来生成不同的 task</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">stage <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> stage: <span class="type">ShuffleMapStage</span> =&gt;</span><br><span class="line">    stage.pendingPartitions.clear()</span><br><span class="line">    partitionsToCompute.map &#123; id =&gt;</span><br><span class="line">        <span class="comment">// ShuffleMapStage =&gt; ShuffleMapTask</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">ShuffleMapTask</span>(stage.id, stage.latestInfo.attemptNumber,</span><br><span class="line">                           taskBinary, part, locs, properties, serializedTaskMetrics, <span class="type">Option</span>(jobId),</span><br><span class="line">                           <span class="type">Option</span>(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> stage: <span class="type">ResultStage</span> =&gt;</span><br><span class="line">    partitionsToCompute.map &#123; id =&gt;</span><br><span class="line">        <span class="comment">// ResultStage =&gt; ResultTask</span></span><br><span class="line">        <span class="keyword">new</span> <span class="type">ResultTask</span>(stage.id, stage.latestInfo.attemptNumber,</span><br><span class="line">                       taskBinary, part, locs, id, properties, serializedTaskMetrics,</span><br><span class="line">                       <span class="type">Option</span>(jobId), <span class="type">Option</span>(sc.applicationId), sc.applicationAttemptId,</span><br><span class="line">                       stage.rdd.isBarrier())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>「map」ShuffleTask 在 runTask 的末尾会进行数据的落盘操作，不同的 shuffleWriterProcessor 会产生不同的文件。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">dep.shuffleWriterProcessor.write(rdd, dep, mapId, context, partition)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后通过 shuffleHandle 通知写文件</span></span><br><span class="line">writer = manager.getWriter[<span class="type">Any</span>, <span class="type">Any</span>](</span><br><span class="line">    dep.shuffleHandle,</span><br><span class="line">    mapId,</span><br><span class="line">    context,</span><br><span class="line">    createMetricsReporter(context))</span><br><span class="line">writer.write(</span><br><span class="line">    rdd.iterator(partition, context).asInstanceOf[<span class="type">Iterator</span>[_ &lt;: <span class="type">Product2</span>[<span class="type">Any</span>, <span class="type">Any</span>]]])</span><br></pre></td></tr></table></figure>
</li>
<li><p>「reduce」ResultTask 在 runTask 中读取 map 产生的文件</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// resultMapStage 的 runTask 方法</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">runTask</span></span>(context: <span class="type">TaskContext</span>): <span class="type">U</span> = &#123;</span><br><span class="line">    <span class="comment">// Deserialize the RDD and the func using the broadcast variables.</span></span><br><span class="line">    <span class="keyword">val</span> threadMXBean = <span class="type">ManagementFactory</span>.getThreadMXBean</span><br><span class="line">    <span class="keyword">val</span> deserializeStartTimeNs = <span class="type">System</span>.nanoTime()</span><br><span class="line">    <span class="keyword">val</span> deserializeStartCpuTime = <span class="keyword">if</span> (threadMXBean.isCurrentThreadCpuTimeSupported) &#123;</span><br><span class="line">        threadMXBean.getCurrentThreadCpuTime</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="number">0</span>L</span><br><span class="line">    <span class="keyword">val</span> ser = <span class="type">SparkEnv</span>.get.closureSerializer.newInstance()</span><br><span class="line">    <span class="keyword">val</span> (rdd, func) = ser.deserialize[(<span class="type">RDD</span>[<span class="type">T</span>], (<span class="type">TaskContext</span>, <span class="type">Iterator</span>[<span class="type">T</span>]) =&gt; <span class="type">U</span>)](</span><br><span class="line">        <span class="type">ByteBuffer</span>.wrap(taskBinary.value), <span class="type">Thread</span>.currentThread.getContextClassLoader)</span><br><span class="line">    _executorDeserializeTimeNs = <span class="type">System</span>.nanoTime() - deserializeStartTimeNs</span><br><span class="line">    _executorDeserializeCpuTime = <span class="keyword">if</span> (threadMXBean.isCurrentThreadCpuTimeSupported) &#123;</span><br><span class="line">        threadMXBean.getCurrentThreadCpuTime - deserializeStartCpuTime</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="number">0</span>L</span><br><span class="line"></span><br><span class="line">    func(context, rdd.iterator(partition, context))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// shuffleRDD iterator 的 comput 方法就会读取 map 产生的文件</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compute</span></span>(split: <span class="type">Partition</span>, context: <span class="type">TaskContext</span>): <span class="type">Iterator</span>[(<span class="type">K</span>, <span class="type">C</span>)] = &#123;</span><br><span class="line">    <span class="keyword">val</span> dep = dependencies.head.asInstanceOf[<span class="type">ShuffleDependency</span>[<span class="type">K</span>, <span class="type">V</span>, <span class="type">C</span>]]</span><br><span class="line">    <span class="keyword">val</span> metrics = context.taskMetrics().createTempShuffleReadMetrics()</span><br><span class="line">    <span class="type">SparkEnv</span>.get.shuffleManager.getReader(</span><br><span class="line">        dep.shuffleHandle, split.index, split.index + <span class="number">1</span>, context, metrics)</span><br><span class="line">    .read()</span><br><span class="line">    .asInstanceOf[<span class="type">Iterator</span>[(<span class="type">K</span>, <span class="type">C</span>)]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>scala</title>
    <url>/2022/11/07/scala/</url>
    <content><![CDATA[<p><a class="link" href="https://docs.scala-lang.org/overviews/scala-book/prelude-taste-of-scala.html">scala tutorial<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://dblab.xmu.edu.cn/blog/924/">scala &amp; spark<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="简介-amp-安装-amp-helloworld"><a href="#简介-amp-安装-amp-helloworld" class="headerlink" title="简介 &amp; 安装 &amp; helloworld"></a>简介 &amp; 安装 &amp; helloworld</h2><ul>
<li><p>Scala 是一门多范式的编程语言，设计初衷是要<strong>集成面向对象编程和函数式编程</strong>的各种特性。</p>
</li>
<li><p>静态类型</p>
</li>
<li><p>Scala <strong>运行在 Java 虚拟机上</strong>，并兼容现有的 Java 程序。</p>
</li>
<li><p>Scala <strong>源代码被编译成 Java 字节码</strong>，所以它可以运行于 JVM 之上，并可以调用现有的 Java 类库。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install coursier/formulas/coursier &amp;&amp; cs setup</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Commands</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>scalac</code></td>
<td>the Scala compiler</td>
</tr>
<tr>
<td><code>scala</code></td>
<td>the Scala REPL and script runner</td>
</tr>
<tr>
<td><code>scala-cli</code></td>
<td><a class="link" href="https://scala-cli.virtuslab.org/">Scala CLI<i class="fas fa-external-link-alt"></i></a>, interactive toolkit for Scala</td>
</tr>
<tr>
<td><code>sbt</code>, <code>sbtn</code></td>
<td>The <a class="link" href="https://www.scala-sbt.org/">sbt<i class="fas fa-external-link-alt"></i></a> build tool</td>
</tr>
<tr>
<td><code>amm</code></td>
<td><a class="link" href="https://ammonite.io/">Ammonite<i class="fas fa-external-link-alt"></i></a> is an enhanced REPL</td>
</tr>
<tr>
<td><code>scalafmt</code></td>
<td><a class="link" href="https://scalameta.org/scalafmt/">Scalafmt<i class="fas fa-external-link-alt"></i></a> is the Scala code formatter</td>
</tr>
</tbody></table>
<blockquote>
<p>Hello world</p>
</blockquote>
<ol>
<li><code>cd</code> to an empty folder.</li>
<li>Run the command <code>sbt new scala/scala3.g8</code> to create a Scala 3 project, or <code>sbt new scala/hello-world.g8</code> to create a Scala 2 project. </li>
<li>input project name</li>
<li>Run <code>sbt</code>. This opens up the sbt console.</li>
<li>Type <code>~run</code>.</li>
</ol>
<p><a class="link" href="https://scalameta.org/scalafmt/docs/installation.html">scalafmt 配置<i class="fas fa-external-link-alt"></i></a> 一点都不智能还需要配置，不如 gofmt</p>
<p><a class="link" href="https://stackoverflow.com/questions/29963617/how-to-call-vs-code-editor-from-terminal-command-line/33831403#33831403">vscode 配置 code<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><code>val</code> 可变的</li>
<li><code>var</code> 不可变</li>
</ul>
<p>在 Scala 中，<strong>通常创建变量而不声明它们的类型</strong>。Scala 通常可以推断数据类型。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>也可以显示声明：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x: <span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><a class="link" href="https://www.jianshu.com/p/ac13005e324d">sealed trait<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>在使用模式匹配的时候，使用 sealed 修饰某个 class 的目的是让 Scala 知道所有 case 的情况，否则会编译报错。</li>
</ul>
<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><blockquote>
<p>if&#x2F;else</p>
</blockquote>
<p>if&#x2F;else 类似 c，但是存在返回值。所以可以直接当成三目运算符。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="keyword">if</span> (a &lt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure>



<blockquote>
<p>match</p>
</blockquote>
<p>强大的匹配表达式是 Scala 的一大特点，scala 的 match 非常强大。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = i <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;one&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">&quot;two&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;not 1 or 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该<code>match</code>表达式不仅限于整数，它可以与任何数据类型一起使用，包括布尔值：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> booleanAsString = bool <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span> =&gt; <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span> =&gt; <span class="string">&quot;false&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>match</code>这是一个用作方法主体的示例，并与许多不同的类型进行匹配：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getClassAsString</span></span>(x: <span class="type">Any</span>):<span class="type">String</span> = x <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> s: <span class="type">String</span> =&gt; s + <span class="string">&quot; is a String&quot;</span></span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; <span class="string">&quot;Int&quot;</span></span><br><span class="line">    <span class="keyword">case</span> f: <span class="type">Float</span> =&gt; <span class="string">&quot;Float&quot;</span></span><br><span class="line">    <span class="keyword">case</span> l: <span class="type">List</span>[_] =&gt; <span class="string">&quot;List&quot;</span></span><br><span class="line">    <span class="keyword">case</span> p: <span class="type">Person</span> =&gt; <span class="string">&quot;Person&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>try&#x2F;catch</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    writeToFile(text)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> fnfe: <span class="type">FileNotFoundException</span> =&gt; println(fnfe)</span><br><span class="line">    <span class="keyword">case</span> ioe: <span class="type">IOException</span> =&gt; println(ioe)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>for</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (arg &lt;- args) println(arg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;x to y&quot; syntax</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- <span class="number">0</span> to <span class="number">5</span>) println(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;x to y by&quot; syntax</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- <span class="number">0</span> to <span class="number">10</span> by <span class="number">2</span>) println(i)</span><br></pre></td></tr></table></figure>

<p>您还可以将<code>yield</code>关键字添加到 for 循环以创建产生结果<em>的 for 表达式</em>。这是一个将序列 1 到 5 中的每个值加倍的 for 表达式：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> x = <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">5</span>) <span class="keyword">yield</span> i * <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>另一种 <code>for</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> fruits = <span class="type">List</span>(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;lime&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> fruitLengths = <span class="keyword">for</span> &#123;</span><br><span class="line">    f &lt;- fruits</span><br><span class="line">    <span class="keyword">if</span> f.length &gt; <span class="number">4</span></span><br><span class="line">&#125; <span class="keyword">yield</span> f.length</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &#123;&#125; 可以在里面添加 if 语句</span></span><br></pre></td></tr></table></figure>

<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>Scala 也有<code>while</code>和<code>do</code>&#x2F;<code>while</code>循环。这是它们的一般语法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// while loop</span></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">    statement(a)</span><br><span class="line">    statement(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">   statement(a)</span><br><span class="line">   statement(b)</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure>



<h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>通过 val 和 var 来控制成员变量的可变性。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">val age: <span class="type">Int</span>, var name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(age, name)</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>getter 和 setter 方法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> privateValue = <span class="number">0</span>  <span class="comment">//变成私有字段，并且修改字段名称</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value</span> </span>= privateValue <span class="comment">//定义一个方法，方法的名称就是原来我们想要的字段的名称</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value_=</span></span>(newValue: <span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">0</span>) privateValue = newValue <span class="comment">//只有提供的新值是正数，才允许修改</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>constructor function</p>
</blockquote>
<p>scala 的构造函数非常牛逼，Scala的主构造器是整个类体</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">var firstName: <span class="type">String</span>, var lastName: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;the constructor begins&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x27;public&#x27; access by default</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// some class fields</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> <span class="type">HOME</span> = <span class="type">System</span>.getProperty(<span class="string">&quot;user.home&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// some methods</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>(): <span class="type">String</span> = <span class="string">s&quot;<span class="subst">$firstName</span> <span class="subst">$lastName</span> is <span class="subst">$age</span> years old&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printHome</span></span>(): <span class="type">Unit</span> = println(<span class="string">s&quot;HOME = <span class="subst">$HOME</span>&quot;</span>)    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printFullName</span></span>(): <span class="type">Unit</span> = println(<span class="keyword">this</span>) </span><br><span class="line"></span><br><span class="line">    printHome()</span><br><span class="line">    printFullName()</span><br><span class="line">    println(<span class="string">&quot;you&#x27;ve reached the end of the constructor&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>auxiliary class constructors 辅助构造函数</p>
</blockquote>
<ul>
<li>使用 <code>this</code> 命名</li>
<li>其它类似函数重载</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">DefaultCrustSize</span> = <span class="number">12</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">DefaultCrustType</span> = <span class="string">&quot;THIN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the primary constructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> (<span class="params">var crustSize: <span class="type">Int</span>, var crustType: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// one-arg auxiliary constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(crustSize: <span class="type">Int</span>) = &#123;</span><br><span class="line">        <span class="keyword">this</span>(crustSize, <span class="type">DefaultCrustType</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// one-arg auxiliary constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(crustType: <span class="type">String</span>) = &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="type">DefaultCrustSize</span>, crustType)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// zero-arg auxiliary constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>() = &#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="type">DefaultCrustSize</span>, <span class="type">DefaultCrustType</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s&quot;A <span class="subst">$crustSize</span> inch pizza with a <span class="subst">$crustType</span> crust&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Pizza</span>(<span class="type">DefaultCrustSize</span>, <span class="type">DefaultCrustType</span>)</span><br><span class="line"><span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Pizza</span>(<span class="type">DefaultCrustSize</span>)</span><br><span class="line"><span class="keyword">val</span> p3 = <span class="keyword">new</span> <span class="type">Pizza</span>(<span class="type">DefaultCrustType</span>)</span><br><span class="line"><span class="keyword">val</span> p4 = <span class="keyword">new</span> <span class="type">Pizza</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>带默认值的构造函数</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Socket</span>(<span class="params">var timeout: <span class="type">Int</span> = 2000, var linger: <span class="type">Int</span> = 3000</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s&quot;timeout: <span class="subst">$timeout</span>, linger: <span class="subst">$linger</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>方法</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">		a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能使用 var 和 val</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = ???</span><br><span class="line"><span class="comment">// 使用 ???，类似于 python 的 pass</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>匿名函数</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> boo = (i: <span class="type">Int</span>) =&gt; i * <span class="number">2</span></span><br><span class="line"><span class="keyword">val</span> boo: <span class="type">Int</span> =&gt; <span class="type">Int</span> = <span class="type">Lambda</span>$<span class="number">1748</span>/<span class="number">964687142</span>@<span class="number">190</span>a5f74</span><br></pre></td></tr></table></figure>

<p>可以配合 <code>map</code> , <code>filter</code>, <code>reduce</code>使用</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> ints = <span class="type">List</span>.range(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> ints: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; ints.filter((i: <span class="type">Int</span>) =&gt; i &gt; <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> res12: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; ints.map((i: <span class="type">Int</span>) =&gt; i * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> res13: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; ints.reduce((a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a + b)</span><br><span class="line"><span class="keyword">val</span> res14: <span class="type">Int</span> = <span class="number">45</span></span><br></pre></td></tr></table></figure>

<p><a class="link" href="https://docs.scala-lang.org/overviews/collections-2.13/seqs.html">常用序列函数<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a 方法 b</span><br><span class="line">a.方法(b)</span><br></pre></td></tr></table></figure>

<p>上面二者是等价的。所以：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">books flatMap (s =&gt; s.toList)</span><br><span class="line">books.flatMap(s =&gt; s.toList)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>闭包</p>
</blockquote>
<p>闭包是一个函数，<strong>返回值依赖于声明在函数外部的一个或多个变量。</strong></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factor = <span class="number">3</span>  </span><br><span class="line"><span class="keyword">val</span> multiplier = (i:<span class="type">Int</span>) =&gt; i * factor  </span><br><span class="line"><span class="comment">// multiplier 是一个闭包</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>接口</p>
</blockquote>
<p>scala <code>trait</code> 相当于 java  <code>interface</code>，但是更像是 java 的抽象类。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Speaker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>(): <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TailWagger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTail</span></span>(): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopTail</span></span>(): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startRunning</span></span>(): <span class="type">Unit</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopRunning</span></span>(): <span class="type">Unit</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦你有了这些小块，你就可以<code>Dog</code>通过扩展它们来创建一个类，并实现必要的方法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Speaker</span> <span class="keyword">with</span> <span class="title">TailWagger</span> <span class="keyword">with</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Speaker</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>(): <span class="type">String</span> = <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TailWagger</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTail</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;tail is wagging&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopTail</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;tail is stopped&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Runner</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startRunning</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;I&#x27;m running&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopRunning</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;Stopped running&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>extends</code> 和 <code>with</code> 实现多扩展</li>
</ul>
<p><strong>可以在变量初始化的时候动态追加特征</strong>☕️</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Stop</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">stop</span></span>() = println(<span class="string">&quot;stop&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = println(<span class="string">&quot;running&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">var name: <span class="type">String</span> = &quot;<span class="type">Dog</span>&quot;, var age: <span class="type">Int</span> = 10</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>(): <span class="type">String</span> = <span class="string">s&quot;<span class="subst">$name</span> <span class="subst">$age</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> d = <span class="keyword">new</span> <span class="type">Dog</span> <span class="keyword">with</span> <span class="type">Run</span> <span class="keyword">with</span> <span class="type">Stop</span></span><br><span class="line">  d.run</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>抽象类</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">name: <span class="type">String</span> = &quot;<span class="type">Animal</span>&quot;</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>(): <span class="type">Unit</span> = println(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name: <span class="type">String</span> = &quot;<span class="type">Dog</span>&quot;</span>) <span class="keyword">extends</span> <span class="title">Animal</span>(<span class="params">name</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> d = <span class="keyword">new</span> <span class="type">Dog</span></span><br><span class="line">  d.speak()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>object的构造器不接受参数传递。</p>
<blockquote>
<p>单例对象</p>
</blockquote>
<p>使用object中的常量或方法，通过object名直接调用，对象构造器<strong>在对象第一次被使用时调用</strong>（如果某对象一直未被使用，那么其构造器也不会被调用）。</p>
<p>Scala并没有提供Java那样的<strong>静态方法或静态字段</strong>，但是，可以采用object关键字实现<strong>单例对象</strong>，具备和Java静态方法同样的功能。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> lastId = <span class="number">0</span>  <span class="comment">//一个人的身份编号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newPersonId</span></span>() = &#123;</span><br><span class="line">        lastId +=<span class="number">1</span></span><br><span class="line">        lastId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">&quot;The id is %d.\n&quot;</span>,<span class="type">Person</span>.newPersonId())</span><br></pre></td></tr></table></figure>



<blockquote>
<p>伴生对象</p>
</blockquote>
<p>当单例对象与某个类<strong>同名</strong>时，它被称为这个类的“伴生对象”。类和它的伴生对象必须存在于<strong>同一个文件</strong>中，而且可<strong>以相互访问私有成员</strong>（字段和方法）。</p>
<blockquote>
<p>apply 方法和 update 方法</p>
</blockquote>
<p>apply 约定如下：用<strong>括号</strong>传递给变量(对象)一个或多个参数时，Scala 会把它转换成对apply方法的调用；</p>
<ul>
<li>用括号传递给 变量 调用 class 的 apply</li>
<li>用括号传递给 对象 调用 object 的 apply</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApplyClassAndObject</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>() = println(<span class="string">&quot;apply method in class is called!&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greetingOfClass</span></span>: <span class="type">Unit</span> =&#123;</span><br><span class="line">        println(<span class="string">&quot;Greeting method in class is called.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>() = &#123;</span><br><span class="line">          println(<span class="string">&quot;apply method in object is called&quot;</span>)</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ApplyTest</span>()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span>  <span class="title">TestApplyClassAndObject</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">main</span> </span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;       </span><br><span class="line">        <span class="keyword">val</span> a = <span class="type">ApplyTest</span>() <span class="comment">//这里会调用伴生对象中的apply方法       </span></span><br><span class="line">        a.greetingOfClass</span><br><span class="line">        a() <span class="comment">// 这里会调用伴生类中的apply方法         </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在Scala中，<strong>伴生对象有一个重要用途</strong>，那就是，我们通常将<strong>伴生对象作为工厂</strong>使用，这样就不需要使用关键字new来创建一个实例化对象了。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>(<span class="params">name: <span class="type">String</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span></span>() &#123;println(<span class="string">&quot;Car name is &quot;</span>+ name)&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(name: <span class="type">String</span>) = <span class="keyword">new</span> <span class="type">Car</span>(name) <span class="comment">//apply方法会调用伴生类Car的构造方法创建一个Car类的实例化对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>update 与此相似的，当对带有括号并包括一到若干参数的对象进行赋值时，编译器将调用对象的update方法，在调用时，是把括号里的参数和等号右边的对象一起作为update方法的输入参数来执行调用</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> myStrArr = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">String</span>](<span class="number">3</span>) <span class="comment">//声明一个长度为3的字符串数组，每个数组元素初始化为null</span></span><br><span class="line">myStrArr(<span class="number">0</span>) = <span class="string">&quot;BigData&quot;</span> <span class="comment">//实际上，调用了伴生类Array中的update方法，执行myStrArr.update(0,&quot;BigData&quot;)</span></span><br><span class="line">myStrArr(<span class="number">1</span>) = <span class="string">&quot;Hadoop&quot;</span> <span class="comment">//实际上，调用了伴生类Array中的update方法，执行myStrArr.update(1,&quot;Hadoop&quot;)</span></span><br><span class="line">myStrArr(<span class="number">2</span>) = <span class="string">&quot;Spark&quot;</span> <span class="comment">//实际上，调用了伴生类Array中的update方法，执行myStrArr.update(2,&quot;Spark&quot;)</span></span><br></pre></td></tr></table></figure>

<p>从上面可以看出，在进行元组赋值的时候，之所以没有采用Java中的方括号myStrArr[0]，而是采用圆括号的形式，myStrArr(0)，是因为存在上述的update方法的机制。</p>
<h2 id="高级数据结构"><a href="#高级数据结构" class="headerlink" title="高级数据结构"></a>高级数据结构</h2><p><img src="https://img-blog.csdnimg.cn/20210415202942686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDE2MTI1NA==,size_16,color_FFFFFF,t_70"></p>
<h3 id="ArrayBuffer"><a href="#ArrayBuffer" class="headerlink" title="ArrayBuffer"></a>ArrayBuffer</h3><p>类似于 c++ 的 vector</p>
<p>要使用<code>ArrayBuffer</code>你必须先导入它：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ArrayBuffer</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>C</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> ints = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">val</span> names = <span class="type">ArrayBuffer</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> nums = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>R</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">arr(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>U</p>
</blockquote>
<p>推荐使用 ++，而不是 append <a class="link" href="https://blog.csdn.net/a822631129/article/details/109725760?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-109725760-blog-103249270.pc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-109725760-blog-103249270.pc_relevant_recovery_v2&utm_relevant_index=2">耗时比较<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add one element</span></span><br><span class="line">nums += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add multiple elements</span></span><br><span class="line">nums += <span class="number">5</span> += <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// add multiple elements from another collection</span></span><br><span class="line">nums ++= <span class="type">List</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>D</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remove one element</span></span><br><span class="line">nums -= <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove multiple elements</span></span><br><span class="line">nums -= <span class="number">7</span> -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove multiple elements using another collection</span></span><br><span class="line">nums --= <span class="type">Array</span>(<span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>



<p>作为简要概述，您可以使用以下几种方法<code>ArrayBuffer</code>：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="type">ArrayBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)         <span class="comment">// ArrayBuffer(1, 2, 3)</span></span><br><span class="line">a.append(<span class="number">4</span>)                          <span class="comment">// ArrayBuffer(1, 2, 3, 4)</span></span><br><span class="line">a.appendAll(<span class="type">Seq</span>(<span class="number">5</span>, <span class="number">6</span>))               <span class="comment">// ArrayBuffer(1, 2, 3, 4, 5, 6)</span></span><br><span class="line">a.clear                              <span class="comment">// ArrayBuffer()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = <span class="type">ArrayBuffer</span>(<span class="number">9</span>, <span class="number">10</span>)           <span class="comment">// ArrayBuffer(9, 10)</span></span><br><span class="line">a.insert(<span class="number">0</span>, <span class="number">8</span>)                       <span class="comment">// ArrayBuffer(8, 9, 10)</span></span><br><span class="line">a.insertAll(<span class="number">0</span>, <span class="type">Vector</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>))   <span class="comment">// ArrayBuffer(4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line">a.prepend(<span class="number">3</span>)                         <span class="comment">// ArrayBuffer(3, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line">a.prependAll(<span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>))         <span class="comment">// ArrayBuffer(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = <span class="type">ArrayBuffer</span>.range(&#x27;a&#x27;, &#x27;h&#x27;)  <span class="comment">// ArrayBuffer(a, b, c, d, e, f, g)</span></span><br><span class="line">a.remove(<span class="number">0</span>)                          <span class="comment">// ArrayBuffer(b, c, d, e, f, g)</span></span><br><span class="line">a.remove(<span class="number">2</span>, <span class="number">3</span>)                       <span class="comment">// ArrayBuffer(b, c, g)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a = <span class="type">ArrayBuffer</span>.range(&#x27;a&#x27;, &#x27;h&#x27;)  <span class="comment">// ArrayBuffer(a, b, c, d, e, f, g)</span></span><br><span class="line">a.dropInPlace(<span class="number">2</span>)                     <span class="comment">// ArrayBuffer(c, d, e, f, g)</span></span><br><span class="line">a.dropRightInPlace(<span class="number">2</span>)                <span class="comment">// ArrayBuffer(c, d, e)</span></span><br><span class="line"></span><br><span class="line">scala.util.<span class="type">Sorting</span>.quickSort(fruits) <span class="comment">// sort</span></span><br></pre></td></tr></table></figure>

<p>Array 类似于 python tuple，ArrayBuffer 类似于 python list。可以调用toArray()和toBuffer()转换。</p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><a class="link" href="https://www.scala-lang.org/api/current/scala/collection/immutable/List.html">The List class<i class="fas fa-external-link-alt"></i></a> is a linear, immutable sequence. All this means is that it’s a linked-list that you can’t modify. Any time you want to add or remove <code>List</code> elements, you create a new <code>List</code> from an existing <code>List</code>.</p>
<blockquote>
<p>初始化</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> names = <span class="type">List</span>(<span class="string">&quot;Joel&quot;</span>, <span class="string">&quot;Chris&quot;</span>, <span class="string">&quot;Ed&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> names: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">List</span>(<span class="string">&quot;Joel&quot;</span>, <span class="string">&quot;Chris&quot;</span>, <span class="string">&quot;Ed&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> list = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="type">Nil</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加元素</p>
</blockquote>
<p>由于 List 是单链表结构，所以在首尾添加快，中间慢。</p>
<blockquote>
<p>Tip: If you want to prepend and append elements to an immutable sequence, use <code>Vector</code> instead.</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>You <em>prepend</em> elements to a <code>List</code> like this:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> b = <span class="number">0</span> +: a</span><br></pre></td></tr></table></figure>

<p>and this:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> b = <span class="type">List</span>(<span class="number">-1</span>, <span class="number">0</span>) ++: a</span><br></pre></td></tr></table></figure>

<p>The REPL shows how this works:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> b = <span class="number">0</span> +: a</span><br><span class="line">b: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> b = <span class="type">List</span>(<span class="number">-1</span>, <span class="number">0</span>) ++: a</span><br><span class="line">b: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p><a class="link" href="https://www.scala-lang.org/api/current/scala/collection/immutable/Vector.html">The Vector class<i class="fas fa-external-link-alt"></i></a> is an indexed, immutable sequence. </p>
<p>创建，添加类似 List</p>
<h3 id="Map-（mutable）"><a href="#Map-（mutable）" class="headerlink" title="Map （mutable）"></a>Map （mutable）</h3><p>To use the mutable <code>Map</code> class, first import it:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">Map</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> states = <span class="type">Map</span>(</span><br><span class="line">    <span class="string">&quot;AK&quot;</span> -&gt; <span class="string">&quot;Alaska&quot;</span>,</span><br><span class="line">    <span class="string">&quot;IL&quot;</span> -&gt; <span class="string">&quot;Illinois&quot;</span>,</span><br><span class="line">    <span class="string">&quot;KY&quot;</span> -&gt; <span class="string">&quot;Kentucky&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Add</p>
</blockquote>
<p>Now you can add a single element to the <code>Map</code> with <code>+=</code>, like this:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">states += (<span class="string">&quot;AL&quot;</span> -&gt; <span class="string">&quot;Alabama&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>You also add multiple elements using <code>+=</code>:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">states += (<span class="string">&quot;AR&quot;</span> -&gt; <span class="string">&quot;Arkansas&quot;</span>, <span class="string">&quot;AZ&quot;</span> -&gt; <span class="string">&quot;Arizona&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>You can add elements from another <code>Map</code> using <code>++=</code>:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">states ++= <span class="type">Map</span>(<span class="string">&quot;CA&quot;</span> -&gt; <span class="string">&quot;California&quot;</span>, <span class="string">&quot;CO&quot;</span> -&gt; <span class="string">&quot;Colorado&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>D</p>
</blockquote>
<p>You remove elements from a <code>Map</code> using <code>-=</code> and <code>--=</code> and specifying the key values, as shown in the following examples:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">states -= <span class="string">&quot;AR&quot;</span></span><br><span class="line">states -= (<span class="string">&quot;AL&quot;</span>, <span class="string">&quot;AZ&quot;</span>)</span><br><span class="line">states --= <span class="type">List</span>(<span class="string">&quot;AL&quot;</span>, <span class="string">&quot;AZ&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>U</p>
</blockquote>
<p>You update <code>Map</code> elements by reassigning their key to a new value:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">states(<span class="string">&quot;AK&quot;</span>) = <span class="string">&quot;Alaska, A Really Big State&quot;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Traversing a Map</p>
</blockquote>
<p>a nice way to loop over all of the map elements is with this <code>for</code> loop syntax:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((k,v) &lt;- ratings) println(<span class="string">s&quot;key: <span class="subst">$k</span>, value: <span class="subst">$v</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">ratings.contains(element)</span><br></pre></td></tr></table></figure>



<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>The <a class="link" href="https://docs.scala-lang.org/overviews/collections-2.13/sets.html">Scala Set class<i class="fas fa-external-link-alt"></i></a> is an iterable collection with no duplicate elements.</p>
<p>Scala has several more <code>Set</code> classes, including <code>SortedSet</code>, <code>LinkedHashSet</code>, and more. Please see the <a class="link" href="https://docs.scala-lang.org/overviews/collections-2.13/sets.html">Set class documentation<i class="fas fa-external-link-alt"></i></a> for more details on those classes.</p>
<h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>元组是一个简洁的类，提供存储异构数据的方法。元组不可迭代。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> t = (<span class="number">3</span>, <span class="string">&quot;Three&quot;</span>, <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;Al&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>访问只能使用 <code>._id</code> 的方式访问，其中 <code>id</code> 从 1 开始</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.1</span>)</span><br><span class="line"><span class="keyword">var</span> t: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Double</span>) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1.1</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; t._1</span><br><span class="line"><span class="keyword">val</span> res2: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scala&gt; t._4</span><br><span class="line"><span class="keyword">val</span> res3: <span class="type">Double</span> = <span class="number">1.1</span></span><br></pre></td></tr></table></figure>



<p>可以使用类似 python golang 的初始化方式：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span>(x, y, z) = (<span class="number">3</span>, <span class="string">&quot;Three&quot;</span>, <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;David&quot;</span>))</span><br></pre></td></tr></table></figure>



<h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">      <span class="keyword">val</span> it = <span class="type">Iterator</span>(<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>)</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">while</span> (it.hasNext)&#123;</span><br><span class="line">         println(it.next())</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SBT-amp-SCALATEST"><a href="#SBT-amp-SCALATEST" class="headerlink" title="SBT &amp; SCALATEST"></a>SBT &amp; SCALATEST</h2><ul>
<li>The <a class="link" href="http://www.scala-sbt.org/">sbt build tool<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link" href="http://www.scalatest.org/">ScalaTest<i class="fas fa-external-link-alt"></i></a>, a code testing framework</li>
</ul>
<h3 id="SBT"><a href="#SBT" class="headerlink" title="SBT"></a>SBT</h3><p><a class="link" href="https://codeantenna.com/a/4w7BHA15R2">SBT常用命令<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="Directory-structure"><a href="#Directory-structure" class="headerlink" title="Directory structure"></a>Directory structure</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">build.sbt</span><br><span class="line">project/</span><br><span class="line">src/</span><br><span class="line">-- main/</span><br><span class="line">   |-- java/</span><br><span class="line">   |-- resources/</span><br><span class="line">   |-- scala/</span><br><span class="line">|-- <span class="built_in">test</span>/</span><br><span class="line">   |-- java/</span><br><span class="line">   |-- resources/</span><br><span class="line">   |-- scala/</span><br><span class="line">target/</span><br></pre></td></tr></table></figure>

<p> 编译项目：</p>
<ul>
<li>可以使用 <code>sbt run</code> 来构建项目</li>
<li>也可以使用 <code>sbt</code> 交互式的构建项目</li>
<li><code>sbt reload</code> 拉取镜像</li>
<li><code>sbt package</code> 打包成 jar 包</li>
<li></li>
</ul>
<h3 id="Scala-test"><a href="#Scala-test" class="headerlink" title="Scala test"></a>Scala test</h3><p>ctrl + shift + t || command + shift + t 快速创建 test</p>
<h4 id="ScalaTest-TDD-风格"><a href="#ScalaTest-TDD-风格" class="headerlink" title="ScalaTest TDD 风格"></a>ScalaTest TDD 风格</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pizza</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.scalatest.funsuite.<span class="type">AnyFunSuite</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span> <span class="keyword">extends</span> <span class="title">AnyFunSuite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test 1</span></span><br><span class="line">  test(<span class="string">&quot;the name is set correctly in constructor&quot;</span>) &#123;</span><br><span class="line">    assert(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test 2</span></span><br><span class="line">  test(<span class="string">&quot;test name&quot;</span>) &#123;</span><br><span class="line">    assert(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用 <code>sbt test</code> 指令就可以运行了</p>
<h4 id="ScalaTest-BDD-风格"><a href="#ScalaTest-BDD-风格" class="headerlink" title="ScalaTest BDD 风格"></a>ScalaTest BDD 风格</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simpletest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.scalatest.funspec.<span class="type">AnyFunSpec</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathUtilsTest</span> <span class="keyword">extends</span> <span class="title">AnyFunSpec</span> </span>&#123;</span><br><span class="line">  describe(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">    it(<span class="string">&quot;should has zero test&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> res = <span class="number">0</span> * <span class="number">2</span></span><br><span class="line">      assert(res == <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    it(<span class="string">&quot;pending&quot;</span>)(pending)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BDD 使用 <code>AnyFunSpec</code> ，TDD 使用 <code>AnyFunSuite</code></li>
<li>使用 <code>pending</code> 来标记还没有编写的 test</li>
</ul>
<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><p><em>Functional programming</em> is a style of programming that emphasizes writing applications using only <strong>pure functions</strong> and <strong>immutable values</strong>. </p>
<h3 id="pure-function"><a href="#pure-function" class="headerlink" title="pure function"></a>pure function</h3><ol>
<li>函数的 output 取决于 input</li>
<li>函数不会改变任何隐藏状态，例如 verilog 的寄存器</li>
<li>函数不从外界读取和输出信息</li>
<li>仅存在副作用，任何返回<code>Unit</code>的函数都是副作用的</li>
</ol>
<p>任何时候你用相同的输入值调用一个纯函数，你总是会得到相同的结果。</p>
<ul>
<li><p>纯函数：<code>scala.math.abs</code></p>
</li>
<li><p>不纯函数：集合类上的 <code>foreach</code>，调用了 <code>STDOUT</code></p>
</li>
</ul>
<p>FP applications have <strong>a core of pure functions</strong> combined with <strong>other impure functions</strong> to interact with the outside world.</p>
<h4 id="处理空值"><a href="#处理空值" class="headerlink" title="处理空值"></a>处理空值</h4><p>类似于 golang 返回 <code>(String, error)</code> 一样，但是 scala 没有这种处理逻辑，所以引入了 <code>Option</code> <code>Some</code> <code>None</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toInt</span></span>(s: <span class="type">String</span>): <span class="type">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Some</span>(<span class="type">Integer</span>.parseInt(s.trim))</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; <span class="type">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>处理异常：</p>
<p>使用 match</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">toInt(x) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Some</span>(i) =&gt; println(i)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">None</span> =&gt; println(<span class="string">&quot;That didn&#x27;t work.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>tech</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux</title>
    <url>/2022/04/30/tmux/</url>
    <content><![CDATA[<h1 id="为什么使用-tmux"><a href="#为什么使用-tmux" class="headerlink" title="为什么使用 tmux"></a>为什么使用 tmux</h1><p>tmux 是一个 terminal multiplexer（终端复用器），可以启动一系列的终端会话。方便使用。</p>
<p>tmux 同时解绑了会话和终端窗口的概念。关闭终端窗口，会话并不会终止，而是在运行。</p>
<p><del>因为在 shell 中编写文件的时候，需要开多个终端，还要用鼠标切屏有点麻烦。</del></p>
<p><strong>安装</strong> : <code>sudo apt-get install tmux</code></p>
<h1 id="tmux-的使用"><a href="#tmux-的使用" class="headerlink" title="tmux 的使用"></a>tmux 的使用</h1><p><img src="/images/tmux/image-20220501100622865.png" alt="image-20220501100622865"></p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动命名 tmux</span></span><br><span class="line">$ tmux new -s &lt;name&gt;</span><br><span class="line">$ ts &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 tmux 会话</span></span><br><span class="line">$ tmux detach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 tmux 会话</span></span><br><span class="line">$ tmux <span class="built_in">ls</span></span><br><span class="line">$ tl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 tmux 会话</span></span><br><span class="line">$ tmux attach -t &lt;编号&gt; | &lt;会话名&gt;</span><br><span class="line">$ ta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死会话</span></span><br><span class="line">$ tmux kill-session -t &lt;编号&gt; | &lt;会话&gt;</span><br><span class="line">$ tkss</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换会话</span></span><br><span class="line">$ tmux switch -s &lt;<span class="built_in">id</span>&gt; | &lt;session-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux 的其他命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有快捷键，及其对应的 Tmux 命令</span></span><br><span class="line">$ tmux list-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有 Tmux 命令及其参数</span></span><br><span class="line">$ tmux list-commands</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前所有 Tmux 会话的信息</span></span><br><span class="line">$ tmux info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载当前的 Tmux 配置</span></span><br><span class="line">$ tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>



<h2 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h2><h4 id="划分窗格"><a href="#划分窗格" class="headerlink" title="划分窗格"></a>划分窗格</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 划分上下两个窗格</span></span><br><span class="line">$ tmux split-window</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分左右两个窗格</span></span><br><span class="line">$ tmux split-window -h</span><br></pre></td></tr></table></figure>

<h4 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tmux select-pane -UDLR</span><br></pre></td></tr></table></figure>

<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul>
<li><p>ctrl+b %：划分左右窗格</p>
</li>
<li><p>ctrl+b “：划分上下窗格</p>
</li>
<li><p>ctrl+b !: 将 pane 拆分成一个 window</p>
</li>
<li><p>ctrl+b z: 将 pane 全屏显示</p>
</li>
<li><p>ctrl+b 方向键：移动光标</p>
</li>
<li><p>ctrl+b x: 关闭窗格</p>
</li>
</ul>
<h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul>
<li>ctrl+b c：create</li>
<li>ctrl+b ,: rename</li>
<li>ctrl+b w: select</li>
</ul>
<h1 id="oh-my-tmux"><a href="#oh-my-tmux" class="headerlink" title="oh-my-tmux"></a>oh-my-tmux</h1><p><a class="link" href="https://github.com/gpakosz/.tmux">github: oh my tmux<i class="fas fa-external-link-alt"></i></a> </p>
<p>使用 tmux 当然要美化一下捏，zsh 中的 tmux plugin 也挺好用的捏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/gpakosz/.tmux.git</span><br><span class="line">$ <span class="built_in">ln</span> -s -f .tmux/.tmux.conf</span><br><span class="line">$ <span class="built_in">cp</span> .tmux/.tmux.conf.local .</span><br><span class="line"></span><br><span class="line">$ tmux <span class="built_in">source</span> ~/.tmux.conf</span><br></pre></td></tr></table></figure>

<p>问题：色彩显示不完全</p>
<p>需要在 <code>.tmux.conf</code> 中配置一下 color</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">if-shell <span class="string">&#x27;[ $(uname -s) = Linux ]&#x27;</span> \</span><br><span class="line">     <span class="string">&#x27;set -g default-terminal &quot;xterm-256color&quot;&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 基础学习</title>
    <url>/2022/04/18/vim/</url>
    <content><![CDATA[<h1 id="Getting-Familiar"><a href="#Getting-Familiar" class="headerlink" title="Getting Familiar"></a>Getting Familiar</h1><h2 id="Vim-modes"><a href="#Vim-modes" class="headerlink" title="Vim modes"></a>Vim modes</h2><ul>
<li>Command mode</li>
<li>insert mode</li>
<li>Command line mode</li>
<li>Visual mode: switch from command mode to visual node type <code>v</code></li>
</ul>
<h2 id="operate-with-file"><a href="#operate-with-file" class="headerlink" title="operate with file"></a>operate with file</h2><blockquote>
<p>create new file or load file</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:edit message.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>open file in read-only mode</p>
</blockquote>
<p>use -R option</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim -R message.txt</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ view message.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>edit existing file</p>
</blockquote>
<ul>
<li><p>quit editor without saving changes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:q!</span><br></pre></td></tr></table></figure>
</li>
<li><p>save changes and quit editor</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="editing"><a href="#editing" class="headerlink" title="editing"></a>editing</h1><blockquote>
<p>insert text <strong>before</strong> cursor</p>
</blockquote>
<p><code>i</code> switch to insert mode</p>
<blockquote>
<p>insert text at the <strong>beginning of line</strong></p>
</blockquote>
<p>problem: you want to insert text at the beginning of <strong>current line</strong> </p>
<p>solve: use <code>I</code></p>
<blockquote>
<p>append text <strong>after</strong> cursor</p>
</blockquote>
<p><code>a</code></p>
<blockquote>
<p>append text at the end of line</p>
</blockquote>
<p><code>A</code></p>
<blockquote>
<p><strong>open new line</strong> <strong>below</strong> cursor</p>
</blockquote>
<p><code>o</code></p>
<blockquote>
<p>open new line <strong>above</strong> cursor</p>
</blockquote>
<p><code>O</code></p>
<blockquote>
<p>change text</p>
</blockquote>
<p>problem: want to change text in current line then insert</p>
<p>solve: <code>cc</code> or <code>C</code></p>
<blockquote>
<p>replace text</p>
</blockquote>
<p>problem: want to replace character or entire line</p>
<p>solve: <code>r</code> or <code>R</code></p>
<blockquote>
<p>Join text</p>
</blockquote>
<p>problem: want to merge two line (this line and next line)</p>
<p>solve: <code>J</code></p>
<h1 id="Navigating"><a href="#Navigating" class="headerlink" title="Navigating"></a>Navigating</h1><p>problem: how to quickly move cursor</p>
<h2 id="Basic-navigation-move-cursor"><a href="#Basic-navigation-move-cursor" class="headerlink" title="Basic navigation (move cursor)"></a>Basic navigation (move cursor)</h2><ul>
<li><code>h</code>: left</li>
<li><code>l</code>: right</li>
<li><code>j</code>: up</li>
<li><code>k</code>: down</li>
</ul>
<blockquote>
<p>more: navigation use number with those basic command, like 10j</p>
</blockquote>
<ul>
<li><code>0</code>: move cursor to the beginning of current line. like <code>I</code> but not to insert mode</li>
<li><code>$</code>: move cursor to the end of current line</li>
<li><code>ctrl + f</code>: scroll down entire page</li>
<li><code>ctrl + b</code>: scroll up entire page</li>
</ul>
<h2 id="navigate-to-lines"><a href="#navigate-to-lines" class="headerlink" title="navigate to lines"></a>navigate to lines</h2><ul>
<li><code>:n</code>: jump to the nth line</li>
<li><code>:0</code>: jump to the <strong>start</strong> of file</li>
<li><code>:$</code>: jump to the <strong>end</strong> of file</li>
</ul>
<h2 id="word-navigation"><a href="#word-navigation" class="headerlink" title="word navigation"></a>word navigation</h2><ul>
<li><code>w</code>: move cursor to the beginning of <strong>next</strong> word</li>
<li><code>b</code>: move cursor to the end of <strong>previous</strong> word</li>
<li><code>e</code>: move cursor to the end of <strong>current</strong> word</li>
</ul>
<h1 id="revisiting-editing"><a href="#revisiting-editing" class="headerlink" title="revisiting editing"></a>revisiting editing</h1><h2 id="cut-copy-and-paste"><a href="#cut-copy-and-paste" class="headerlink" title="cut, copy and paste"></a>cut, copy and paste</h2><ul>
<li><code>x</code>: delete character from cursor position</li>
<li><code>X</code>: delete previous character from cursor position</li>
<li><code>y</code>: copy single character</li>
<li><code>p</code>: paste character <strong>after</strong> cursor position</li>
<li><code>P</code>: paste character <strong>before</strong> cursor position</li>
</ul>
<h2 id="multi-position-command"><a href="#multi-position-command" class="headerlink" title="multi-position command"></a>multi-position command</h2><ul>
<li><code>dw</code>: Delete word <strong>from</strong> cursor position</li>
<li><code>D</code>: Delete entire line from cursor position</li>
<li><code>dd</code>: Delete entire line</li>
<li><code>Y</code> or <code>yy</code>: Copies entire line</li>
</ul>
<p>more: <code>3dw</code> or <code>d3w</code> delete 3 words</p>
<ul>
<li><p><code>u</code>: undo like <code>ctrl + z</code></p>
</li>
<li><p><code>:red</code> or <code>ctrl + r</code>: redo like <code>ctrl + shift + z</code></p>
</li>
</ul>
<h1 id="searching"><a href="#searching" class="headerlink" title="searching"></a>searching</h1><h2 id="search-in-current-file"><a href="#search-in-current-file" class="headerlink" title="search in current file"></a>search in current file</h2><blockquote>
<p>search in <strong>forward</strong> direction</p>
</blockquote>
<ul>
<li><code>/&lt;expression&gt;</code></li>
<li><code>n</code>: next</li>
<li><code>N</code>: previous</li>
<li><code>//</code>: repeat search</li>
</ul>
<blockquote>
<p>search in <strong>backward</strong> direction</p>
</blockquote>
<ul>
<li><code>?&lt;expression&gt;</code></li>
<li><code>n</code>: previous</li>
<li><code>N</code>: next</li>
<li><code>??</code>: repeat</li>
</ul>
<blockquote>
<p>search word <strong>under cursor</strong></p>
</blockquote>
<ul>
<li><code>*</code>: next </li>
<li><code>#</code>: previous</li>
</ul>
<h1 id="macros"><a href="#macros" class="headerlink" title="macros"></a>macros</h1><blockquote>
<p>start recording</p>
</blockquote>
<ol>
<li>press <code>q</code> start</li>
<li>use single character as a macros name</li>
</ol>
<blockquote>
<p>stop recording</p>
</blockquote>
<p>press <code>q</code> again</p>
<blockquote>
<p>use macros</p>
</blockquote>
<p><code>@&#123;macros name&#125;</code> or <code>number@&#123;name&#125;</code></p>
<blockquote>
<p>list macros</p>
</blockquote>
<p><code>:registers</code></p>
<h1 id="vimrc"><a href="#vimrc" class="headerlink" title="vimrc"></a>vimrc</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> mapleader=<span class="string">&quot; &quot;</span></span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ignorecase</span><br><span class="line"><span class="built_in">set</span> smartcase</span><br><span class="line"><span class="built_in">set</span> hlsearch</span><br><span class="line"><span class="built_in">set</span> incsearch</span><br><span class="line"><span class="built_in">exec</span> <span class="string">&quot;nohlsearch&quot;</span></span><br><span class="line"></span><br><span class="line">nnoremap = nzz</span><br><span class="line">nnoremap - Nzz</span><br><span class="line"></span><br><span class="line">nnoremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt;</span><br><span class="line">nnoremap sj :<span class="built_in">set</span> splitright&lt;CR&gt;:vsplit&lt;CR&gt;</span><br><span class="line">nnoremap sk :<span class="built_in">set</span> nosplitright&lt;CR&gt;:vspilt&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> noshowcmd</span><br><span class="line"><span class="built_in">set</span> wrap</span><br><span class="line"><span class="built_in">set</span> autowrite</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> smarttab</span><br><span class="line"><span class="built_in">set</span> tabstop=4</span><br><span class="line"><span class="built_in">set</span> shiftwidth=4</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> fileencodings=utf-9,gb2312,gbk,gb18030</span><br><span class="line"></span><br><span class="line">nnoremap tt :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">nnoremap J 5j</span><br><span class="line">nnoremap K 5k</span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#begin()</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;connorholyday/vim-snazzy&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;wakatime/vim-wakatime&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-sensible&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;Raimondi/delimitMate&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;ycm-core/YouCompleteMe&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;dracula/vim&#x27;</span>, &#123;<span class="string">&#x27;as&#x27;</span>: <span class="string">&#x27;dracula&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">call plug<span class="comment">#end()</span></span><br><span class="line"></span><br><span class="line">colorscheme dracula</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#tabline#enabled=1</span></span><br><span class="line"><span class="built_in">let</span> g:airline<span class="comment">#extensions#branch#enabled=1</span></span><br><span class="line"><span class="built_in">let</span> g:airline_powerline_fonts=1</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>技术</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/12/04/images/image-20220417153331430.png/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
